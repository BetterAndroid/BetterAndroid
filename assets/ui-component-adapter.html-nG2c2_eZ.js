import{_ as o,r as t,o as p,c as i,a as s,b as n,d as a,e as l}from"./app-ewiN1Yda.js";const c={},r=l(`<h1 id="ui-component-adapter" tabindex="-1"><a class="header-anchor" href="#ui-component-adapter" aria-hidden="true">#</a> ui-component-adapter</h1><p><img src="https://img.shields.io/maven-central/v/com.highcapable.betterandroid/ui-component-adapter?logo=apachemaven&amp;logoColor=orange&amp;style=flat-square" alt="Maven Central"><span style="margin-left:5px;"></span><img src="https://img.shields.io/maven-metadata/v?metadataUrl=https%3A%2F%2Fraw.githubusercontent.com%2FHighCapable%2Fmaven-repository%2Frefs%2Fheads%2Fmain%2Frepository%2Freleases%2Fcom%2Fhighcapable%2Fbetterandroid%2Fui-component-adapter%2Fmaven-metadata.xml&amp;logo=apachemaven&amp;logoColor=orange&amp;label=highcapable-maven-releases&amp;style=flat-square" alt="Maven metadata URL"><span style="margin-left:5px;"></span><img src="https://img.shields.io/badge/Min SDK-21-orange?logo=android&amp;style=flat-square" alt="Android Min SDK"></p><p>This is a dependency for UI (user interface) adapter components.</p><h2 id="configure-dependency" tabindex="-1"><a class="header-anchor" href="#configure-dependency" aria-hidden="true">#</a> Configure Dependency</h2><p>You can add this module to your project using the following method.</p><h3 id="sweetdependency-recommended" tabindex="-1"><a class="header-anchor" href="#sweetdependency-recommended" aria-hidden="true">#</a> SweetDependency (Recommended)</h3><p>Add dependency in your project&#39;s <code>SweetDependency</code> configuration file.</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#8DDB8C;">libraries</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#8DDB8C;">com.highcapable.betterandroid</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">ui-component-adapter</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">+</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Configure dependency in your project&#39;s <code>build.gradle.kts</code>.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.ui.component.adapter)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="version-catalog" tabindex="-1"><a class="header-anchor" href="#version-catalog" aria-hidden="true">#</a> Version Catalog</h3><p>Add dependency in your project&#39;s <code>gradle/libs.versions.toml</code>.</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">[</span><span style="color:#F69D50;">versions</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-ui-component-adapter = </span><span style="color:#96D0FF;">&quot;&lt;version&gt;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">[</span><span style="color:#F69D50;">libraries</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-ui-component-adapter = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:ui-component-adapter&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-ui-component-adapter&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Configure dependency in your project&#39;s <code>build.gradle.kts</code>.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.ui.component.adapter)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Please change <code>&lt;version&gt;</code> to the version displayed at the top of this document.</p><h3 id="traditional-method" tabindex="-1"><a class="header-anchor" href="#traditional-method" aria-hidden="true">#</a> Traditional Method</h3><p>Configure dependency in your project&#39;s <code>build.gradle.kts</code>.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:ui-component-adapter:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Please change <code>&lt;version&gt;</code> to the version displayed at the top of this document.</p><h2 id="function-introduction" tabindex="-1"><a class="header-anchor" href="#function-introduction" aria-hidden="true">#</a> Function Introduction</h2>`,21),d={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter",target:"_blank",rel:"noopener noreferrer"},y={class:"custom-container tip"},A=s("p",{class:"custom-container-title"},"Contents of This Section",-1),u={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter/-base-adapter-builder",target:"_blank",rel:"noopener noreferrer"},m=s("p",null,[n("Can be used to build a "),s("code",null,"BaseAdapter"),n(".")],-1),v={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter/-pager-adapter-builder",target:"_blank",rel:"noopener noreferrer"},D=s("p",null,[n("Can be used to build a "),s("code",null,"PagerAdapter"),n(".")],-1),B={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter/-recycler-adapter-builder",target:"_blank",rel:"noopener noreferrer"},b=s("p",null,[n("Can be used to build a "),s("code",null,"RecyclerView.Adapter"),n(".")],-1),h={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.mediator/-pager-mediator",target:"_blank",rel:"noopener noreferrer"},C=s("p",null,[n("Pager mediator for "),s("code",null,"ViewPager"),n(".")],-1),g={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.cosmetic/-recycler-cosmetic",target:"_blank",rel:"noopener noreferrer"},F=s("p",null,[n("Cosmetic of "),s("code",null,"LayoutManager"),n(" and "),s("code",null,"ItemDecoration"),n(" of "),s("code",null,"RecyclerView"),n(".")],-1),w={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.decoration/-linear-horizontal-item-decoration",target:"_blank",rel:"noopener noreferrer"},f=s("p",null,[n("Linear horizontal list decoration for "),s("code",null,"RecyclerView"),n(".")],-1),k={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.decoration/-linear-vertical-item-decoration",target:"_blank",rel:"noopener noreferrer"},x=s("p",null,[n("Linear vertical list decoration for "),s("code",null,"RecyclerView"),n(".")],-1),V={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.decoration/-grid-vertical-item-decoration",target:"_blank",rel:"noopener noreferrer"},_=s("p",null,[n("Grid vertical list decoration for "),s("code",null,"RecyclerView"),n(".")],-1),R={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.layoutmanager/-linear-layout-manager",target:"_blank",rel:"noopener noreferrer"},I=s("p",null,[n("Enhanced linear layout manager for "),s("code",null,"RecyclerView"),n(".")],-1),P={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.layoutmanager/-grid-layout-manager",target:"_blank",rel:"noopener noreferrer"},T=s("p",null,[n("Enhanced grid layout manager for "),s("code",null,"RecyclerView"),n(".")],-1),M={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.layoutmanager.base/-recycler-layout-manager",target:"_blank",rel:"noopener noreferrer"},q=s("p",null,[n("Enhanced layout manager base class for "),s("code",null,"RecyclerView"),n(".")],-1),L={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.wrapper/-recycler-adapter-wrapper",target:"_blank",rel:"noopener noreferrer"},S=s("p",null,[n("Custom adapter wrapper class for "),s("code",null,"RecyclerView"),n(".")],-1),E={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.factory",target:"_blank",rel:"noopener noreferrer"},H=s("p",null,[n("Extension methods for "),s("code",null,"RecyclerView"),n(" and its adapter builds.")],-1),K={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.factory",target:"_blank",rel:"noopener noreferrer"},N=s("p",null,"Extension methods for the adapter build above.",-1),Y={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.viewholder.delegate.base/-view-holder-delegate",target:"_blank",rel:"noopener noreferrer"},W=s("p",null,[n("Custom "),s("code",null,"ViewHolder"),n(" delegate class.")],-1),z={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.entity/-adapter-position",target:"_blank",rel:"noopener noreferrer"},G=s("p",null,"Adapter position entity.",-1),j=l(`<p>From the beginning of <code>ListView</code> to the emergence of <code>RecyclerView</code>, adapters in Android have always been one of the most troublesome problems for developers.</p><p>To address this problem, <code>BetterAndroid</code> encapsulates the adapters of the following components:</p><p><code>ListView</code>, <code>AutoCompleteTextView</code>, <code>ListPopupWindow</code>, <code>RecyclerView</code>, <code>ViewPager</code>, <code>ViewPager2</code></p><p>In Kotlin you can create a data adapter more easily.</p><p>Now, all you need is a data array and a custom adapter layout to create an adapter very quickly and bind to these components.</p><h3 id="base-adapter" tabindex="-1"><a class="header-anchor" href="#base-adapter" aria-hidden="true">#</a> Base Adapter</h3><p>Create a <code>BaseAdapter</code> for <code>ListView</code>, <code>AutoCompleteTextView</code>, <code>ListPopupWindow</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume that&#39;s your entity class.</span></span>
<span class="line"><span style="color:#F47067;">data</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> iconRes: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> name: </span><span style="color:#F69D50;">String</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// Assume that&#39;s the dataset you need to bind.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> listData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ArrayList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="color:#768390;">// Create and bind to a custom BaseAdapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> listView.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind the dataset.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindData</span><span style="color:#ADBAC7;"> { listData }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind the custom adapter layout adapter_my_layout.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindItemView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayoutBinding</span><span style="color:#ADBAC7;">&gt; { binding, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.iconView.</span><span style="color:#DCBDFB;">setImageResource</span><span style="color:#ADBAC7;">(entity.iconRes)</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.textView.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> entity.name</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind the click event for each item.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onItemViewClick</span><span style="color:#ADBAC7;"> { itemView, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Your code here.</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to manually create an adapter and bind to the above components, please refer to the following example.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume that&#39;s your current Context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// Manually create a BaseAdapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">BaseAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;(context) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// The content is the same as above.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// Then bind to listView.</span></span>
<span class="line"><span style="color:#ADBAC7;">listView.adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> adapter</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Create a <code>PagerAdapter</code> for <code>ViewPager</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume that&#39;s your entity class.</span></span>
<span class="line"><span style="color:#F47067;">data</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> iconRes: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> name: </span><span style="color:#F69D50;">String</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// Assume that&#39;s the dataset you need to bind.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> listData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ArrayList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="color:#768390;">// Create and bind to a custom PagerAdapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> viewPager.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind the dataset.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindData</span><span style="color:#ADBAC7;"> { listData }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind the custom adapter layout adapter_my_layout.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindPageView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayoutBinding</span><span style="color:#ADBAC7;">&gt; { binding, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.iconView.</span><span style="color:#DCBDFB;">setImageResource</span><span style="color:#ADBAC7;">(entity.iconRes)</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.textView.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> entity.name</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also use <code>dataSetCount</code> directly to not specify a dataset and only create multiple pages repeatedly.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Create and bind to a custom PagerAdapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> viewPager.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Manually create two identical pages.</span></span>
<span class="line"><span style="color:#ADBAC7;">    dataSetCount </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind the custom adapter layout adapter_my_layout.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindPageView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayoutBinding</span><span style="color:#ADBAC7;">&gt; { binding, _, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// You can determine the position of the current page through position.</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also reuse the <code>onBindPageView</code> method to create multiple different pages, and the page order is determined by the creation order.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Create and bind to a custom PagerAdapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> viewPager.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind the custom adapter layout adapter_my_layout_1.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindPageView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayout1Binding</span><span style="color:#ADBAC7;">&gt; { binding, _, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// You can determine the position of the current page through position.</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind the custom adapter layout adapter_my_layout_2.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindPageView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayout2Binding</span><span style="color:#ADBAC7;">&gt; { binding, _, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// You can determine the position of the current page through position.</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The number of pages created is the number of times the <code>onBindPageView</code> method is reused.</p><div class="custom-container danger"><p class="custom-container-title">Pay Attention</p><p>If you reuse the <code>onBindPageView</code> method to create multiple different pages, you cannot specify <code>dataSetCount</code> or bind a dataset.</p></div><p>If you need to handle <code>getPageTitle</code> and <code>getPageWidth</code> in <code>PagerAdapter</code>, you can use <code>PagerMediator</code> to accomplish this.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Create and bind to a custom PagerAdapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> viewPager.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind PagerMediator for each item.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindMediators</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Handle page titles.</span></span>
<span class="line"><span style="color:#ADBAC7;">        title </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">when</span><span style="color:#ADBAC7;"> (position) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Home&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Additional Page&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Handle page width (ratio).</span></span>
<span class="line"><span style="color:#ADBAC7;">        width </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">when</span><span style="color:#ADBAC7;"> (position) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1f</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.5f</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// ...</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to manually create a <code>PagerAdapter</code> and bind it to <code>ViewPager</code>, please refer to the following example.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume that&#39;s your current Context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// Manually create a PagerAdapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">PagerAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;(context) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// The content is the same as above.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// Then bind to viewPager.</span></span>
<span class="line"><span style="color:#ADBAC7;">viewPager.adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> adapter</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="recyclerview-adapter" tabindex="-1"><a class="header-anchor" href="#recyclerview-adapter" aria-hidden="true">#</a> RecyclerView Adapter</h3><p>Android Jetpack brings developers a more modern adapter component with richer functionality - <code>RecyclerView.Adapter</code>.</p><p>Create a regular <code>RecyclerView.Adapter</code> for <code>RecyclerView</code> and <code>ViewPager2</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume that&#39;s your entity class.</span></span>
<span class="line"><span style="color:#F47067;">data</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> iconRes: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> name: </span><span style="color:#F69D50;">String</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// Assume that&#39;s the dataset you need to bind.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> listData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ArrayList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="color:#768390;">// Create and bind to a custom RecyclerView.Adapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> recyclerView.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind the dataset.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindData</span><span style="color:#ADBAC7;"> { listData }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind the custom adapter layout adapter_my_layout.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindItemView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayoutBinding</span><span style="color:#ADBAC7;">&gt; { binding, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.iconView.</span><span style="color:#DCBDFB;">setImageResource</span><span style="color:#ADBAC7;">(entity.iconRes)</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.textView.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> entity.name</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Set click event for each item.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onItemViewClick</span><span style="color:#ADBAC7;"> { itemView, viewType, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Your code here.</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Create a multi-<code>View</code> type <code>RecyclerView.Adapter</code> for <code>RecyclerView</code> and <code>ViewPager2</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume that&#39;s your entity class.</span></span>
<span class="line"><span style="color:#F47067;">data</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> iconRes: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> name: </span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> title: </span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> dataType: </span><span style="color:#F69D50;">Int</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// Assume that&#39;s the dataset you need to bind.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> listData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ArrayList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="color:#768390;">// Create and bind to a custom RecyclerView.Adapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> recyclerView.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind the dataset.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindData</span><span style="color:#ADBAC7;"> { listData }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind View types.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindViewType</span><span style="color:#ADBAC7;"> { entity, position </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> entity.dataType }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind the custom adapter layout adapter_my_layout_1.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindItemView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayout1Binding</span><span style="color:#ADBAC7;">&gt;(viewType </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">) { binding, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.iconView.</span><span style="color:#DCBDFB;">setImageResource</span><span style="color:#ADBAC7;">(entity.iconRes)</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.textView.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> entity.name</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind the custom adapter layout adapter_my_layout_2.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindItemView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayout2Binding</span><span style="color:#ADBAC7;">&gt;(viewType </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">) { binding, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.iconView.</span><span style="color:#DCBDFB;">setImageResource</span><span style="color:#ADBAC7;">(entity.iconRes)</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.titleView.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> entity.title</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Set click event for each item.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onItemViewClick</span><span style="color:#ADBAC7;"> { itemView, viewType, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Your code here.</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>In <code>RecyclerView.Adapter</code>, the <code>position</code> type in <code>onBindItemView</code> is <code>AdapterPosition</code> instead of <code>Int</code> as in <a href="#base-adapter">Base Adapter</a>.</p><p>Since <code>RecyclerView.Adapter</code> can be updated partially, after dynamically adding or removing items, the <code>onBindItemView</code> of existing items will not be called back again. At this time, you need a dynamic index instance like <code>AdapterPosition</code> to get the correct index of the current item through <code>position.value</code>.</p><p><code>AdapterPosition</code> incorporates the <code>getLayoutPosition</code>, <code>getBindingAdapterPosition</code>, <code>getAbsoluteAdapterPosition</code> methods from <code>RecyclerView.ViewHolder</code>, which correspond to <code>position.layout</code>, <code>position.value</code> and <code>position.absolute</code>.</p></div><p>Create header <code>View</code> and footer <code>View</code> for <code>RecyclerView</code>.</p><p>You can use the <code>onBindHeaderView</code> and <code>onBindFooterView</code> methods to add a header <code>View</code> and footer <code>View</code>. These are two special item layouts that are not counted in the bound data, and the index <code>position</code> called back through methods like <code>onBindItemView</code> is not affected.</p><div class="custom-container warning"><p class="custom-container-title">Notice</p><p>You can only add one header <code>View</code> and one footer <code>View</code> at the same time, and these added layouts do not support dynamic removal.</p></div><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume that&#39;s your entity class.</span></span>
<span class="line"><span style="color:#F47067;">data</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> iconRes: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> name: </span><span style="color:#F69D50;">String</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// Assume that&#39;s the dataset you need to bind.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> listData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ArrayList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="color:#768390;">// Create and bind to a custom RecyclerView.Adapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> recyclerView.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind the dataset.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindData</span><span style="color:#ADBAC7;"> { listData }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind header View.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindHeaderView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterHeaderBinding</span><span style="color:#ADBAC7;">&gt; { binding </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.someText.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Header&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind footer View.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindFooterView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterFooterBinding</span><span style="color:#ADBAC7;">&gt; { binding </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.someText.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Footer&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind the custom adapter layout adapter_my_layout.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindItemView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayoutBinding</span><span style="color:#ADBAC7;">&gt; { binding, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.iconView.</span><span style="color:#DCBDFB;">setImageResource</span><span style="color:#ADBAC7;">(entity.iconRes)</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.textView.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> entity.name</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition to using <code>ViewBinding</code> as shown in the above example, you can also use traditional layout resource IDs to bind them to adapter layouts.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Bind the custom adapter layout adapter_my_layout.xml</span></span>
<span class="line"><span style="color:#DCBDFB;">onBindItemView</span><span style="color:#ADBAC7;">(R.layout.adapter_my_layout) { itemView, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    itemView.</span><span style="color:#DCBDFB;">findViewById</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">ImageView</span><span style="color:#ADBAC7;">&gt;(R.id.icon_view).</span><span style="color:#DCBDFB;">setImageResource</span><span style="color:#ADBAC7;">(entity.iconRes)</span></span>
<span class="line"><span style="color:#ADBAC7;">    itemView.</span><span style="color:#DCBDFB;">findViewById</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">TextView</span><span style="color:#ADBAC7;">&gt;(R.id.text_view).text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> entity.name</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If all layout loading methods do not meet your needs, you can also create a custom <code>ViewHolder</code> delegate class based on <code>ViewHolderDelegate</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Create a delegate class to implement your own layout loading scheme.</span></span>
<span class="line"><span style="color:#768390;">// Here we assume that MyLayoutBinder is your layout loader.</span></span>
<span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MyViewHolderDelegate</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">@LayoutRes</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> resId: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">) : </span><span style="color:#F69D50;">ViewHolderDelegate</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyLayoutBinder</span><span style="color:#ADBAC7;">&gt;() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">create</span><span style="color:#ADBAC7;">(context: </span><span style="color:#F69D50;">Context</span><span style="color:#ADBAC7;">, parent: </span><span style="color:#F69D50;">ViewGroup</span><span style="color:#ADBAC7;">?): </span><span style="color:#F69D50;">MyLayoutBinder</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Assume this is how your custom layout loader works.</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Remember to pass in and implement the parent parameter,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// because we need the parent&#39;s LayoutParams.</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Note: Don&#39;t bind to parent now! The adapter does not allow</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// child layouts to hold parent layouts in advance.</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> binder </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> MyLayoutBinder.</span><span style="color:#DCBDFB;">inflate</span><span style="color:#ADBAC7;">(context, resId, parent, attachToParent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> binder</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getView</span><span style="color:#ADBAC7;">(instance: </span><span style="color:#F69D50;">MyLayoutBinder</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">View</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Get the required View from your layout loader.</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> instance.root</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, use your custom <code>ViewHolderDelegate</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Bind your custom ViewHolderDelegate.</span></span>
<span class="line"><span style="color:#DCBDFB;">onBindItemView</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">MyViewHolderDelegate</span><span style="color:#ADBAC7;">(R.layout.adapter_my_layout)) { delegate, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Here delegate is the MyLayoutBinder object,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// assuming the following methods are all implemented by yourself.</span></span>
<span class="line"><span style="color:#ADBAC7;">    delegate.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">ImageView</span><span style="color:#ADBAC7;">&gt;(R.id.icon_view).</span><span style="color:#DCBDFB;">setImageResource</span><span style="color:#ADBAC7;">(entity.iconRes)</span></span>
<span class="line"><span style="color:#ADBAC7;">    delegate.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">TextView</span><span style="color:#ADBAC7;">&gt;(R.id.text_view).text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> entity.name</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">Notice</p><p>When you set header or footer <code>View</code>, when using <code>RecyclerView.Adapter</code>&#39;s <code>notifyItemInserted</code>, <code>notifyItemRemoved</code>, <code>notifyItemChanged</code>, <code>notifyItemMoved</code> and other methods, there will be issues with index positions, because by default the <code>position</code> calculated by <code>onBindItemView</code> will not include header and footer layouts, and methods like <code>RecyclerView.scrollToPosition</code>, <code>RecyclerView.smoothScrollToPosition</code> will also be affected.</p><p>Since these methods are all <code>final</code> in <code>RecyclerView.Adapter</code> and cannot be overridden, in this case, <code>BetterAndroid</code> provides you with a solution. When using <code>RecyclerView.Adapter</code>, you can call the <code>wrapper</code> method to get a wrapper instance, which will automatically handle these issues for you.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume you have bound the adapter created using RecyclerAdapterBuilder to RecyclerView.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> recyclerView: </span><span style="color:#F69D50;">RecyclerView</span></span>
<span class="line"><span style="color:#768390;">// Get the wrapper instance. If the target adapter is not</span></span>
<span class="line"><span style="color:#768390;">// created by RecyclerAdapterBuilder, it will return null.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> wrapper </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> recyclerView.adapter?.wrapper</span></span>
<span class="line"><span style="color:#768390;">// Normally use RecyclerView.Adapter&#39;s notification update methods.</span></span>
<span class="line"><span style="color:#ADBAC7;">wrapper?.</span><span style="color:#DCBDFB;">notifyItemInserted</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">wrapper?.</span><span style="color:#DCBDFB;">notifyItemRemoved</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// Header or footer layouts need to be updated separately using the following methods.</span></span>
<span class="line"><span style="color:#ADBAC7;">wrapper?.</span><span style="color:#DCBDFB;">notifyHeaderItemChanged</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">wrapper?.</span><span style="color:#DCBDFB;">notifyFooterItemChanged</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// Furthermore, you can manually use the following methods to</span></span>
<span class="line"><span style="color:#768390;">// determine whether header and footer layouts exist.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> hasHeaderView </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> wrapper?.hasHeaderView </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> hasFooterView </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> wrapper?.hasFooterView </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Going back to the issue we mentioned earlier, methods like <code>RecyclerView.scrollToPosition</code>, <code>RecyclerView.smoothScrollToPosition</code> will also be affected. In this case, you can use the <code>LinearLayoutManager</code>, <code>GridLayoutManager</code> and <code>RecyclerLayoutManager</code> provided under the <code>com.highcapable.betterandroid.ui.component.adapter.recycler.layoutmanager</code> package to solve this.</p><p>These encapsulated enhanced layout managers will be automatically integrated through the default <code>RecyclerCosmetic</code> (refer to <a href="#recycler-cosmetic">Recycler Cosmetic</a> below). You don&#39;t need any manual operations. When you need to manually create <code>RecyclerView.LayoutManager</code>, we recommend that you inherit from the instances provided in this package.</p><p>When you use the <code>RecyclerView.LayoutManager</code> provided by <code>BetterAndroid</code>, since header or footer layouts will automatically handle <code>position</code>, when using <code>RecyclerView.scrollToPosition</code>, <code>RecyclerView.smoothScrollToPosition</code> to scroll to the top and bottom, you need to use <code>scrollToPosition(-1)</code> (top) or <code>scrollToPosition(lastIndex + 1)</code> (bottom).</p><p>Therefore, we always recommend that when you have the need to scroll to the top and bottom, use the <code>scrollToFirstPosition</code>, <code>scrollToLastPosition</code>, <code>smoothScrollToFirstPosition</code>, <code>smoothScrollToLastPosition</code> methods instead. They will automatically handle such issues (regardless of whether you use the <code>RecyclerView.LayoutManager</code> provided by <code>BetterAndroid</code>).</p></div><h3 id="fragment-adapter" tabindex="-1"><a class="header-anchor" href="#fragment-adapter" aria-hidden="true">#</a> Fragment Adapter</h3><p>Create a <code>FragmentPagerAdapter</code> for <code>ViewPager</code>.</p><div class="custom-container warning"><p class="custom-container-title">Notice</p><p>This usage has been deprecated by the official team. If possible, please start using <code>ViewPager2</code>.</p></div><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume that&#39;s your current FragmentActivity.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> activity: </span><span style="color:#F69D50;">FragmentActivity</span></span>
<span class="line"><span style="color:#768390;">// Create and bind to a custom FragmentPagerAdapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> viewPager.</span><span style="color:#DCBDFB;">bindFragments</span><span style="color:#ADBAC7;">(activity) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Set the number of Fragments to display.</span></span>
<span class="line"><span style="color:#ADBAC7;">    pageCount </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">5</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind each Fragment.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindFragments</span><span style="color:#ADBAC7;"> { position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">when</span><span style="color:#ADBAC7;"> (position) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FirstFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">SecondFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ThirdFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FourthFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FifthFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Same as the constructor method usage of <code>FragmentPagerAdapter</code>, you can also customize the <code>behavior</code> parameter.</p><p>If you are using it in a <code>Fragment</code>, you can fill in the current <code>Fragment</code> instance in the first parameter of <code>bindFragments</code>, and it will automatically bind to <code>getChildFragmentManager()</code>.</p><p>If you want to manually create a <code>FragmentPagerAdapter</code> and bind it to <code>ViewPager</code>, please refer to the following example.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume that&#39;s your current FragmentActivity.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> activity: </span><span style="color:#F69D50;">FragmentActivity</span></span>
<span class="line"><span style="color:#768390;">// Manually create a FragmentPagerAdapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FragmentPagerAdapter</span><span style="color:#ADBAC7;">(activity) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// The content is the same as above.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// Then bind to viewPager.</span></span>
<span class="line"><span style="color:#ADBAC7;">viewPager.adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> adapter</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Create a <code>FragmentStateAdapter</code> for <code>ViewPager2</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume that&#39;s your current FragmentActivity.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> activity: </span><span style="color:#F69D50;">FragmentActivity</span></span>
<span class="line"><span style="color:#768390;">// Create and bind to a custom FragmentPagerAdapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> viewPager2.</span><span style="color:#DCBDFB;">bindFragments</span><span style="color:#ADBAC7;">(activity) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Set the number of Fragments to display.</span></span>
<span class="line"><span style="color:#ADBAC7;">    pageCount </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">5</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Bind each Fragment.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindFragments</span><span style="color:#ADBAC7;"> { position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">when</span><span style="color:#ADBAC7;"> (position) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FirstFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">SecondFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ThirdFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FourthFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FifthFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you are using it in a <code>Fragment</code>, you can fill in the current <code>Fragment</code> instance in the first parameter of <code>bindFragments</code>, and it will automatically bind to <code>getChildFragmentManager()</code>.</p><p>If you want to manually create a <code>FragmentPagerAdapter</code> and bind it to <code>ViewPager2</code>, please refer to the following example.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume that&#39;s your current FragmentActivity.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> activity: </span><span style="color:#F69D50;">FragmentActivity</span></span>
<span class="line"><span style="color:#768390;">// Manually create a FragmentStateAdapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FragmentStateAdapter</span><span style="color:#ADBAC7;">(activity) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// The content is the same as above.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// Then bind to viewPager2.</span></span>
<span class="line"><span style="color:#ADBAC7;">viewPager2.adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> adapter</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="recycler-cosmetic" tabindex="-1"><a class="header-anchor" href="#recycler-cosmetic" aria-hidden="true">#</a> Recycler Cosmetic</h3><p>If you want to manually create a <code>RecyclerView.Adapter</code> and bind it to <code>RecyclerView</code> and <code>ViewPager2</code>, please refer to the following example.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume that&#39;s your current Context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// Manually create a RecyclerView.Adapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">RecyclerAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">CustomBean</span><span style="color:#ADBAC7;">&gt;(context) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// The content is the same as above.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// Manually create a decorator.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> cosmetic </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> RecyclerCosmetic.</span><span style="color:#DCBDFB;">fromLinearVertical</span><span style="color:#ADBAC7;">(context)</span></span>
<span class="line"><span style="color:#768390;">// Then bind to recyclerView.</span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.layoutManager </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cosmetic.layoutManager</span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.</span><span style="color:#DCBDFB;">addItemDecoration</span><span style="color:#ADBAC7;">(cosmetic.itemDecoration) </span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> adapter</span></span>
<span class="line"><span style="color:#768390;">// When binding to viewPager2, you don&#39;t need to set layoutManager.</span></span>
<span class="line"><span style="color:#ADBAC7;">viewPager2.</span><span style="color:#DCBDFB;">addItemDecoration</span><span style="color:#ADBAC7;">(cosmetic.itemDecoration) </span></span>
<span class="line"><span style="color:#ADBAC7;">viewPager2.adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> adapter</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>BetterAndroid</code> provides developers with several common adapter layout types for <code>RecyclerView</code> for your use.</p><p>You can specify a <code>RecyclerCosmetic</code> in the method parameters, which defaults to a linear vertical list cosmetic.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Create a linear vertical list with row spacing of 10dp.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> lvCosmetic </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> RecyclerCosmetic.</span><span style="color:#DCBDFB;">fromLinearVertical</span><span style="color:#ADBAC7;">(context, </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toPx</span><span style="color:#ADBAC7;">(context))</span></span>
<span class="line"><span style="color:#768390;">// Create a grid vertical list with column spacing of 10dp and row spacing of 10dp.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> gvCosmetic </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> RecyclerCosmetic.</span><span style="color:#DCBDFB;">fromGridVertical</span><span style="color:#ADBAC7;">(context, </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toPx</span><span style="color:#ADBAC7;">(context), </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toPx</span><span style="color:#ADBAC7;">(context))</span></span>
<span class="line"><span style="color:#768390;">// Taking lvCosmetic as an example.</span></span>
<span class="line"><span style="color:#768390;">// Use bindAdapter to bind to recyclerView.</span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;(lvCosmetic) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// ...</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// Or, manually bind.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">RecyclerAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;(context) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// ...</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.layoutManager </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> lvCosmetic.layoutManager</span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.</span><span style="color:#DCBDFB;">addItemDecoration</span><span style="color:#ADBAC7;">(lvCosmetic.itemDecoration)</span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> adapter</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>If you only need an <code>ItemDecoration</code>, you can create one through the preset <code>LinearHorizontalItemDecoration</code>, <code>LinearVerticalItemDecoration</code>, <code>GridVerticalItemDecoration</code>.</p><p>Here&#39;s a simple example.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Create a linear vertical ItemDecoration with row spacing of 10dp.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> itemDecoration </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">LinearVerticalItemDecoration</span><span style="color:#ADBAC7;">(rowSpacing </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toPx</span><span style="color:#ADBAC7;">(context))</span></span>
<span class="line"><span style="color:#768390;">// Set to recyclerView.</span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.</span><span style="color:#DCBDFB;">addItemDecoration</span><span style="color:#ADBAC7;">(itemDecoration)</span></span>
<span class="line"><span style="color:#768390;">// If you need to update ItemDecoration parameters, you can use the update method.</span></span>
<span class="line"><span style="color:#ADBAC7;">itemDecoration.</span><span style="color:#DCBDFB;">update</span><span style="color:#ADBAC7;">(rowSpacing </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toPx</span><span style="color:#ADBAC7;">(context))</span></span>
<span class="line"><span style="color:#768390;">// Then notify recyclerView to update.</span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.</span><span style="color:#DCBDFB;">invalidateItemDecorations</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="adapter-extensions" tabindex="-1"><a class="header-anchor" href="#adapter-extensions" aria-hidden="true">#</a> Adapter Extensions</h3>`,80),U={class:"custom-container tip"},J=s("p",{class:"custom-container-title"},"Contents of This Section",-1),O={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.factory/notify-all-items-inserted",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.factory/notify-all-items-changed",target:"_blank",rel:"noopener noreferrer"},X={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.factory/clear-and-notify",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.factory/notify-data-set-changed-ignore",target:"_blank",rel:"noopener noreferrer"},$=s("p",null,[n("Extensions for "),s("code",null,"RecyclerView"),n(" adapter.")],-1),ss=l(`<p>The adapter extensions introduced in this section are mostly extensions of <code>RecyclerView.Adapter</code>.</p><p>Usually, we need to use methods like <code>notifyItemInserted</code>, <code>notifyItemChanged</code>, etc. to notify the adapter that the data has changed.</p><p>When we add data to the dataset all at once, we usually need to use <code>notifyItemRangeInserted</code> to notify the adapter that the data has changed.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your RecyclerView.Adapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter: </span><span style="color:#F69D50;">RecyclerView</span><span style="color:#ADBAC7;">.Adapter</span><span style="color:#F47067;">&lt;*&gt;</span></span>
<span class="line"><span style="color:#768390;">// Assume this is your dataset, initially empty.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> dataSet: </span><span style="color:#F69D50;">MutableList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#768390;">// Add some data to the dataset.</span></span>
<span class="line"><span style="color:#ADBAC7;">dataSet.</span><span style="color:#DCBDFB;">addAll</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">..</span><span style="color:#ADBAC7;">.)</span></span>
<span class="line"><span style="color:#768390;">// Notify the adapter that the data has changed.</span></span>
<span class="line"><span style="color:#ADBAC7;">adapter.</span><span style="color:#DCBDFB;">notifyItemRangeInserted</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, dataSet.size)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the data is confirmed to be added from 0, <code>BetterAndroid</code> provides you with a simpler way to complete this. Now you can use the following method to notify the adapter that the data has changed.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your RecyclerView.Adapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter: </span><span style="color:#F69D50;">RecyclerView</span><span style="color:#ADBAC7;">.Adapter</span><span style="color:#F47067;">&lt;*&gt;</span></span>
<span class="line"><span style="color:#768390;">// Assume this is your dataset, initially empty.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> dataSet: </span><span style="color:#F69D50;">MutableList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#768390;">// Add some data to the dataset.</span></span>
<span class="line"><span style="color:#ADBAC7;">dataSet.</span><span style="color:#DCBDFB;">addAll</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">..</span><span style="color:#ADBAC7;">.)</span></span>
<span class="line"><span style="color:#768390;">// Notify the adapter that the data has changed.</span></span>
<span class="line"><span style="color:#ADBAC7;">adapter.</span><span style="color:#DCBDFB;">notifyAllItemsInserted</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above method will use <code>adapter.itemCount</code> by default to get the size of the dataset, no need to manually specify the range to be updated.</p><p>At this time, please ensure that your adapter returns the correct <code>itemCount</code>, otherwise, please manually pass in <code>dataSet</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Notify the adapter that the data has changed.</span></span>
<span class="line"><span style="color:#ADBAC7;">adapter.</span><span style="color:#DCBDFB;">notifyAllItemsInserted</span><span style="color:#ADBAC7;">(dataSet)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Similarly, when the data is confirmed to have all changed (for example, in a multi-select state list, updating the selected and unselected checkbox states), you can use the following method to notify the adapter that the data has changed.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your RecyclerView.Adapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter: </span><span style="color:#F69D50;">RecyclerView</span><span style="color:#ADBAC7;">.Adapter</span><span style="color:#F47067;">&lt;*&gt;</span></span>
<span class="line"><span style="color:#768390;">// Assume this is your dataset.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> dataSet: </span><span style="color:#F69D50;">MutableList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#768390;">// Simulate operating the dataset (e.g., select all action).</span></span>
<span class="line"><span style="color:#ADBAC7;">dataSet.</span><span style="color:#DCBDFB;">forEach</span><span style="color:#ADBAC7;"> { it.isSelected </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;">// Notify the adapter that the data has changed.</span></span>
<span class="line"><span style="color:#ADBAC7;">adapter.</span><span style="color:#DCBDFB;">notifyAllItemsChanged</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Similarly, please ensure that your adapter returns the correct <code>itemCount</code>, otherwise, please manually pass in <code>dataSet</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Notify the adapter that the data has changed.</span></span>
<span class="line"><span style="color:#ADBAC7;">adapter.</span><span style="color:#DCBDFB;">notifyAllItemsChanged</span><span style="color:#ADBAC7;">(dataSet)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>When we need to clear the dataset and notify the adapter that the data has changed, we usually need to use <code>notifyItemRangeRemoved</code> to notify the adapter that the data has changed.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your RecyclerView.Adapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter: </span><span style="color:#F69D50;">RecyclerView</span><span style="color:#ADBAC7;">.Adapter</span><span style="color:#F47067;">&lt;*&gt;</span></span>
<span class="line"><span style="color:#768390;">// Assume this is your dataset.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> dataSet: </span><span style="color:#F69D50;">MutableList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#768390;">// Save the current data size.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> count </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> dataSet.size</span></span>
<span class="line"><span style="color:#768390;">// Clear the dataset.</span></span>
<span class="line"><span style="color:#ADBAC7;">dataSet.</span><span style="color:#DCBDFB;">clear</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// Notify the adapter that the data has changed.</span></span>
<span class="line"><span style="color:#ADBAC7;">adapter.</span><span style="color:#DCBDFB;">notifyItemRangeRemoved</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, count)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This process is still cumbersome, <code>BetterAndroid</code> provides a simpler way for this. Now you can use the following method to clear the dataset and notify the adapter that the data has changed. This method will automatically calculate the size of the dataset.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your RecyclerView.Adapter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter: </span><span style="color:#F69D50;">RecyclerView</span><span style="color:#ADBAC7;">.Adapter</span><span style="color:#F47067;">&lt;*&gt;</span></span>
<span class="line"><span style="color:#768390;">// Assume this is your dataset.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> dataSet: </span><span style="color:#F69D50;">MutableList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#768390;">// Clear the dataset and notify the adapter that the data has changed.</span></span>
<span class="line"><span style="color:#ADBAC7;">adapter.</span><span style="color:#DCBDFB;">clearAndNotify</span><span style="color:#ADBAC7;">(dataSet)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>There are also some other extensions that can be used. <code>notifyDataSetChangedIgnore</code> will ignore the Lint warnings given during coding and directly provide you with the use of <code>notifyDataSetChanged</code>.</p><p>However, this method is still not recommended because it will cause the entire list to refresh, which will cause performance issues in large datasets.</p></div>`,25);function ns(es,as){const e=t("ExternalLinkIcon");return p(),i("div",null,[r,s("p",null,[n("You can view the KDoc "),s("a",d,[n("click here"),a(e)]),n(".")]),s("div",y,[A,s("p",null,[s("a",u,[n("BaseAdapterBuilder"),a(e)])]),m,s("p",null,[s("a",v,[n("PagerAdapterBuilder"),a(e)])]),D,s("p",null,[s("a",B,[n("RecyclerAdapterBuilder"),a(e)])]),b,s("p",null,[s("a",h,[n("PagerMediator"),a(e)])]),C,s("p",null,[s("a",g,[n("RecyclerCosmetic"),a(e)])]),F,s("p",null,[s("a",w,[n("LinearHorizontalItemDecoration"),a(e)])]),f,s("p",null,[s("a",k,[n("LinearVerticalItemDecoration"),a(e)])]),x,s("p",null,[s("a",V,[n("GridVerticalItemDecoration"),a(e)])]),_,s("p",null,[s("a",R,[n("LinearLayoutManager"),a(e)])]),I,s("p",null,[s("a",P,[n("GridLayoutManager"),a(e)])]),T,s("p",null,[s("a",M,[n("RecyclerLayoutManager"),a(e)])]),q,s("p",null,[s("a",L,[n("RecyclerAdapterWrapper"),a(e)])]),S,s("p",null,[s("a",E,[n("RecyclerView, RecyclerAdapter"),a(e)])]),H,s("p",null,[s("a",K,[n("CommonAdapter"),a(e)])]),N,s("p",null,[s("a",Y,[n("ViewHolderDelegate"),a(e)])]),W,s("p",null,[s("a",z,[n("AdapterPosition"),a(e)])]),G]),j,s("div",U,[J,s("p",null,[s("a",O,[n("RecyclerAdapter → notifyAllItemsInserted"),a(e)])]),s("p",null,[s("a",Q,[n("RecyclerAdapter → notifyAllItemsChanged"),a(e)])]),s("p",null,[s("a",X,[n("RecyclerAdapter → clearAndNotify"),a(e)])]),s("p",null,[s("a",Z,[n("RecyclerAdapter → notifyDataSetChangedIgnore"),a(e)])]),$]),ss])}const os=o(c,[["render",ns],["__file","ui-component-adapter.html.vue"]]);export{os as default};
