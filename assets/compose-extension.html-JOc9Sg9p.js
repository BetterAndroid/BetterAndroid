import{_ as i,r as l,o as t,c,a as s,b as n,d as e,w as r,e as a}from"./app-ewiN1Yda.js";const d={},u=a(`<h1 id="compose-extension" tabindex="-1"><a class="header-anchor" href="#compose-extension" aria-hidden="true">#</a> compose-extension</h1><p><img src="https://img.shields.io/maven-central/v/com.highcapable.betterandroid/compose-extension?logo=apachemaven&amp;logoColor=orange&amp;style=flat-square" alt="Maven Central"><span style="margin-left:5px;"></span><img src="https://img.shields.io/maven-metadata/v?metadataUrl=https%3A%2F%2Fraw.githubusercontent.com%2FHighCapable%2Fmaven-repository%2Frefs%2Fheads%2Fmain%2Frepository%2Freleases%2Fcom%2Fhighcapable%2Fbetterandroid%2Fcompose-extension%2Fmaven-metadata.xml&amp;logo=apachemaven&amp;logoColor=orange&amp;label=highcapable-maven-releases&amp;style=flat-square" alt="Maven metadata URL"><span style="margin-left:5px;"></span><img src="https://img.shields.io/badge/Min SDK-21-orange?logo=android&amp;style=flat-square" alt="Android Min SDK"></p><p>This is a dependency for Jetpack Compose related functional extensions and supports multi-platform.</p><p>Currently supported platforms: Android, iOS, Desktop (JVM).</p><h2 id="configure-dependency" tabindex="-1"><a class="header-anchor" href="#configure-dependency" aria-hidden="true">#</a> Configure Dependency</h2><p>You can add this module to your project using the following method.</p><p>This is a Kotlin Multiplatform dependency, you need the <code>org.jetbrains.kotlin.multiplatform</code> plugin to apply the relevant dependencies.</p><h3 id="sweetdependency-recommended" tabindex="-1"><a class="header-anchor" href="#sweetdependency-recommended" aria-hidden="true">#</a> SweetDependency (Recommended)</h3><p>Add dependencies to your project&#39;s <code>SweetDependency</code> configuration file.</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#8DDB8C;">libraries</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#8DDB8C;">com.highcapable.betterandroid</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># commonMain</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-extension</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">+</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># androidMain</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-extension-android</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-extension</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># iosArm64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-extension-iosarm64</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-extension</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># iosX64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-extension-iosx64</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-extension</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># iosSimulatorArm64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-extension-iossimulatorarm64</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-extension</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># desktopMain</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-extension-desktop</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-extension</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Configure dependencies in your project&#39;s <code>build.gradle.kts</code>.</p><p>If you use multi-platform dependencies in a regular project, you only need to deploy the corresponding platform suffix dependencies as needed.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.extension.android)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.extension.iosarm64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.extension.iosx64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.extension.iossimulatorarm64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.extension.desktop)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you use multi-platform dependencies in a multi-platform project, you need to add the <code>compose-extension</code> dependency in <code>commonMain</code>.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">kotlin</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">sourceSets</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> commonMain </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getting</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">dependencies</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.extension)</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="version-catalog" tabindex="-1"><a class="header-anchor" href="#version-catalog" aria-hidden="true">#</a> Version Catalog</h3><p>Add dependency in your project&#39;s <code>gradle/libs.versions.toml</code>.</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">[</span><span style="color:#F69D50;">versions</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-extension = </span><span style="color:#96D0FF;">&quot;&lt;version&gt;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">[</span><span style="color:#F69D50;">libraries</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#768390;"># commonMain</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-extension = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-extension&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># androidMain</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-extension-android = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-android&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-extension&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># iosArm64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-extension-iosarm64 = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-iosarm64&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-extension&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># iosX64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-extension-iosx64 = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-iosx64&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-extension&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># iosSimulatorArm64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-extension-iossimulatorarm64 = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-iossimulatorarm64&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-extension&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># desktopMain</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-extension-desktop = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-desktop&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-extension&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Configure dependencies in your project&#39;s <code>build.gradle.kts</code>.</p><p>If you use multi-platform dependencies in a regular project, you only need to deploy the corresponding platform suffix dependencies as needed.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.extension.android)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.extension.iosarm64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.extension.iosx64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.extension.iossimulatorarm64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.extension.desktop)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you use multi-platform dependencies in a multi-platform project, you need to add the <code>compose-extension</code> dependency in <code>commonMain</code>.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">kotlin</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">sourceSets</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> commonMain </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getting</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">dependencies</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.extension)</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Please change <code>&lt;version&gt;</code> to the version displayed at the top of this document.</p><h3 id="traditional-method" tabindex="-1"><a class="header-anchor" href="#traditional-method" aria-hidden="true">#</a> Traditional Method</h3><p>Configure dependencies in your project&#39;s <code>build.gradle.kts</code>.</p><p>If you use multi-platform dependencies in a regular project, you only need to deploy the corresponding platform suffix dependencies as needed.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-android:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-iosarm64:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-iosx64:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-iossimulatorarm64:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-desktop:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you use multi-platform dependencies in a multi-platform project, you need to add the <code>compose-extension</code> dependency in <code>commonMain</code>.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">kotlin</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">sourceSets</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> commonMain </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getting</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">dependencies</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Please change <code>&lt;version&gt;</code> to the version displayed at the top of this document.</p><h2 id="function-introduction" tabindex="-1"><a class="header-anchor" href="#function-introduction" aria-hidden="true">#</a> Function Introduction</h2>`,32),m={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension",target:"_blank",rel:"noopener noreferrer"},y=s("h3",{id:"color-extension",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#color-extension","aria-hidden":"true"},"#"),n(" Color Extension")],-1),A={class:"custom-container tip"},v=s("p",{class:"custom-container-title"},"Contents of This Section",-1),b=s("blockquote",null,[s("p",null,"commonMain")],-1),h={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/is-bright-color",target:"_blank",rel:"noopener noreferrer"},B={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/to-hex-color",target:"_blank",rel:"noopener noreferrer"},D={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/mix-color-of",target:"_blank",rel:"noopener noreferrer"},C={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/or-null",target:"_blank",rel:"noopener noreferrer"},g={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/to-compose-color",target:"_blank",rel:"noopener noreferrer"},F=s("blockquote",null,[s("p",null,"desktopMain")],-1),f={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/%5Bdesktop%5Dto-platform-color",target:"_blank",rel:"noopener noreferrer"},x=s("blockquote",null,[s("p",null,"iosMain")],-1),k={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/%5Bios%5Dto-platform-color",target:"_blank",rel:"noopener noreferrer"},_=s("p",null,[n("Extensions for "),s("code",null,"Color"),n(".")],-1),w=s("p",null,[s("code",null,"Color"),n(" in Jetpack Compose encapsulates color-related implementations, which solves the problem of using the "),s("code",null,"Integer"),n(" type to pass colors in native Android.")],-1),q=s("code",null,"BetterAndroid",-1),P=s("code",null,"Color",-1),S=a(`<p>Since <code>Color</code> provides the <code>alpha</code> property, the <code>toAlphaColor</code> extension provided natively is no longer needed in <code>Color</code>.</p><p>Here are some relevant example uses of color extensions.</p><p>Determine how bright the color is.</p><p>This is useful when you need to decide whether to use dark text based on how bright the color is.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume we have the following colors.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White</span></span>
<span class="line"><span style="color:#768390;">// To determine how bright it is, you just need to use the following method.</span></span>
<span class="line"><span style="color:#768390;">// You will definitely get a true because this is a white color.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> isBright </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> color.isBrightColor</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Convert color to HEX string.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume we have the following colors.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White</span></span>
<span class="line"><span style="color:#768390;">// To convert it to a HEX string you just need to use the following method.</span></span>
<span class="line"><span style="color:#768390;">// You will get a &quot;#FFFFFFFF&quot; with transparency.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> hexString </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> color.</span><span style="color:#DCBDFB;">toHexColor</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mix two colors.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume we have the following colors.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> color1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> color2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.Black</span></span>
<span class="line"><span style="color:#768390;">// You can mix them very easily using.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> mixColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">mixColorOf</span><span style="color:#ADBAC7;">(color1, color2)</span></span>
<span class="line"><span style="color:#768390;">// You can also set the mixing ratio, the default is 0.5f.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> mixColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">mixColorOf</span><span style="color:#ADBAC7;">(color1, color2, </span><span style="color:#6CB6FF;">0.2f</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Determine whether <code>Color</code> is unspecified.</p><p>When <code>Color</code> is <code>Color.Unspecified</code>, you can use the following method to get an object that can be <code>null</code> in this state.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume we have the following colors.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.Unspecified</span></span>
<span class="line"><span style="color:#768390;">// null will be returned in this state, then you can use ?: to pass the default value in undefined cases.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> myColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> color.</span><span style="color:#DCBDFB;">orNull</span><span style="color:#ADBAC7;">() ?: Color.White</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On non-Android platforms, you can convert the corresponding <code>Color</code> object to the platform&#39;s color object in the following way.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume we have the following colors.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White</span></span>
<span class="line"><span style="color:#768390;">// For example, you can convert it to a color object in JavaFX.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> awtColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> color.</span><span style="color:#DCBDFB;">toPlatformColor</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// In iOS, you can convert it to a UIColor object.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> uiColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> color.</span><span style="color:#DCBDFB;">toPlatformColor</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>In Android platform, you can use the <code>Color.toArgb()</code> method to convert a <code>Color</code> object to an <code>Integer</code> type.</p></div><p>Likewise, you can convert the platform&#39;s color objects into Compose&#39;s <code>Color</code> objects in the following way.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is a color object in JavaFX.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> awtColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.WHITE</span></span>
<span class="line"><span style="color:#768390;">// Assume this is a color object in iOS.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> uiColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> UIColor.</span><span style="color:#DCBDFB;">whiteColor</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// Convert it to a Compose Color object.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> composeColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> awtColor.</span><span style="color:#DCBDFB;">toComposeColor</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> composeColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> uiColor.</span><span style="color:#DCBDFB;">toComposeColor</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>In Android platform, you can use a form like <code>Color(0xFFFFFFFF)</code> to convert an <code>Long</code> type color into a <code>Color</code> object.</p></div><h3 id="border-extension" tabindex="-1"><a class="header-anchor" href="#border-extension" aria-hidden="true">#</a> Border Extension</h3>`,25),M={class:"custom-container tip"},T=s("p",{class:"custom-container-title"},"Contents of This Section",-1),E=s("blockquote",null,[s("p",null,"commonMain")],-1),I={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/border-or-else",target:"_blank",rel:"noopener noreferrer"},K={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/solid-color",target:"_blank",rel:"noopener noreferrer"},j=s("p",null,[n("Extensions for "),s("code",null,"Border"),n(" and "),s("code",null,"BorderStroke"),n(".")],-1),V=s("p",null,[n("You can add a border to a component through the "),s("code",null,"Modifier.border(...)"),n(" method, but when the border size is "),s("code",null,"0.dp"),n(", the border will still exist.")],-1),W={href:"https://stackoverflow.com/questions/72514987/unexpected-border-in-composables-border-shows-even-if-border-width-is-zero",target:"_blank",rel:"noopener noreferrer"},L=a(`<p>So <code>BetterAndroid</code> provides the <code>borderOrElse</code> extension, which will no longer add borders to components when the border size is <code>0.dp</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">Box</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    modifier </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Modifier</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#DCBDFB;">size</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">50</span><span style="color:#ADBAC7;">.dp)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Here, the size of the border is 0.dp, so the component will not have a border.</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#DCBDFB;">borderOrElse</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">.dp, Color.Black, RectangleShape)</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Some content.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Gets the color in <code>brush</code> (<code>SolidColor</code>) from an existing <code>BorderStroke</code> object.</p><p><code>SolidColor</code> is a type of <code>Brush</code>, which can be used to fill color, a border created by <code>BorderStroke(10.dp, Color.White)</code> will not be able to easily obtain the color from <code>brush</code>.</p><p><code>BetterAndroid</code> provides an extension for this, now you can get the color in <code>brush</code> using the following method.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your BorderStroke object.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> border </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">BorderStroke</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.dp, Color.White)</span></span>
<span class="line"><span style="color:#768390;">// When the brush is determined to be SolidColor, you can use the following method to get the color in it.</span></span>
<span class="line"><span style="color:#768390;">// If it cannot be obtained, Color.Unspecified will be returned.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> border.solidColor</span></span>
<span class="line"><span style="color:#768390;">// You can also set its default value when it cannot be obtained.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> border.</span><span style="color:#DCBDFB;">solidColor</span><span style="color:#ADBAC7;">(Color.Black)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="padding-extension" tabindex="-1"><a class="header-anchor" href="#padding-extension" aria-hidden="true">#</a> Padding Extension</h3>`,9),H={class:"custom-container tip"},O=s("p",{class:"custom-container-title"},"Contents of This Section",-1),N=s("blockquote",null,[s("p",null,"commonMain")],-1),Y={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/-component-padding",target:"_blank",rel:"noopener noreferrer"},z=s("p",null,[n("Componentized "),s("code",null,"padding"),n(", inherited from "),s("code",null,"PaddingValues"),n(".")],-1),R=a(`<p><code>PaddingValues</code> is the <code>padding</code> usage provided in Jetpack Compose, which can be set directly to <code>Modifier.padding(...)</code>.</p><p>However, <code>PaddingValues</code> does not provide functions such as <code>copy</code>, once set, it cannot be modified, which is very inconvenient.</p><p>So <code>BetterAndroid</code> inherited from <code>PaddingValues</code> and rewrote <code>ComponentPadding</code> to make it easier to use.</p><p>In terms of usage, <code>ComponentPadding</code> is exactly the same as <code>PaddingValues</code>, and you can also set it directly into <code>Modifier.padding(...)</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Create a ComponentPadding.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> padding </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ComponentPadding</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.dp)</span></span>
<span class="line"><span style="color:#768390;">// Create a 0.dp ComponentPadding of all directions.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> padding </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ComponentPadding.None</span></span>
<span class="line"><span style="color:#768390;">// Set padding for each direction.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> padding </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ComponentPadding</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    start </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;">.dp,</span></span>
<span class="line"><span style="color:#ADBAC7;">    top </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.dp,</span></span>
<span class="line"><span style="color:#ADBAC7;">    bottom </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;">.dp,</span></span>
<span class="line"><span style="color:#ADBAC7;">    end </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">.dp</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// Set horizontal and vertical padding.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> padding </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ComponentPadding</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    horizontal </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.dp,</span></span>
<span class="line"><span style="color:#ADBAC7;">    vertical </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;">.dp</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// Create a new ComponentPadding via copy.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> paddingCopy </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> padding.</span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(top </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;">.dp)</span></span>
<span class="line"><span style="color:#768390;">// Set to component.</span></span>
<span class="line"><span style="color:#DCBDFB;">Box</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">     modifier </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Modifier.</span><span style="color:#DCBDFB;">padding</span><span style="color:#ADBAC7;">(padding)</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Some content.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>BetterAndroid</code> also encapsulates <code>calculateLeftPadding</code> and <code>calculateRightPadding</code> into Composeable methods, you no longer need to use <code>LayoutDirection</code> to calculate <code>padding</code> in the LTR and RTL directions.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F69D50;">@Composable</span></span>
<span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">MyComponent</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Assume this is your ComponentPadding.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> padding: </span><span style="color:#F69D50;">ComponentPadding</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Get left.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> left </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> padding.left</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Get right.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> padding.right</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also convert it to <code>PaddingValues</code> using the following method.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your ComponentPadding.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> padding: </span><span style="color:#F69D50;">ComponentPadding</span></span>
<span class="line"><span style="color:#768390;">// Convert to PaddingValues.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> paddingValues </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> padding.</span><span style="color:#DCBDFB;">toPaddingValues</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="foundation-extension" tabindex="-1"><a class="header-anchor" href="#foundation-extension" aria-hidden="true">#</a> Foundation Extension</h3>`,13),U={class:"custom-container tip"},J=s("p",{class:"custom-container-title"},"Contents of This Section",-1),X=s("blockquote",null,[s("p",null,"commonMain")],-1),G={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/component-state",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/clickable",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/combined-clickable",target:"_blank",rel:"noopener noreferrer"},$={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/toggleable",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/selectable",target:"_blank",rel:"noopener noreferrer"},ns={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/-haptic-feedback",target:"_blank",rel:"noopener noreferrer"},es=s("p",null,"Extensions related to foundation.",-1),os=a(`<p>There is a lack of a &quot;disabled&quot; state in Jetpack Compose components, <code>BetterAndroid</code> provides the following ways to achieve this effect by adjusting the transparency of the component.</p><p>Its actual function is actually a visual enabling or disabling transparency effect, and does not set any state on the component.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">Box</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    modifier </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Modifier</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#DCBDFB;">size</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">50</span><span style="color:#ADBAC7;">.dp)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Set the state of the component through componentState.</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// You can also set disabledAlpha to adjust the transparency of</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// the component in the disabled state.</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#DCBDFB;">componentState</span><span style="color:#ADBAC7;">(enabled </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Some content.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the original <code>clickable</code>, <code>combinedClickable</code>, <code>toggleable</code>, and <code>selectable</code>, you need to manually set the default value for them.</p><p>If you only use these functions in a simple scenario, it will be more cumbersome.</p><p><code>BetterAndroid</code> provides extensions of the same name for the above functions, now you can use these functions more conveniently without having to think about using <code>remember</code> and other methods to set their state.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">Box</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">     modifier </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Modifier</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#DCBDFB;">size</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">50</span><span style="color:#ADBAC7;">.dp)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Set the click event of the component through clickable.</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#DCBDFB;">clickable</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// Handle click event.</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Some content.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">Notice</p><p>You need to change the package name referenced by these functions from <code>androidx.compose.foundation</code> to <code>com.highcapable.betterandroid.compose.extension.ui</code>.</p></div><p>In native Android, to implement haptic feedback, you need to use the <code>View.performHapticFeedback</code> method or pass <code>true</code> in the last bit of a method like <code>setOnLongClickListener</code>.</p><p>In Jetpack Compose, you need to reference <code>LocalHapticFeedback</code> every time and then use the <code>performHapticFeedback</code> method, which seems unfriendly.</p><p><code>BetterAndroid</code> provides the <code>HapticFeedback</code> method for this purpose, you can now use the following methods to implement haptic feedback more simply.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">Box</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    modifier </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Modifier.</span><span style="color:#DCBDFB;">combinedClickable</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        onLongClick </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">HapticFeedback</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// Do something.</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">Text</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Long Click Me&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="imagevector-extension" tabindex="-1"><a class="header-anchor" href="#imagevector-extension" aria-hidden="true">#</a> ImageVector Extension</h3>`,16),as={class:"custom-container tip"},ls=s("p",{class:"custom-container-title"},"Contents of This Section",-1),ps=s("blockquote",null,[s("p",null,"commonMain")],-1),is={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/-image-vector",target:"_blank",rel:"noopener noreferrer"},ts=s("p",null,[n("Extensions for "),s("code",null,"ImageVector"),n(".")],-1),cs=a(`<p>Jetpack Compose natively provides an <code>ImageVector</code> that can create vector images, but you need to use <code>ImageVector.Builder</code> to create it.</p><p>This method does not seem very friendly, so <code>BetterAndroid</code> provides a method of the same name of <code>ImageVector</code> for this purpose.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Create a vector image through ImageVector.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> myVector </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ImageVector</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;my_vector&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    defaultWidth </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">32</span><span style="color:#ADBAC7;">.dp,</span></span>
<span class="line"><span style="color:#ADBAC7;">    defaultHeight </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">32</span><span style="color:#ADBAC7;">.dp,</span></span>
<span class="line"><span style="color:#ADBAC7;">    viewportWidth </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">48f</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    viewportHeight </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">48f</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">path</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        fillAlpha </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1.0f</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        stroke </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">SolidColor</span><span style="color:#ADBAC7;">(Color.White),</span></span>
<span class="line"><span style="color:#ADBAC7;">        strokeAlpha </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1.0f</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        strokeLineWidth </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1.0f</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        strokeLineCap </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> StrokeCap.Round,</span></span>
<span class="line"><span style="color:#ADBAC7;">        strokeLineJoin </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> StrokeJoin.Round,</span></span>
<span class="line"><span style="color:#ADBAC7;">        strokeLineMiter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1.0f</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        pathFillType </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> PathFillType.NonZero</span></span>
<span class="line"><span style="color:#ADBAC7;">    ) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// ...</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// ...</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unit-extension" tabindex="-1"><a class="header-anchor" href="#unit-extension" aria-hidden="true">#</a> Unit Extension</h3>`,5),rs={class:"custom-container tip"},ds=s("p",{class:"custom-container-title"},"Contents of This Section",-1),us=s("blockquote",null,[s("p",null,"commonMain")],-1),ms={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/or-null",target:"_blank",rel:"noopener noreferrer"},ys=s("p",null,[n("Extensions for "),s("code",null,"Unit"),n(".")],-1),As=a(`<p>In all units that can use <code>isSpecified</code> for judgment, Jetpack Compose provides the <code>takeOrElse</code> method, but it is not concise and easy to understand.</p><p>So <code>BetterAndroid</code> provides the <code>orNull</code> method for this, you can use it to get an object that can be <code>null</code> in this state.</p><p>Below is a comparison of using <code>takeOrElse</code> versus <code>orNull</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume we have the following units.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> dp: </span><span style="color:#F69D50;">Dp</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> sp: </span><span style="color:#F69D50;">TextUnit</span></span>
<span class="line"><span style="color:#768390;">// Use takeOrElse.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> dpValue </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> dp.</span><span style="color:#DCBDFB;">takeOrElse</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.dp }</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> spValue </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> sp.</span><span style="color:#DCBDFB;">takeOrElse</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.sp }</span></span>
<span class="line"><span style="color:#768390;">// Use orNull.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> dpValue </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> dp.</span><span style="color:#DCBDFB;">orNull</span><span style="color:#ADBAC7;">() ?: </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.dp</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> spValue </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> sp.</span><span style="color:#DCBDFB;">orNull</span><span style="color:#ADBAC7;">() ?: </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.sp</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You will find that <code>orNull</code> is more concise and easier to understand.</p><h3 id="adaptive-layout" tabindex="-1"><a class="header-anchor" href="#adaptive-layout" aria-hidden="true">#</a> Adaptive Layout</h3>`,7),vs={class:"custom-container tip"},bs=s("p",{class:"custom-container-title"},"Contents of This Section",-1),hs=s("blockquote",null,[s("p",null,"commonMain")],-1),Bs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui.layout/-adaptive-row",target:"_blank",rel:"noopener noreferrer"},Ds={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui.layout/-adaptive-column",target:"_blank",rel:"noopener noreferrer"},Cs=s("p",null,"Extensions for adaptive layout.",-1),gs=a(`<p>Adaptive layout provides a solution to measure each child component and distribute it evenly with the size of the parent layout horizontally or vertically without knowing the size of the child component.</p><p>For example, you can use the following method to arrange two buttons horizontally and evenly distribute their widths based on the size of the parent component.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Create an AdaptiveRow.</span></span>
<span class="line"><span style="color:#DCBDFB;">AdaptiveRow</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    modifier </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Modifier.</span><span style="color:#DCBDFB;">width</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">150</span><span style="color:#ADBAC7;">.dp),</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// You can set the spacing of each component.</span></span>
<span class="line"><span style="color:#ADBAC7;">    spacingBetween </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.dp</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">Button</span><span style="color:#ADBAC7;">(onClick </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> { </span><span style="color:#768390;">/* ... */</span><span style="color:#ADBAC7;"> }) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">Text</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Button 1&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">Button</span><span style="color:#ADBAC7;">(onClick </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> { </span><span style="color:#768390;">/* ... */</span><span style="color:#ADBAC7;"> }) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">Text</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Button 2&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You don&#39;t need to set any width for the <code>Button</code> at this point, they will be automatically measured and evenly distributed.</p><p>Likewise, you can use <code>AdaptiveColumn</code> to arrange components vertically.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Create an AdaptiveColumn.</span></span>
<span class="line"><span style="color:#DCBDFB;">AdaptiveColumn</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    modifier </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Modifier.</span><span style="color:#DCBDFB;">height</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">150</span><span style="color:#ADBAC7;">.dp),</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// You can set the spacing of each component.</span></span>
<span class="line"><span style="color:#ADBAC7;">    spacingBetween </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.dp</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">Button</span><span style="color:#ADBAC7;">(onClick </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> { </span><span style="color:#768390;">/* ... */</span><span style="color:#ADBAC7;"> }) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">Text</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Button 1&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">Button</span><span style="color:#ADBAC7;">(onClick </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> { </span><span style="color:#768390;">/* ... */</span><span style="color:#ADBAC7;"> }) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">Text</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Button 2&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dialog-popup-component-extension" tabindex="-1"><a class="header-anchor" href="#dialog-popup-component-extension" aria-hidden="true">#</a> Dialog, Popup Component Extension</h3>`,9),Fs={class:"custom-container tip"},fs=s("p",{class:"custom-container-title"},"Contents of This Section",-1),xs=s("blockquote",null,[s("p",null,"commonMain")],-1),ks={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui.window/-dialog-properties-wrapper",target:"_blank",rel:"noopener noreferrer"},_s=s("p",null,[n("A wrapper for "),s("code",null,"DialogProperties"),n(" in the Android platform.")],-1),ws={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui.window/-dialog-properties-wrapper/-android-properties",target:"_blank",rel:"noopener noreferrer"},qs=s("p",null,[n("Limited properties for Android platform in "),s("code",null,"DialogProperties"),n(".")],-1),Ps={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui.window/-secure-flag-policy-wrapper",target:"_blank",rel:"noopener noreferrer"},Ss=s("p",null,[n("A wrapper for "),s("code",null,"SecureFlagPolicy"),n(" in the Android platform.")],-1),Ms={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui.window/-dialog",target:"_blank",rel:"noopener noreferrer"},Ts=s("p",null,[n("Extensions for "),s("code",null,"Dialog"),n(".")],-1),Es={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui.window/-popup",target:"_blank",rel:"noopener noreferrer"},Is=s("p",null,[n("Extensions for "),s("code",null,"Popup"),n(".")],-1),Ks=a(`<p>The extensions described in this section are available for use in Kotlin Multiplatform.</p><p>When creating <code>Dialog</code> and <code>Popup</code>, <code>commonMain</code> does not handle the special functions in the Android platform well.</p><p><code>BetterAndroid</code> provides functions related to the Android platform for this purpose, you can use them directly in <code>commonMain</code> without having to adapt them separately for Android.</p><p><code>DialogPropertiesWrapper</code> mirrors all properties from <code>DialogProperties</code> and encapsulates Android platform-specific properties into <code>DialogPropertiesWrapper.AndroidProperties</code>.</p><p>In the <code>Dialog</code> method provided by <code>BetterAndroid</code>, you can directly pass in the <code>DialogPropertiesWrapper</code> object.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Create a dialog.</span></span>
<span class="line"><span style="color:#DCBDFB;">Dialog</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    onDismissRequest </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// Handle related events.</span></span>
<span class="line"><span style="color:#ADBAC7;">    },</span></span>
<span class="line"><span style="color:#ADBAC7;">    properties </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">DialogPropertiesWrapper</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        dismissOnBackPress </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        dismissOnClickOutside </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        usePlatformDefaultWidth </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        usePlatformInsets </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        scrimColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.Black.</span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(alpha </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.6f</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Set special properties for the Android platform.</span></span>
<span class="line"><span style="color:#ADBAC7;">        androidProperties </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> DialogPropertiesWrapper.</span><span style="color:#DCBDFB;">AndroidProperties</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">            secureFlagPolicy </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SecureFlagPolicyWrapper.Inherit,</span></span>
<span class="line"><span style="color:#ADBAC7;">            decorFitsSystemWindows </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Some content.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">Notice</p><p>Currently, only <code>alpha</code> in <code>scrimColor</code> in <code>DialogPropertiesWrapper</code> can take effect on the Android platform.</p></div><p>For <code>Popup</code>, the <code>onPreviewKeyEvent</code> and <code>onKeyEvent</code> parameters do not exist on the Android platform, which will causes <code>commonMain</code> to fail to compile when distributed to Android.</p><p>To fix this problem, <code>BetterAndroid</code> simulates <code>onPreviewKeyEvent</code> and <code>onKeyEvent</code> for the Android platform, now you don&#39;t need to worry about compatibility issues.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Create a popup.</span></span>
<span class="line"><span style="color:#DCBDFB;">Popup</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    onDismissRequest </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// Handle related events.</span></span>
<span class="line"><span style="color:#ADBAC7;">    },</span></span>
<span class="line"><span style="color:#ADBAC7;">    properties </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">PopupProperties</span><span style="color:#ADBAC7;">(),</span></span>
<span class="line"><span style="color:#ADBAC7;">    onPreviewKeyEvent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// Handle related events.</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#6CB6FF;">false</span></span>
<span class="line"><span style="color:#ADBAC7;">    },</span></span>
<span class="line"><span style="color:#ADBAC7;">    onKeyEvent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#768390;">// Handle related events.</span></span>
<span class="line"><span style="color:#ADBAC7;">       </span><span style="color:#6CB6FF;">false</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Some content.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">Notice</p><p>You need to change the package name referenced by <code>Dialog</code> and <code>Popup</code> above from <code>androidx.compose.ui.window</code> to <code>com.highcapable.betterandroid.compose.extension.ui.window</code>.</p></div>`,13);function js(Vs,Ws){const o=l("ExternalLinkIcon"),p=l("RouterLink");return t(),c("div",null,[u,s("p",null,[n("You can view the KDoc "),s("a",m,[n("click here"),e(o)]),n(".")]),y,s("div",A,[v,b,s("p",null,[s("a",h,[n("Color → isBrightColor"),e(o)])]),s("p",null,[s("a",B,[n("Color → toHexColor"),e(o)])]),s("p",null,[s("a",D,[n("Color → mixColorOf"),e(o)])]),s("p",null,[s("a",C,[n("Color → orNull"),e(o)])]),s("p",null,[s("a",g,[n("Color → toComposeColor"),e(o)])]),F,s("p",null,[s("a",f,[n("Color → toPlatformColor"),e(o)])]),x,s("p",null,[s("a",k,[n("Color → toPlatformColor"),e(o)])]),_]),w,s("p",null,[q,n(" also provides extensions for "),P,n(" similar to those in "),e(p,{to:"/en/library/ui-extension.html#color-extension"},{default:r(()=>[n("ui-extension → Color Extension")]),_:1}),n(", making it easier use.")]),S,s("div",M,[T,E,s("p",null,[s("a",I,[n("Border → borderOrElse"),e(o)])]),s("p",null,[s("a",K,[n("BorderStroke → solidColor"),e(o)])]),j]),V,s("p",null,[n("The origin of this question comes from "),s("a",W,[n("here"),e(o)]),n(", the solution mentioned in setting the border to a transparent color is not friendly because it still performs a drawing operation.")]),L,s("div",H,[O,N,s("p",null,[s("a",Y,[n("ComponentPadding"),e(o)])]),z]),R,s("div",U,[J,X,s("p",null,[s("a",G,[n("Foundation → componentState"),e(o)])]),s("p",null,[s("a",Z,[n("Foundation → clickable"),e(o)])]),s("p",null,[s("a",Q,[n("Foundation → combinedClickable"),e(o)])]),s("p",null,[s("a",$,[n("Foundation → toggleable"),e(o)])]),s("p",null,[s("a",ss,[n("Foundation → selectable"),e(o)])]),s("p",null,[s("a",ns,[n("Foundation → HapticFeedback"),e(o)])]),es]),os,s("div",as,[ls,ps,s("p",null,[s("a",is,[n("ImageVector → ImageVector"),e(o)])]),ts]),cs,s("div",rs,[ds,us,s("p",null,[s("a",ms,[n("Unit → orNull"),e(o)])]),ys]),As,s("div",vs,[bs,hs,s("p",null,[s("a",Bs,[n("AdaptiveLayout → AdaptiveRow"),e(o)])]),s("p",null,[s("a",Ds,[n("AdaptiveLayout → AdaptiveColumn"),e(o)])]),Cs]),gs,s("div",Fs,[fs,xs,s("p",null,[s("a",ks,[n("DialogPropertiesWrapper"),e(o)])]),_s,s("p",null,[s("a",ws,[n("DialogPropertiesWrapper.AndroidProperties"),e(o)])]),qs,s("p",null,[s("a",Ps,[n("SecureFlagPolicyWrapper"),e(o)])]),Ss,s("p",null,[s("a",Ms,[n("Dialog → Dialog"),e(o)])]),Ts,s("p",null,[s("a",Es,[n("Popup → Popup"),e(o)])]),Is]),Ks])}const Hs=i(d,[["render",js],["__file","compose-extension.html.vue"]]);export{Hs as default};
