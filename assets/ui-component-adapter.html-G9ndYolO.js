import{_ as o,r as p,o as t,c,a as s,b as n,d as e,e as l}from"./app-ewiN1Yda.js";const i={},r=l(`<h1 id="ui-component-adapter" tabindex="-1"><a class="header-anchor" href="#ui-component-adapter" aria-hidden="true">#</a> ui-component-adapter</h1><p><img src="https://img.shields.io/maven-central/v/com.highcapable.betterandroid/ui-component-adapter?logo=apachemaven&amp;logoColor=orange&amp;style=flat-square" alt="Maven Central"><span style="margin-left:5px;"></span><img src="https://img.shields.io/maven-metadata/v?metadataUrl=https%3A%2F%2Fraw.githubusercontent.com%2FHighCapable%2Fmaven-repository%2Frefs%2Fheads%2Fmain%2Frepository%2Freleases%2Fcom%2Fhighcapable%2Fbetterandroid%2Fui-component-adapter%2Fmaven-metadata.xml&amp;logo=apachemaven&amp;logoColor=orange&amp;label=highcapable-maven-releases&amp;style=flat-square" alt="Maven metadata URL"><span style="margin-left:5px;"></span><img src="https://img.shields.io/badge/Min SDK-21-orange?logo=android&amp;style=flat-square" alt="Android Min SDK"></p><p>这是针对 UI (用户界面) 适配器组件的一个依赖。</p><h2 id="配置依赖" tabindex="-1"><a class="header-anchor" href="#配置依赖" aria-hidden="true">#</a> 配置依赖</h2><p>你可以使用如下方式将此模块添加到你的项目中。</p><h3 id="sweetdependency-推荐" tabindex="-1"><a class="header-anchor" href="#sweetdependency-推荐" aria-hidden="true">#</a> SweetDependency (推荐)</h3><p>在你的项目 <code>SweetDependency</code> 配置文件中添加依赖。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#8DDB8C;">libraries</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#8DDB8C;">com.highcapable.betterandroid</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">ui-component-adapter</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">+</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在你的项目 <code>build.gradle.kts</code> 中配置依赖。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.ui.component.adapter)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="version-catalog" tabindex="-1"><a class="header-anchor" href="#version-catalog" aria-hidden="true">#</a> Version Catalog</h3><p>在你的项目 <code>gradle/libs.versions.toml</code> 中添加依赖。</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">[</span><span style="color:#F69D50;">versions</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-ui-component-adapter = </span><span style="color:#96D0FF;">&quot;&lt;version&gt;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">[</span><span style="color:#F69D50;">libraries</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-ui-component-adapter = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:ui-component-adapter&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-ui-component-adapter&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在你的项目 <code>build.gradle.kts</code> 中配置依赖。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.ui.component.adapter)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请将 <code>&lt;version&gt;</code> 修改为此文档顶部显示的版本。</p><h3 id="传统方式" tabindex="-1"><a class="header-anchor" href="#传统方式" aria-hidden="true">#</a> 传统方式</h3><p>在你的项目 <code>build.gradle.kts</code> 中配置依赖。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:ui-component-adapter:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请将 <code>&lt;version&gt;</code> 修改为此文档顶部显示的版本。</p><h2 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍" aria-hidden="true">#</a> 功能介绍</h2>`,21),d={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter",target:"_blank",rel:"noopener noreferrer"},y={class:"custom-container tip"},A=s("p",{class:"custom-container-title"},"本节内容",-1),v={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter/-base-adapter-builder",target:"_blank",rel:"noopener noreferrer"},D=s("p",null,[n("可用于构建一个 "),s("code",null,"BaseAdapter"),n("。")],-1),u={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter/-pager-adapter-builder",target:"_blank",rel:"noopener noreferrer"},B=s("p",null,[n("可用于构建一个 "),s("code",null,"PagerAdapter"),n("。")],-1),m={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter/-recycler-adapter-builder",target:"_blank",rel:"noopener noreferrer"},C=s("p",null,[n("可用于构建一个 "),s("code",null,"RecyclerView.Adapter"),n("。")],-1),b={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.mediator/-pager-mediator",target:"_blank",rel:"noopener noreferrer"},g=s("p",null,[s("code",null,"ViewPager"),n(" 的页面调节器。")],-1),F={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.cosmetic/-recycler-cosmetic",target:"_blank",rel:"noopener noreferrer"},h=s("p",null,[s("code",null,"RecyclerView"),n(" 的 "),s("code",null,"LayoutManager"),n(" 与 "),s("code",null,"ItemDecoration"),n(" 的装饰器。")],-1),k={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.decoration/-linear-horizontal-item-decoration",target:"_blank",rel:"noopener noreferrer"},w=s("p",null,[s("code",null,"RecyclerView"),n(" 的线性横向列表装饰器。")],-1),V={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.decoration/-linear-vertical-item-decoration",target:"_blank",rel:"noopener noreferrer"},_=s("p",null,[s("code",null,"RecyclerView"),n(" 的线性纵向列表装饰器。")],-1),x={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.decoration/-grid-vertical-item-decoration",target:"_blank",rel:"noopener noreferrer"},f=s("p",null,[s("code",null,"RecyclerView"),n(" 的九宫格纵向列表装饰器。")],-1),R={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.layoutmanager/-linear-layout-manager",target:"_blank",rel:"noopener noreferrer"},I=s("p",null,[s("code",null,"RecyclerView"),n(" 的增强型线性列表布局管理器。")],-1),P={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.layoutmanager/-grid-layout-manager",target:"_blank",rel:"noopener noreferrer"},q=s("p",null,[s("code",null,"RecyclerView"),n(" 的增强型九宫格布局管理器。")],-1),M={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.layoutmanager.base/-recycler-layout-manager",target:"_blank",rel:"noopener noreferrer"},L=s("p",null,[s("code",null,"RecyclerView"),n(" 的增强型布局管理器基类。")],-1),S={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.wrapper/-recycler-adapter-wrapper",target:"_blank",rel:"noopener noreferrer"},E=s("p",null,[s("code",null,"RecyclerView"),n(" 的自定义适配器包装类。")],-1),T={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.factory",target:"_blank",rel:"noopener noreferrer"},K=s("p",null,[n("适用于 "),s("code",null,"RecyclerView"),n(" 和其适配器构建的扩展方法。")],-1),H={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.factory",target:"_blank",rel:"noopener noreferrer"},G=s("p",null,"适用于上述适配器构建的扩展方法。",-1),N={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.viewholder.delegate.base/-view-holder-delegate",target:"_blank",rel:"noopener noreferrer"},z=s("p",null,[n("自定义 "),s("code",null,"ViewHolder"),n(" 代理类。")],-1),W={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.entity/-adapter-position",target:"_blank",rel:"noopener noreferrer"},U=s("p",null,"动态适配器下标实例。",-1),Y=l(`<p>Android 中的适配器从 <code>ListView</code> 开始到 <code>RecyclerView</code> 的出现，一直是开发者最头疼的问题之一。</p><p>针对这个问题，<code>BetterAndroid</code> 对以下组件的适配器进行了封装：</p><p><code>ListView</code>、<code>AutoCompleteTextView</code>、<code>ListPopupWindow</code>、<code>RecyclerView</code>、<code>ViewPager</code>、<code>ViewPager2</code></p><p>在 Kotlin 中你能够更加方便地创建一个数据适配器。</p><p>现在，你只需要一个数据数组和一个自定义的适配器布局，就可以非常快速地创建一个适配器并绑定到上述这些组件上。</p><h3 id="基本适配器" tabindex="-1"><a class="header-anchor" href="#基本适配器" aria-hidden="true">#</a> 基本适配器</h3><p>为 <code>ListView</code>、<code>AutoCompleteTextView</code>、<code>ListPopupWindow</code> 创建一个 <code>BaseAdapter</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的实体类</span></span>
<span class="line"><span style="color:#F47067;">data</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> iconRes: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> name: </span><span style="color:#F69D50;">String</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 假设这就是你需要绑定的数据集</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> listData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ArrayList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="color:#768390;">// 创建并绑定到自定义的 BaseAdapter</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> listView.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定数据集</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindData</span><span style="color:#ADBAC7;"> { listData }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定自定义适配器布局 adapter_my_layout.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindItemView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayoutBinding</span><span style="color:#ADBAC7;">&gt; { binding, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.iconView.</span><span style="color:#DCBDFB;">setImageResource</span><span style="color:#ADBAC7;">(entity.iconRes)</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.textView.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> entity.name</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置每项条目的点击事件</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onItemViewClick</span><span style="color:#ADBAC7;"> { itemView, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Your code here.</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你希望手动创建一个适配器并绑定到上述组件上，请参考以下示例。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你当前的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 手动创建一个 BaseAdapter</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">BaseAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;(context) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 内容与上述相同</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 然后绑定到 listView</span></span>
<span class="line"><span style="color:#ADBAC7;">listView.adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> adapter</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为 <code>ViewPager</code> 创建一个 <code>PagerAdapter</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的实体类</span></span>
<span class="line"><span style="color:#F47067;">data</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> iconRes: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> name: </span><span style="color:#F69D50;">String</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 假设这就是你需要绑定的数据集</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> listData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ArrayList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="color:#768390;">// 创建并绑定到自定义的 PagerAdapter</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> viewPager.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定数据集</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindData</span><span style="color:#ADBAC7;"> { listData }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定自定义适配器布局 adapter_my_layout.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindPageView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayoutBinding</span><span style="color:#ADBAC7;">&gt; { binding, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.iconView.</span><span style="color:#DCBDFB;">setImageResource</span><span style="color:#ADBAC7;">(entity.iconRes)</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.textView.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> entity.name</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以直接使用 <code>dataSetCount</code> 来不指定数据集，仅重复创建多个页面。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 创建并绑定到自定义的 PagerAdapter</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> viewPager.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 手动创建两个相同的页面</span></span>
<span class="line"><span style="color:#ADBAC7;">    dataSetCount </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定自定义适配器布局 adapter_my_layout.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindPageView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayoutBinding</span><span style="color:#ADBAC7;">&gt; { binding, _, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 你可以通过 position 判断当前页面的位置</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以复用 <code>onBindPageView</code> 方法来创建多个不同的页面，页面顺序按照创建顺序决定。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 创建并绑定到自定义的 PagerAdapter</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> viewPager.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定自定义适配器布局 adapter_my_layout_1.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindPageView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayout1Binding</span><span style="color:#ADBAC7;">&gt; { binding, _, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 你可以通过 position 判断当前页面的位置</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定自定义适配器布局 adapter_my_layout_2.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindPageView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayout2Binding</span><span style="color:#ADBAC7;">&gt; { binding, _, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 你可以通过 position 判断当前页面的位置</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建的页面数量为复用 <code>onBindPageView</code> 方法的次数。</p><div class="custom-container danger"><p class="custom-container-title">特别注意</p><p>如果你复用 <code>onBindPageView</code> 方法创建了多个不同页面，你不能再指定 <code>dataSetCount</code> 或绑定数据集。</p></div><p>如果你需要处理 <code>PagerAdapter</code> 中的 <code>getPageTitle</code>、<code>getPageWidth</code>，你可以使用 <code>PagerMediator</code> 来完成。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 创建并绑定到自定义的 PagerAdapter</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> viewPager.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定每项的 PagerMediator</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindMediators</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 处理页面的标题</span></span>
<span class="line"><span style="color:#ADBAC7;">        title </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;">  </span><span style="color:#F47067;">when</span><span style="color:#ADBAC7;"> (position) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;主页&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;附加页&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 处理页面的宽度 (比例)</span></span>
<span class="line"><span style="color:#ADBAC7;">        width </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">when</span><span style="color:#ADBAC7;"> (position) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1f</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.5f</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// ...</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你希望手动创建一个 <code>PagerAdapter</code> 并绑定到 <code>ViewPager</code> 上，请参考以下示例。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你当前的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 手动创建一个 PagerAdapter</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">PagerAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;(context) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 内容与上述相同</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 然后绑定到 viewPager</span></span>
<span class="line"><span style="color:#ADBAC7;">viewPager.adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> adapter</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="recyclerview-适配器" tabindex="-1"><a class="header-anchor" href="#recyclerview-适配器" aria-hidden="true">#</a> RecyclerView 适配器</h3><p>Android Jetpack 为开发者带来了更现代化、功能更加丰富的适配器组件 <code>RecyclerView.Adapter</code>。</p><p>为 <code>RecyclerView</code>、<code>ViewPager2</code> 创建一个常规的 <code>RecyclerView.Adapter</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的实体类</span></span>
<span class="line"><span style="color:#F47067;">data</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> iconRes: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> name: </span><span style="color:#F69D50;">String</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 假设这就是你需要绑定的数据集</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> listData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ArrayList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="color:#768390;">// 创建并绑定到自定义的 RecyclerView.Adapter</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> recyclerView.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定数据集</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindData</span><span style="color:#ADBAC7;"> { listData }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定自定义适配器布局 adapter_my_layout.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindItemView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayoutBinding</span><span style="color:#ADBAC7;">&gt; { binding, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.iconView.</span><span style="color:#DCBDFB;">setImageResource</span><span style="color:#ADBAC7;">(entity.iconRes)</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.textView.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> entity.name</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置每项条目的点击事件</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onItemViewClick</span><span style="color:#ADBAC7;"> { itemView, viewType, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Your code here.</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为 <code>RecyclerView</code>、<code>ViewPager2</code> 创建一个多 <code>View</code> 类型的 <code>RecyclerView.Adapter</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的实体类</span></span>
<span class="line"><span style="color:#F47067;">data</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> iconRes: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> name: </span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> title: </span><span style="color:#F69D50;">String</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> dataType: </span><span style="color:#F69D50;">Int</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 假设这就是你需要绑定的数据集</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> listData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ArrayList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="color:#768390;">// 创建并绑定到自定义的 RecyclerView.Adapter</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> recyclerView.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定数据集</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindData</span><span style="color:#ADBAC7;"> { listData }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定 View 类型</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindViewType</span><span style="color:#ADBAC7;"> { entity, position </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> entity.dataType }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定自定义适配器布局 adapter_my_layout_1.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindItemView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayout1Binding</span><span style="color:#ADBAC7;">&gt;(viewType </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">) { binding, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.iconView.</span><span style="color:#DCBDFB;">setImageResource</span><span style="color:#ADBAC7;">(entity.iconRes)</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.textView.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> entity.name</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定自定义适配器布局 adapter_my_layout_2.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindItemView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayout2Binding</span><span style="color:#ADBAC7;">&gt;(viewType </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">) { binding, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.iconView.</span><span style="color:#DCBDFB;">setImageResource</span><span style="color:#ADBAC7;">(entity.iconRes)</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.titleView.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> entity.title</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置每项条目的点击事件</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onItemViewClick</span><span style="color:#ADBAC7;"> { itemView, viewType, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Your code here.</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>在 <code>RecyclerView.Adapter</code> 中，<code>onBindItemView</code> 中的 <code>position</code> 类型为 <code>AdapterPosition</code> 而非 <a href="#%E5%9F%BA%E6%9C%AC%E9%80%82%E9%85%8D%E5%99%A8">基本适配器</a> 中的 <code>Int</code>。</p><p>由于 <code>RecyclerView.Adapter</code> 可以局部更新，所以在动态添加或删除条目后，现有条目的 <code>onBindItemView</code> 并不会重新回调，此时你就需要 <code>AdapterPosition</code> 这样的动态下标实例，通过 <code>position.value</code> 获取到当前条目的正确下标。</p><p><code>AdapterPosition</code> 合入了 <code>RecyclerView.ViewHolder</code> 中的 <code>getLayoutPosition</code>、<code>getBindingAdapterPosition</code>、<code>getAbsoluteAdapterPosition</code> 方法，它们对应为 <code>position.layout</code>、<code>position.value</code> 和 <code>position.absolute</code>。</p></div><p>为 <code>RecyclerView</code> 创建头部 <code>View</code> 和末位 <code>View</code>。</p><p>你可以使用 <code>onBindHeaderView</code> 和 <code>onBindFooterView</code> 方法来添加一个头部 <code>View</code> 和末位 <code>View</code>，这是两个特殊的条目布局，它们不会被计算入绑定的数据中，且通过 <code>onBindItemView</code> 等方法回调的下标 <code>position</code> 不受影响。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>你只能同时添加一个头部 <code>View</code> 和一个末位 <code>View</code>，并且这些添加后的布局不支持动态移除。</p></div><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的实体类</span></span>
<span class="line"><span style="color:#F47067;">data</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> iconRes: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> name: </span><span style="color:#F69D50;">String</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 假设这就是你需要绑定的数据集</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> listData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ArrayList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="color:#768390;">// 创建并绑定到自定义的 RecyclerView.Adapter</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> recyclerView.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定数据集</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindData</span><span style="color:#ADBAC7;"> { listData }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定头部 View</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindHeaderView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterHeaderBinding</span><span style="color:#ADBAC7;">&gt; { binding </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.someText.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Header&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定末位 View</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindFooterView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterFooterBinding</span><span style="color:#ADBAC7;">&gt; { binding </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.someText.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Footer&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定自定义适配器布局 adapter_my_layout.xml</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindItemView</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">AdapterMyLayoutBinding</span><span style="color:#ADBAC7;">&gt; { binding, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.iconView.</span><span style="color:#DCBDFB;">setImageResource</span><span style="color:#ADBAC7;">(entity.iconRes)</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.textView.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> entity.name</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上述示例中使用 <code>ViewBinding</code> 的方式之外，你还可以使用传统的布局资源 ID 来绑定其到适配器布局。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 绑定自定义适配器布局 adapter_my_layout.xml</span></span>
<span class="line"><span style="color:#DCBDFB;">onBindItemView</span><span style="color:#ADBAC7;">(R.layout.adapter_my_layout) { itemView, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    itemView.</span><span style="color:#DCBDFB;">findViewById</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">ImageView</span><span style="color:#ADBAC7;">&gt;(R.id.icon_view).</span><span style="color:#DCBDFB;">setImageResource</span><span style="color:#ADBAC7;">(entity.iconRes)</span></span>
<span class="line"><span style="color:#ADBAC7;">    itemView.</span><span style="color:#DCBDFB;">findViewById</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">TextView</span><span style="color:#ADBAC7;">&gt;(R.id.text_view).text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> entity.name</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果所有布局装载方式都不满足你的需求，你还可以基于 <code>ViewHolderDelegate</code> 来创建一个自定义的 <code>ViewHolder</code> 代理类。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 创建一个代理类，实现自己的布局装载方案</span></span>
<span class="line"><span style="color:#768390;">// 这里我们假设 MyLayoutBinder 就是你的布局装载器</span></span>
<span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MyViewHolderDelegate</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">@LayoutRes</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> resId: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">) : </span><span style="color:#F69D50;">ViewHolderDelegate</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyLayoutBinder</span><span style="color:#ADBAC7;">&gt;() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">create</span><span style="color:#ADBAC7;">(context: </span><span style="color:#F69D50;">Context</span><span style="color:#ADBAC7;">, parent: </span><span style="color:#F69D50;">ViewGroup</span><span style="color:#ADBAC7;">?): </span><span style="color:#F69D50;">MyLayoutBinder</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 假设这是你自定义的布局装载器的运作方式</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 记得传入并实现 parent 参数，因为我们需要 parent 的 LayoutParams</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 注意：一定不要现在就绑定到 parent 上！适配器不允许子布局提前持有父布局</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> binder </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> MyLayoutBinder.</span><span style="color:#DCBDFB;">inflate</span><span style="color:#ADBAC7;">(context, resId, parent, attachToParent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> binder</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getView</span><span style="color:#ADBAC7;">(instance: </span><span style="color:#F69D50;">MyLayoutBinder</span><span style="color:#ADBAC7;">): </span><span style="color:#F69D50;">View</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 从你的布局装载器中获取需要的 View</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> instance.root</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，使用你的自定义 <code>ViewHolderDelegate</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 绑定你的自定义 ViewHolderDelegate</span></span>
<span class="line"><span style="color:#DCBDFB;">onBindItemView</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">MyViewHolderDelegate</span><span style="color:#ADBAC7;">(R.layout.adapter_my_layout)) { delegate, entity, position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 这里的 delegate 即 MyLayoutBinder 对象，假设下面的方法都是你自己实现的</span></span>
<span class="line"><span style="color:#ADBAC7;">    delegate.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">ImageView</span><span style="color:#ADBAC7;">&gt;(R.id.icon_view).</span><span style="color:#DCBDFB;">setImageResource</span><span style="color:#ADBAC7;">(entity.iconRes)</span></span>
<span class="line"><span style="color:#ADBAC7;">    delegate.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">TextView</span><span style="color:#ADBAC7;">&gt;(R.id.text_view).text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> entity.name</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>当你设置了头部或末位 <code>View</code> 时，在使用 <code>RecyclerView.Adapter</code> 的 <code>notifyItemInserted</code>、<code>notifyItemRemoved</code>、<code>notifyItemChanged</code>、<code>notifyItemMoved</code> 等方法时，下标的位置将会出现问题，因为默认情况下 <code>onBindItemView</code> 计算出的 <code>position</code> 将不包含头部与末位布局，以及 <code>RecyclerView.scrollToPosition</code>、<code>RecyclerView.smoothScrollToPosition</code> 等方法也会受到影响。</p><p>由于这些方法在 <code>RecyclerView.Adapter</code> 中均为 <code>final</code>，无法重写它们，在这种情况下，<code>BetterAndroid</code> 为你提供了一个解决方案，在使用 <code>RecyclerView.Adapter</code> 时，你可以调用 <code>wrapper</code> 方法来获取包装实例，它将会为你自动处理这些问题。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设你已将使用 RecyclerAdapterBuilder 创建的 adapter 绑定到 RecyclerView</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> recyclerView: </span><span style="color:#F69D50;">RecyclerView</span></span>
<span class="line"><span style="color:#768390;">// 获取包装实例，如果目标适配器不是 RecyclerAdapterBuilder 创建的，将会返回 null</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> wrapper </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> recyclerView.adapter?.wrapper</span></span>
<span class="line"><span style="color:#768390;">// 正常使用 RecyclerView.Adapter 的通知更新方法</span></span>
<span class="line"><span style="color:#ADBAC7;">wrapper?.</span><span style="color:#DCBDFB;">notifyItemInserted</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">wrapper?.</span><span style="color:#DCBDFB;">notifyItemRemoved</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 头部或末位布局需要单独使用以下方法更新</span></span>
<span class="line"><span style="color:#ADBAC7;">wrapper?.</span><span style="color:#DCBDFB;">notifyHeaderItemChanged</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">wrapper?.</span><span style="color:#DCBDFB;">notifyFooterItemChanged</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// 更进一步，你可以手动使用以下方式判断是否存在头部、末位布局</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> hasHeaderView </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> wrapper?.hasHeaderView </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> hasFooterView </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> wrapper?.hasFooterView </span><span style="color:#F47067;">==</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回到我们前面说到的问题，<code>RecyclerView.scrollToPosition</code>、<code>RecyclerView.smoothScrollToPosition</code> 等方法也会受到影响，这种情况你可以使用 <code>com.highcapable.betterandroid.ui.component.adapter.recycler.layoutmanager</code> 包名下提供的 <code>LinearLayoutManager</code>、<code>GridLayoutManager</code> 以及 <code>RecyclerLayoutManager</code> 来解决。</p><p>这些封装后的增强型布局管理器将会通过默认的 <code>RecyclerCosmetic</code> 自动集成 (参考下方的 <a href="#recycler-%E8%A3%85%E9%A5%B0%E5%99%A8">Recycler 装饰器</a>)，你无需任何手动操作，当你需要手动创建 <code>RecyclerView.LayoutManager</code> 时，我们均建议你继承于这个包名下提供的实例来完成。</p><p>当你使用了 <code>BetterAndroid</code> 提供的 <code>RecyclerView.LayoutManager</code> 时，由于头部或末位布局会自动处理 <code>position</code>，因此在使用 <code>RecyclerView.scrollToPosition</code>、<code>RecyclerView.smoothScrollToPosition</code> 滚动到顶部、底部时，你需要像这样 <code>scrollToPosition(-1)</code> (顶部) 或 <code>scrollToPosition(lastIndex + 1)</code> (底部)。</p><p>所以我们始终建议你在有滚动到顶部、底部需求的情况下，使用 <code>scrollToFirstPosition</code>、<code>scrollToLastPosition</code>、<code>smoothScrollToFirstPosition</code>、<code>smoothScrollToLastPosition</code> 方法取代，它们会自动处理这类问题 (无论你是否使用了 <code>BetterAndroid</code> 提供的 <code>RecyclerView.LayoutManager</code>)。</p></div><h3 id="fragment-适配器" tabindex="-1"><a class="header-anchor" href="#fragment-适配器" aria-hidden="true">#</a> Fragment 适配器</h3><p>为 <code>ViewPager</code> 创建一个 <code>FragmentPagerAdapter</code>。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>这种用法已被官方弃用，如果可能，请开始使用 <code>ViewPager2</code>。</p></div><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你当前的 FragmentActivity</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> activity: </span><span style="color:#F69D50;">FragmentActivity</span></span>
<span class="line"><span style="color:#768390;">// 创建并绑定到自定义的 FragmentPagerAdapter</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> viewPager.</span><span style="color:#DCBDFB;">bindFragments</span><span style="color:#ADBAC7;">(activity) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置需要显示的 Fragment 个数</span></span>
<span class="line"><span style="color:#ADBAC7;">    pageCount </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">5</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定每个 Fragment</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindFragments</span><span style="color:#ADBAC7;"> { position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">when</span><span style="color:#ADBAC7;"> (position) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FirstFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">SecondFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ThirdFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FourthFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FifthFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 <code>FragmentPagerAdapter</code> 的构造方法使用方法相同，你还可以自定义其中的 <code>behavior</code> 参数。</p><p>如果你正在 <code>Fragment</code> 中使用，你可以在 <code>bindFragments</code> 的第一位参数中填入当前 <code>Fragment</code> 实例，将会自动绑定到 <code>getChildFragmentManager()</code>。</p><p>如果你希望手动创建一个 <code>FragmentPagerAdapter</code> 并绑定到 <code>ViewPager</code> 上，请参考以下示例。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你当前的 FragmentActivity</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> activity: </span><span style="color:#F69D50;">FragmentActivity</span></span>
<span class="line"><span style="color:#768390;">// 手动创建一个 FragmentPagerAdapter</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FragmentPagerAdapter</span><span style="color:#ADBAC7;">(activity) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 内容与上述相同</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 然后绑定到 viewPager</span></span>
<span class="line"><span style="color:#ADBAC7;">viewPager.adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> adapter</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为 <code>ViewPager2</code> 创建一个 <code>FragmentStateAdapter</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你当前的 FragmentActivity</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> activity: </span><span style="color:#F69D50;">FragmentActivity</span></span>
<span class="line"><span style="color:#768390;">// 创建并绑定到自定义的 FragmentPagerAdapter</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> viewPager2.</span><span style="color:#DCBDFB;">bindFragments</span><span style="color:#ADBAC7;">(activity) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置需要显示的 Fragment 个数</span></span>
<span class="line"><span style="color:#ADBAC7;">    pageCount </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">5</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 绑定每个 Fragment</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">onBindFragments</span><span style="color:#ADBAC7;"> { position </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">when</span><span style="color:#ADBAC7;"> (position) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FirstFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">SecondFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ThirdFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#6CB6FF;">3</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FourthFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">else</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FifthFragment</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你正在 <code>Fragment</code> 中使用，你可以在 <code>bindFragments</code> 的第一位参数中填入当前 <code>Fragment</code> 实例，将会自动绑定到 <code>getChildFragmentManager()</code>。</p><p>如果你希望手动创建一个 <code>FragmentPagerAdapter</code> 并绑定到 <code>ViewPager2</code> 上，请参考以下示例。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你当前的 FragmentActivity</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> activity: </span><span style="color:#F69D50;">FragmentActivity</span></span>
<span class="line"><span style="color:#768390;">// 手动创建一个 FragmentStateAdapter</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">FragmentStateAdapter</span><span style="color:#ADBAC7;">(activity) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 内容与上述相同</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 然后绑定到 viewPager2</span></span>
<span class="line"><span style="color:#ADBAC7;">viewPager2.adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> adapter</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="recycler-装饰器" tabindex="-1"><a class="header-anchor" href="#recycler-装饰器" aria-hidden="true">#</a> Recycler 装饰器</h3><p>如果你希望手动创建一个 <code>RecyclerView.Adapter</code> 并绑定到 <code>RecyclerView</code>、<code>ViewPager2</code> 上，请参考以下示例。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你当前的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 手动创建一个 RecyclerView.Adapter</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">RecyclerAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">CustomBean</span><span style="color:#ADBAC7;">&gt;(context) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 内容与上述相同</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 手动创建一个装饰器</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> cosmetic </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> RecyclerCosmetic.</span><span style="color:#DCBDFB;">fromLinearVertical</span><span style="color:#ADBAC7;">(context)</span></span>
<span class="line"><span style="color:#768390;">// 然后绑定到 recyclerView</span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.layoutManager </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> cosmetic.layoutManager</span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.</span><span style="color:#DCBDFB;">addItemDecoration</span><span style="color:#ADBAC7;">(cosmetic.itemDecoration) </span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> adapter</span></span>
<span class="line"><span style="color:#768390;">// 绑定到 viewPager2 时你无需设置 layoutManager</span></span>
<span class="line"><span style="color:#ADBAC7;">viewPager2.</span><span style="color:#DCBDFB;">addItemDecoration</span><span style="color:#ADBAC7;">(cosmetic.itemDecoration) </span></span>
<span class="line"><span style="color:#ADBAC7;">viewPager2.adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> adapter</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>BetterAndroid</code> 为开发者针对 <code>RecyclerView</code> 预置了几种常用的适配器布局类型以供你使用。</p><p>你可以在方法参数中指定一个 <code>RecyclerCosmetic</code>，默认为线性纵向列表装饰器。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 创建一个线性纵向列表，行间距为 10dp</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> lvCosmetic </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> RecyclerCosmetic.</span><span style="color:#DCBDFB;">fromLinearVertical</span><span style="color:#ADBAC7;">(context, </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toPx</span><span style="color:#ADBAC7;">(context))</span></span>
<span class="line"><span style="color:#768390;">// 创建一个九宫格纵向列表，列间距为 10dp，行间距为 10dp</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> gvCosmetic </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> RecyclerCosmetic.</span><span style="color:#DCBDFB;">fromGridVertical</span><span style="color:#ADBAC7;">(context, </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toPx</span><span style="color:#ADBAC7;">(context), </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toPx</span><span style="color:#ADBAC7;">(context))</span></span>
<span class="line"><span style="color:#768390;">// 以 lvCosmetic 举例</span></span>
<span class="line"><span style="color:#768390;">// 使用 bindAdapter 绑定到 recyclerView</span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.</span><span style="color:#DCBDFB;">bindAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;(lvCosmetic) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// ...</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 或者，手动绑定</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">RecyclerAdapter</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;(context) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// ...</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.layoutManager </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> lvCosmetic.layoutManager</span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.</span><span style="color:#DCBDFB;">addItemDecoration</span><span style="color:#ADBAC7;">(lvCosmetic.itemDecoration)</span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.adapter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> adapter</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>如果你只需要一个 <code>ItemDecoration</code>，你可以通过预置的 <code>LinearHorizontalItemDecoration</code>、<code>LinearVerticalItemDecoration</code>、<code>GridVerticalItemDecoration</code> 来创建。</p><p>以下是一个简单的示例。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 创建一个线性纵向 ItemDecoration，行间距为 10dp</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> itemDecoration </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">LinearVerticalItemDecoration</span><span style="color:#ADBAC7;">(rowSpacing </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toPx</span><span style="color:#ADBAC7;">(context))</span></span>
<span class="line"><span style="color:#768390;">// 设置到 recyclerView</span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.</span><span style="color:#DCBDFB;">addItemDecoration</span><span style="color:#ADBAC7;">(itemDecoration)</span></span>
<span class="line"><span style="color:#768390;">// 如果你需要更新 ItemDecoration 的参数，你可以使用 update 方法</span></span>
<span class="line"><span style="color:#ADBAC7;">itemDecoration.</span><span style="color:#DCBDFB;">update</span><span style="color:#ADBAC7;">(rowSpacing </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">toPx</span><span style="color:#ADBAC7;">(context))</span></span>
<span class="line"><span style="color:#768390;">// 然后通知 recyclerView 更新</span></span>
<span class="line"><span style="color:#ADBAC7;">recyclerView.</span><span style="color:#DCBDFB;">invalidateItemDecorations</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="适配器扩展" tabindex="-1"><a class="header-anchor" href="#适配器扩展" aria-hidden="true">#</a> 适配器扩展</h3>`,80),J={class:"custom-container tip"},j=s("p",{class:"custom-container-title"},"本节内容",-1),O={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.factory/notify-all-items-inserted",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.factory/notify-all-items-changed",target:"_blank",rel:"noopener noreferrer"},X={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.factory/clear-and-notify",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component-adapter/ui-component-adapter/com.highcapable.betterandroid.ui.component.adapter.recycler.factory/notify-data-set-changed-ignore",target:"_blank",rel:"noopener noreferrer"},$=s("p",null,[n("适用于 "),s("code",null,"RecyclerView"),n(" 适配器的扩展。")],-1),ss=l(`<p>本节所介绍的适配器扩展基本上都属于 <code>RecyclerView.Adapter</code> 的扩展。</p><p>通常情况下，我们需要使用 <code>notifyItemInserted</code>、<code>notifyItemChanged</code> 等方法来通知适配器数据发生了变化。</p><p>当我们一次性向数据集中添加数据后，通常需要使用 <code>notifyItemRangeInserted</code> 来通知适配器数据发生了变化。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 RecyclerView.Adapter 对象</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter: </span><span style="color:#F69D50;">RecyclerView</span><span style="color:#ADBAC7;">.Adapter</span><span style="color:#F47067;">&lt;*&gt;</span></span>
<span class="line"><span style="color:#768390;">// 假设这就是你的数据集，在绑定时为空</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> dataSet: </span><span style="color:#F69D50;">MutableList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#768390;">// 添加一些数据到数据集中</span></span>
<span class="line"><span style="color:#ADBAC7;">dataSet.</span><span style="color:#DCBDFB;">addAll</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">..</span><span style="color:#ADBAC7;">.)</span></span>
<span class="line"><span style="color:#768390;">// 通知适配器数据发生了变化</span></span>
<span class="line"><span style="color:#ADBAC7;">adapter.</span><span style="color:#DCBDFB;">notifyItemRangeInserted</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, dataSet.size)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当数据确定从 0 开始添加的时候，<code>BetterAndroid</code> 为你提供了一个更加简单的方式来完成，现在你可以使用以下方式通知适配器数据发生了变化。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 RecyclerView.Adapter 对象</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter: </span><span style="color:#F69D50;">RecyclerView</span><span style="color:#ADBAC7;">.Adapter</span><span style="color:#F47067;">&lt;*&gt;</span></span>
<span class="line"><span style="color:#768390;">// 假设这就是你的数据集，在绑定时为空</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> dataSet: </span><span style="color:#F69D50;">MutableList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#768390;">// 添加一些数据到数据集中</span></span>
<span class="line"><span style="color:#ADBAC7;">dataSet.</span><span style="color:#DCBDFB;">addAll</span><span style="color:#ADBAC7;">(</span><span style="color:#F47067;">..</span><span style="color:#ADBAC7;">.)</span></span>
<span class="line"><span style="color:#768390;">// 通知适配器数据发生了变化</span></span>
<span class="line"><span style="color:#ADBAC7;">adapter.</span><span style="color:#DCBDFB;">notifyAllItemsInserted</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上方法将默认使用 <code>adapter.itemCount</code> 来获取数据集的大小，无需再手动指定需要更新的范围。</p><p>此时请确保你的适配器返回了正确的 <code>itemCount</code>，否则请手动传入 <code>dataSet</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 通知适配器数据发生了变化</span></span>
<span class="line"><span style="color:#ADBAC7;">adapter.</span><span style="color:#DCBDFB;">notifyAllItemsInserted</span><span style="color:#ADBAC7;">(dataSet)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同样地，当数据确定全部发生了变化的时候 (例如在一个多选状态列表中，更新选中与非选中的复选框状态)，你可以使用以下方式通知适配器数据发生了变化。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 RecyclerView.Adapter 对象</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter: </span><span style="color:#F69D50;">RecyclerView</span><span style="color:#ADBAC7;">.Adapter</span><span style="color:#F47067;">&lt;*&gt;</span></span>
<span class="line"><span style="color:#768390;">// 假设这就是你的数据集</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> dataSet: </span><span style="color:#F69D50;">MutableList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#768390;">// 模拟操作数据集 (例如全选动作)</span></span>
<span class="line"><span style="color:#ADBAC7;">dataSet.</span><span style="color:#DCBDFB;">forEach</span><span style="color:#ADBAC7;"> { it.isSelected </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;">// 通知适配器数据发生了变化</span></span>
<span class="line"><span style="color:#ADBAC7;">adapter.</span><span style="color:#DCBDFB;">notifyAllItemsChanged</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样地，请确保你的适配器返回了正确的 <code>itemCount</code>，否则请手动传入 <code>dataSet</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 通知适配器数据发生了变化</span></span>
<span class="line"><span style="color:#ADBAC7;">adapter.</span><span style="color:#DCBDFB;">notifyAllItemsChanged</span><span style="color:#ADBAC7;">(dataSet)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们需要清空数据集并通知适配器数据发生了变化时，通常需要使用 <code>notifyItemRangeRemoved</code> 来通知适配器数据发生了变化。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 RecyclerView.Adapter 对象</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter: </span><span style="color:#F69D50;">RecyclerView</span><span style="color:#ADBAC7;">.Adapter</span><span style="color:#F47067;">&lt;*&gt;</span></span>
<span class="line"><span style="color:#768390;">// 假设这就是你的数据集</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> dataSet: </span><span style="color:#F69D50;">MutableList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#768390;">// 保存当前数据的大小</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> count </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> dataSet.size</span></span>
<span class="line"><span style="color:#768390;">// 清空数据集</span></span>
<span class="line"><span style="color:#ADBAC7;">dataSet.</span><span style="color:#DCBDFB;">clear</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// 通知适配器数据发生了变化</span></span>
<span class="line"><span style="color:#ADBAC7;">adapter.</span><span style="color:#DCBDFB;">notifyItemRangeRemoved</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">, count)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一过程依然繁琐，<code>BetterAndroid</code> 为此提供了一个更加简单的方式，现在你可以使用以下方式清空数据集并通知适配器数据发生了变化，此方法将自动计算数据集的大小。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 RecyclerView.Adapter 对象</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> adapter: </span><span style="color:#F69D50;">RecyclerView</span><span style="color:#ADBAC7;">.Adapter</span><span style="color:#F47067;">&lt;*&gt;</span></span>
<span class="line"><span style="color:#768390;">// 假设这就是你的数据集</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> dataSet: </span><span style="color:#F69D50;">MutableList</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyEntity</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#768390;">// 清空数据集并通知适配器数据发生了变化</span></span>
<span class="line"><span style="color:#ADBAC7;">adapter.</span><span style="color:#DCBDFB;">clearAndNotify</span><span style="color:#ADBAC7;">(dataSet)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>还有一些其它可被使用的扩展方法，<code>notifyDataSetChangedIgnore</code> 将忽略 Lint 在编码过程中给出的警告直接提供给你进行使用，其内部会直接调用 <code>notifyDataSetChanged</code>。</p><p>但是这个方法依然不推荐使用，因为它会导致整个列表的刷新，这在大数据量的列表中将会导致性能问题。</p></div>`,25);function ns(as,es){const a=p("ExternalLinkIcon");return t(),c("div",null,[r,s("p",null,[n("你可以 "),s("a",d,[n("点击这里"),e(a)]),n(" 查看 KDoc。")]),s("div",y,[A,s("p",null,[s("a",v,[n("BaseAdapterBuilder"),e(a)])]),D,s("p",null,[s("a",u,[n("PagerAdapterBuilder"),e(a)])]),B,s("p",null,[s("a",m,[n("RecyclerAdapterBuilder"),e(a)])]),C,s("p",null,[s("a",b,[n("PagerMediator"),e(a)])]),g,s("p",null,[s("a",F,[n("RecyclerCosmetic"),e(a)])]),h,s("p",null,[s("a",k,[n("LinearHorizontalItemDecoration"),e(a)])]),w,s("p",null,[s("a",V,[n("LinearVerticalItemDecoration"),e(a)])]),_,s("p",null,[s("a",x,[n("GridVerticalItemDecoration"),e(a)])]),f,s("p",null,[s("a",R,[n("LinearLayoutManager"),e(a)])]),I,s("p",null,[s("a",P,[n("GridLayoutManager"),e(a)])]),q,s("p",null,[s("a",M,[n("RecyclerLayoutManager"),e(a)])]),L,s("p",null,[s("a",S,[n("RecyclerAdapterWrapper"),e(a)])]),E,s("p",null,[s("a",T,[n("RecyclerView、RecyclerAdapter"),e(a)])]),K,s("p",null,[s("a",H,[n("CommonAdapter"),e(a)])]),G,s("p",null,[s("a",N,[n("ViewHolderDelegate"),e(a)])]),z,s("p",null,[s("a",W,[n("AdapterPosition"),e(a)])]),U]),Y,s("div",J,[j,s("p",null,[s("a",O,[n("RecyclerAdapter → notifyAllItemsInserted"),e(a)])]),s("p",null,[s("a",Q,[n("RecyclerAdapter → notifyAllItemsChanged"),e(a)])]),s("p",null,[s("a",X,[n("RecyclerAdapter → clearAndNotify"),e(a)])]),s("p",null,[s("a",Z,[n("RecyclerAdapter → notifyDataSetChangedIgnore"),e(a)])]),$]),ss])}const os=o(i,[["render",ns],["__file","ui-component-adapter.html.vue"]]);export{os as default};
