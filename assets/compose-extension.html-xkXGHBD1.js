import{_ as i,r as l,o as c,c as r,a as s,b as n,d as e,w as t,e as o}from"./app-ewiN1Yda.js";const d={},A=o(`<h1 id="compose-extension" tabindex="-1"><a class="header-anchor" href="#compose-extension" aria-hidden="true">#</a> compose-extension</h1><p><img src="https://img.shields.io/maven-central/v/com.highcapable.betterandroid/compose-extension?logo=apachemaven&amp;logoColor=orange&amp;style=flat-square" alt="Maven Central"><span style="margin-left:5px;"></span><img src="https://img.shields.io/maven-metadata/v?metadataUrl=https%3A%2F%2Fraw.githubusercontent.com%2FHighCapable%2Fmaven-repository%2Frefs%2Fheads%2Fmain%2Frepository%2Freleases%2Fcom%2Fhighcapable%2Fbetterandroid%2Fcompose-extension%2Fmaven-metadata.xml&amp;logo=apachemaven&amp;logoColor=orange&amp;label=highcapable-maven-releases&amp;style=flat-square" alt="Maven metadata URL"><span style="margin-left:5px;"></span><img src="https://img.shields.io/badge/Min SDK-21-orange?logo=android&amp;style=flat-square" alt="Android Min SDK"></p><p>这是针对 Jetpack Compose 相关功能扩展的一个依赖，同时支持多平台。</p><p>目前支持的平台：Android、iOS、Desktop (JVM)。</p><h2 id="配置依赖" tabindex="-1"><a class="header-anchor" href="#配置依赖" aria-hidden="true">#</a> 配置依赖</h2><p>你可以使用如下方式将此模块添加到你的项目中。</p><p>这是一个 Kotlin Multiplatform 依赖，你需要 <code>org.jetbrains.kotlin.multiplatform</code> 插件来应用相关依赖。</p><h3 id="sweetdependency-推荐" tabindex="-1"><a class="header-anchor" href="#sweetdependency-推荐" aria-hidden="true">#</a> SweetDependency (推荐)</h3><p>在你的项目 <code>SweetDependency</code> 配置文件中添加依赖。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#8DDB8C;">libraries</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#8DDB8C;">com.highcapable.betterandroid</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># commonMain</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-extension</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">+</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># androidMain</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-extension-android</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-extension</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># iosArm64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-extension-iosarm64</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-extension</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># iosX64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-extension-iosx64</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-extension</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># iosSimulatorArm64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-extension-iossimulatorarm64</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-extension</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># desktopMain</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-extension-desktop</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-extension</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在你的项目 <code>build.gradle.kts</code> 中配置依赖。</p><p>如果你在普通的项目中使用多平台依赖，你只需要按需部署对应平台后缀的依赖即可。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.extension.android)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.extension.iosarm64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.extension.iosx64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.extension.iossimulatorarm64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.extension.desktop)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你在多平台项目中使用多平台依赖，你需要在 <code>commonMain</code> 中添加 <code>compose-extension</code> 依赖。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">kotlin</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">sourceSets</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> commonMain </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getting</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">dependencies</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.extension)</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="version-catalog" tabindex="-1"><a class="header-anchor" href="#version-catalog" aria-hidden="true">#</a> Version Catalog</h3><p>在你的项目 <code>gradle/libs.versions.toml</code> 中添加依赖。</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">[</span><span style="color:#F69D50;">versions</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-extension = </span><span style="color:#96D0FF;">&quot;&lt;version&gt;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">[</span><span style="color:#F69D50;">libraries</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#768390;"># commonMain</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-extension = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-extension&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># androidMain</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-extension-android = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-android&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-extension&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># iosArm64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-extension-iosarm64 = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-iosarm64&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-extension&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># iosX64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-extension-iosx64 = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-iosx64&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-extension&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># iosSimulatorArm64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-extension-iossimulatorarm64 = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-iossimulatorarm64&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-extension&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># desktopMain</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-extension-desktop = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-desktop&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-extension&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在你的项目 <code>build.gradle.kts</code> 中配置依赖。</p><p>如果你在普通的项目中使用多平台依赖，你只需要按需部署对应平台后缀的依赖即可。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.extension.android)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.extension.iosarm64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.extension.iosx64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.extension.iossimulatorarm64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.extension.desktop)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你在多平台项目中使用多平台依赖，你需要在 <code>commonMain</code> 中添加 <code>compose-extension</code> 依赖。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">kotlin</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">sourceSets</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> commonMain </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getting</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">dependencies</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.extension)</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请将 <code>&lt;version&gt;</code> 修改为此文档顶部显示的版本。</p><h3 id="传统方式" tabindex="-1"><a class="header-anchor" href="#传统方式" aria-hidden="true">#</a> 传统方式</h3><p>在你的项目 <code>build.gradle.kts</code> 中配置依赖。</p><p>如果你在普通的项目中使用多平台依赖，你只需要按需部署对应平台后缀的依赖即可。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-android:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-iosarm64:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-iosx64:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-iossimulatorarm64:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension-desktop:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你在多平台项目中使用多平台依赖，你需要在 <code>commonMain</code> 中添加 <code>compose-extension</code> 依赖。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">kotlin</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">sourceSets</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> commonMain </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getting</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">dependencies</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-extension:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请将 <code>&lt;version&gt;</code> 修改为此文档顶部显示的版本。</p><h2 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍" aria-hidden="true">#</a> 功能介绍</h2>`,32),y={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension",target:"_blank",rel:"noopener noreferrer"},m=s("h3",{id:"颜色-color-扩展",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#颜色-color-扩展","aria-hidden":"true"},"#"),n(" 颜色 (Color) 扩展")],-1),u={class:"custom-container tip"},v=s("p",{class:"custom-container-title"},"本节内容",-1),B=s("blockquote",null,[s("p",null,"commonMain")],-1),D={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/is-bright-color",target:"_blank",rel:"noopener noreferrer"},b={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/to-hex-color",target:"_blank",rel:"noopener noreferrer"},C={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/mix-color-of",target:"_blank",rel:"noopener noreferrer"},h={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/or-null",target:"_blank",rel:"noopener noreferrer"},F={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/to-compose-color",target:"_blank",rel:"noopener noreferrer"},g=s("blockquote",null,[s("p",null,"desktopMain")],-1),k={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/%5Bdesktop%5Dto-platform-color",target:"_blank",rel:"noopener noreferrer"},x=s("blockquote",null,[s("p",null,"iosMain")],-1),_={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/%5Bios%5Dto-platform-color",target:"_blank",rel:"noopener noreferrer"},f=s("p",null,[n("适用于 "),s("code",null,"Color"),n(" 的扩展。")],-1),q=s("p",null,[n("Jetpack Compose 中的 "),s("code",null,"Color"),n(" 封装了颜色相关的实现，它解决了原生 Android 中使用 "),s("code",null,"Integer"),n(" 类型传递颜色的问题。")],-1),P=s("code",null,"BetterAndroid",-1),M=s("code",null,"Color",-1),w=o(`<p>由于 <code>Color</code> 提供了 <code>alpha</code> 属性，所以原生中提供的 <code>toAlphaColor</code> 扩展在 <code>Color</code> 中已不再需要。</p><p>下面是一些对颜色扩展的相关示例用法。</p><p>判断颜色的明亮程度。</p><p>这在你需要根据颜色的明亮程度来决定是否使用深色文字时非常有用。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设我们有以下颜色</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White</span></span>
<span class="line"><span style="color:#768390;">// 要判断其明亮程度，你只需要使用以下方法</span></span>
<span class="line"><span style="color:#768390;">// 你肯定会得到一个 true，因为这是一个白色</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> isBright </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> color.isBrightColor</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将颜色转换为 HEX 字符串。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设我们有以下颜色</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White</span></span>
<span class="line"><span style="color:#768390;">// 要将其转换为 HEX 字符串，你只需要使用以下方法</span></span>
<span class="line"><span style="color:#768390;">// 将会得到一个包含透明度的 &quot;#FFFFFFFF&quot;</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> hexString </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> color.</span><span style="color:#DCBDFB;">toHexColor</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>混合两个颜色。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设我们有以下颜色</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> color1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> color2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.Black</span></span>
<span class="line"><span style="color:#768390;">// 你可以使用以下方法非常简单地将它们进行混合</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> mixColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">mixColorOf</span><span style="color:#ADBAC7;">(color1, color2)</span></span>
<span class="line"><span style="color:#768390;">// 你还可以设置混合的比率，默认为 0.5f</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> mixColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">mixColorOf</span><span style="color:#ADBAC7;">(color1, color2, </span><span style="color:#6CB6FF;">0.2f</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断 <code>Color</code> 是否未定义。</p><p>在 <code>Color</code> 为 <code>Color.Unspecified</code> 时，你可以使用以下方式得到一个可在此状态下为 <code>null</code> 的对象。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设我们有以下颜色</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.Unspecified</span></span>
<span class="line"><span style="color:#768390;">// 在此状态下将会返回 null，然后你就可以使用 ?: 传递在未定义情况下的默认值</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> myColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> color.</span><span style="color:#DCBDFB;">orNull</span><span style="color:#ADBAC7;">() ?: Color.White</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在非 Android 平台中，你可以通过以下方式将对应的 <code>Color</code> 对象转换为平台的颜色对象。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设我们有以下颜色</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White</span></span>
<span class="line"><span style="color:#768390;">// 例如，你可以将其转换为 JavaFX 中的颜色对象</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> awtColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> color.</span><span style="color:#DCBDFB;">toPlatformColor</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// 在 iOS 中，你可以将其转换为 UIColor 对象</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> uiColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> color.</span><span style="color:#DCBDFB;">toPlatformColor</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>在 Android 平台中，你可以使用 <code>Color.toArgb()</code> 方法将 <code>Color</code> 对象转换为 <code>Integer</code> 类型。</p></div><p>同样地，你可以通过以下方式将平台的颜色对象转换为 Compose 的 <code>Color</code> 对象。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这是 JavaFX 中的颜色对象</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> awtColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.WHITE</span></span>
<span class="line"><span style="color:#768390;">// 假设这是 iOS 中的颜色对象</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> uiColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> UIColor.</span><span style="color:#DCBDFB;">whiteColor</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// 将其转换为 Compose 的 Color 对象</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> composeColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> awtColor.</span><span style="color:#DCBDFB;">toComposeColor</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> composeColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> uiColor.</span><span style="color:#DCBDFB;">toComposeColor</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>在 Android 平台中，你可以使用类似 <code>Color(0xFFFFFFFF)</code> 的形式将 <code>Long</code> 类型的颜色转换为 <code>Color</code> 对象。</p></div><h3 id="边框-border-扩展" tabindex="-1"><a class="header-anchor" href="#边框-border-扩展" aria-hidden="true">#</a> 边框 (Border) 扩展</h3>`,25),K={class:"custom-container tip"},S=s("p",{class:"custom-container-title"},"本节内容",-1),V={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/border-or-else",target:"_blank",rel:"noopener noreferrer"},E={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/solid-color",target:"_blank",rel:"noopener noreferrer"},W=s("p",null,[n("适用于 "),s("code",null,"Border"),n("、"),s("code",null,"BorderStroke"),n(" 的扩展。")],-1),L=s("p",null,[n("你可以通过 "),s("code",null,"Modifier.border(...)"),n(" 方法为组件添加边框，但是当边框大小为 "),s("code",null,"0.dp"),n(" 时，边框依然会存在。")],-1),I={href:"https://stackoverflow.com/questions/72514987/unexpected-border-in-composables-border-shows-even-if-border-width-is-zero",target:"_blank",rel:"noopener noreferrer"},O=o(`<p>于是 <code>BetterAndroid</code> 提供了 <code>borderOrElse</code> 扩展，它会在边框大小为 <code>0.dp</code> 时不再为组件添加边框。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">Box</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    modifier </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Modifier</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#DCBDFB;">size</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">50</span><span style="color:#ADBAC7;">.dp)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 在这里，边框的大小为 0.dp，所以组件将不会有边框</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#DCBDFB;">borderOrElse</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">.dp, Color.Black, RectangleShape)</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 一些内容</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从一个已存在的 <code>BorderStroke</code> 对象中获取 <code>brush</code> (<code>SolidColor</code>) 中的颜色。</p><p><code>SolidColor</code> 是 <code>Brush</code> 的一种，它可以用于填充颜色，一个通过 <code>BorderStroke(10.dp, Color.White)</code> 创建的边框将无法方便地从 <code>brush</code> 中获取颜色。</p><p><code>BetterAndroid</code> 为此提供了扩展，现在你可以使用以下方式获取 <code>brush</code> 中的颜色。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 BorderStroke 对象</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> border </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">BorderStroke</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.dp, Color.White)</span></span>
<span class="line"><span style="color:#768390;">// 在确定 brush 是 SolidColor 的情况下，你可以使用以下方式获取其中的颜色</span></span>
<span class="line"><span style="color:#768390;">// 如果无法获取，将返回 Color.Unspecified</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> border.solidColor</span></span>
<span class="line"><span style="color:#768390;">// 你也可以在获取不到的时候设置其默认值</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> border.</span><span style="color:#DCBDFB;">solidColor</span><span style="color:#ADBAC7;">(Color.Black)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内边距-padding-扩展" tabindex="-1"><a class="header-anchor" href="#内边距-padding-扩展" aria-hidden="true">#</a> 内边距 (Padding) 扩展</h3>`,9),N={class:"custom-container tip"},H=s("p",{class:"custom-container-title"},"本节内容",-1),R=s("blockquote",null,[s("p",null,"commonMain")],-1),J={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/-component-padding",target:"_blank",rel:"noopener noreferrer"},T=s("p",null,[n("组件化 "),s("code",null,"padding"),n("，继承于 "),s("code",null,"PaddingValues"),n("。")],-1),U=o(`<p><code>PaddingValues</code> 是 Jetpack Compose 中提供的 <code>padding</code> 用法，它可以直接设置到 <code>Modifier.padding(...)</code> 中。</p><p>但是 <code>PaddingValues</code> 并没有提供 <code>copy</code> 等功能，一旦设置就不可修改，非常的不方便。</p><p>于是 <code>BetterAndroid</code> 继承于 <code>PaddingValues</code> 重新写了一个 <code>ComponentPadding</code>，使其更加好用。</p><p>在用法上，<code>ComponentPadding</code> 与 <code>PaddingValues</code> 完全相同，你还能够将其直接将其设置到 <code>Modifier.padding(...)</code> 中。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 创建一个 ComponentPadding</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> padding </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ComponentPadding</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.dp)</span></span>
<span class="line"><span style="color:#768390;">// 得到一个四边均为 0.dp 的 ComponentPadding</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> padding </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ComponentPadding.None</span></span>
<span class="line"><span style="color:#768390;">// 设置每个方向的 padding</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> padding </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ComponentPadding</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    start </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;">.dp,</span></span>
<span class="line"><span style="color:#ADBAC7;">    top </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.dp,</span></span>
<span class="line"><span style="color:#ADBAC7;">    bottom </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">12</span><span style="color:#ADBAC7;">.dp,</span></span>
<span class="line"><span style="color:#ADBAC7;">    end </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">16</span><span style="color:#ADBAC7;">.dp</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 设置水平、垂直方向的 padding</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> padding </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ComponentPadding</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    horizontal </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.dp,</span></span>
<span class="line"><span style="color:#ADBAC7;">    vertical </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;">.dp</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 通过 copy 方式创建一个新的 ComponentPadding</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> paddingCopy </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> padding.</span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(top </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">15</span><span style="color:#ADBAC7;">.dp)</span></span>
<span class="line"><span style="color:#768390;">// 设置到组件上</span></span>
<span class="line"><span style="color:#DCBDFB;">Box</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    modifier </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Modifier.</span><span style="color:#DCBDFB;">padding</span><span style="color:#ADBAC7;">(padding)</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 一些内容</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>BetterAndroid</code> 同时将 <code>calculateLeftPadding</code>、<code>calculateRightPadding</code> 封装为了 Composeable 方法，你无需再使用 <code>LayoutDirection</code> 来计算 LTR、RTL 方向的 <code>padding</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F69D50;">@Composable</span></span>
<span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">MyComponent</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 假设这就是你的 ComponentPadding</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> padding: </span><span style="color:#F69D50;">ComponentPadding</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 获取 left</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> left </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> padding.left</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 获取 right</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> right </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> padding.right</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还能够使用以下方式将其转换为 <code>PaddingValues</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的 ComponentPadding</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> padding: </span><span style="color:#F69D50;">ComponentPadding</span></span>
<span class="line"><span style="color:#768390;">// 转换为 PaddingValues</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> paddingValues </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> padding.</span><span style="color:#DCBDFB;">toPaddingValues</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基础-foundation-扩展" tabindex="-1"><a class="header-anchor" href="#基础-foundation-扩展" aria-hidden="true">#</a> 基础 (Foundation) 扩展</h3>`,13),z={class:"custom-container tip"},X=s("p",{class:"custom-container-title"},"本节内容",-1),j=s("blockquote",null,[s("p",null,"commonMain")],-1),Z={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/component-state",target:"_blank",rel:"noopener noreferrer"},G={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/clickable",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/combined-clickable",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/toggleable",target:"_blank",rel:"noopener noreferrer"},$={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/selectable",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/-haptic-feedback",target:"_blank",rel:"noopener noreferrer"},ns=s("p",null,"基础功能相关扩展。",-1),es=o(`<p>在 Jetpack Compose 的组件中缺少一种 “禁用” 的状态，<code>BetterAndroid</code> 提供了以下方式来通过调整组件的透明度以实现这个效果。</p><p>它的实际作用其实就是一个视觉上的启用或禁用的透明度效果，并不会对组件设置任何状态。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">Box</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    modifier </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Modifier</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#DCBDFB;">size</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">50</span><span style="color:#ADBAC7;">.dp)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 通过 componentState 来设置组件的状态</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 你还可以设置 disabledAlpha 来调整禁用状态下的组件透明度</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#DCBDFB;">componentState</span><span style="color:#ADBAC7;">(enabled </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">false</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 一些内容</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在原始的 <code>clickable</code>、<code>combinedClickable</code>、<code>toggleable</code>、<code>selectable</code> 中，你需要手动去为其设置默认值，如果仅在一个简单的场景去使用这些功能，那么会显得更加繁琐。</p><p><code>BetterAndroid</code> 为此提供了以上方法的同名扩展，现在你能更方便地使用这些方法而不必考虑使用 <code>remember</code> 等方法为其设置状态。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">Box</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    modifier </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Modifier</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#DCBDFB;">size</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">50</span><span style="color:#ADBAC7;">.dp)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 通过 clickable 来设置组件的点击事件</span></span>
<span class="line"><span style="color:#ADBAC7;">        .</span><span style="color:#DCBDFB;">clickable</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 处理点击事件</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 一些内容</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>你需要将这些方法引用的包名由 <code>androidx.compose.foundation</code> 更换为 <code>com.highcapable.betterandroid.compose.extension.ui</code>。</p></div><p>在原生 Android 中，要实现触感反馈需要使用 <code>View.performHapticFeedback</code> 方法或在类似 <code>setOnLongClickListener</code> 的方法最后一位传入 <code>true</code>。</p><p>在 Jetpack Compose 中，你需要每次都引用 <code>LocalHapticFeedback</code>，然后使用 <code>performHapticFeedback</code> 方法，这看起来并不友好。</p><p><code>BetterAndroid</code> 为此提供了 <code>HapticFeedback</code> 方法，你现在可以更加简单地使用以下方式来实现触感反馈。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">Box</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    modifier </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Modifier.</span><span style="color:#DCBDFB;">combinedClickable</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        onLongClick </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">HapticFeedback</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// Do something.</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">Text</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Long Click Me&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="矢量图-imagevector-扩展" tabindex="-1"><a class="header-anchor" href="#矢量图-imagevector-扩展" aria-hidden="true">#</a> 矢量图 (ImageVector) 扩展</h3>`,15),as={class:"custom-container tip"},os=s("p",{class:"custom-container-title"},"本节内容",-1),ls=s("blockquote",null,[s("p",null,"commonMain")],-1),ps={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/-image-vector",target:"_blank",rel:"noopener noreferrer"},is=s("p",null,[n("适用于 "),s("code",null,"ImageVector"),n(" 的扩展。")],-1),cs=o(`<p>Jetpack Compose 原生提供了一个能够创建矢量图的 <code>ImageVector</code>，但是你要使用 <code>ImageVector.Builder</code> 来创建它。</p><p>这样的方式看起来不是很友好，于是 <code>BetterAndroid</code> 为此提供了一个 <code>ImageVector</code> 的同名方法。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 通过 ImageVector 创建一个矢量图</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> myVector </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ImageVector</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;my_vector&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    defaultWidth </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">32</span><span style="color:#ADBAC7;">.dp,</span></span>
<span class="line"><span style="color:#ADBAC7;">    defaultHeight </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">32</span><span style="color:#ADBAC7;">.dp,</span></span>
<span class="line"><span style="color:#ADBAC7;">    viewportWidth </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">48f</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    viewportHeight </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">48f</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">path</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        fillAlpha </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1.0f</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        stroke </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">SolidColor</span><span style="color:#ADBAC7;">(Color.White),</span></span>
<span class="line"><span style="color:#ADBAC7;">        strokeAlpha </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1.0f</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        strokeLineWidth </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1.0f</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        strokeLineCap </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> StrokeCap.Round,</span></span>
<span class="line"><span style="color:#ADBAC7;">        strokeLineJoin </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> StrokeJoin.Round,</span></span>
<span class="line"><span style="color:#ADBAC7;">        strokeLineMiter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1.0f</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        pathFillType </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> PathFillType.NonZero</span></span>
<span class="line"><span style="color:#ADBAC7;">    ) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// ...</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// ...</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单位-unit-扩展" tabindex="-1"><a class="header-anchor" href="#单位-unit-扩展" aria-hidden="true">#</a> 单位 (Unit) 扩展</h3>`,5),rs={class:"custom-container tip"},ts=s("p",{class:"custom-container-title"},"本节内容",-1),ds=s("blockquote",null,[s("p",null,"commonMain")],-1),As={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui/or-null",target:"_blank",rel:"noopener noreferrer"},ys=s("p",null,[n("适用于 "),s("code",null,"Unit"),n(" 的扩展。")],-1),ms=o(`<p>在所有能够使用 <code>isSpecified</code> 进行判断的单位中，Jetpack Compose 都提供了 <code>takeOrElse</code> 方法，但是它并不简洁且不容易理解。</p><p>于是 <code>BetterAndroid</code> 为此提供了 <code>orNull</code> 方法，你可以使用它来得到一个可在此状态下为 <code>null</code> 的对象。</p><p>下面是使用 <code>takeOrElse</code> 与 <code>orNull</code> 的对比。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设我们有以下单位</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> dp: </span><span style="color:#F69D50;">Dp</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> sp: </span><span style="color:#F69D50;">TextUnit</span></span>
<span class="line"><span style="color:#768390;">// 使用 takeOrElse</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> dpValue </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> dp.</span><span style="color:#DCBDFB;">takeOrElse</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.dp }</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> spValue </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> sp.</span><span style="color:#DCBDFB;">takeOrElse</span><span style="color:#ADBAC7;"> { </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.sp }</span></span>
<span class="line"><span style="color:#768390;">// 使用 orNull</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> dpValue </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> dp.</span><span style="color:#DCBDFB;">orNull</span><span style="color:#ADBAC7;">() ?: </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.dp</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> spValue </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> sp.</span><span style="color:#DCBDFB;">orNull</span><span style="color:#ADBAC7;">() ?: </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.sp</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你会发现 <code>orNull</code> 的写法更加简洁，而且更容易理解。</p><h3 id="自适应布局-adaptive-layout" tabindex="-1"><a class="header-anchor" href="#自适应布局-adaptive-layout" aria-hidden="true">#</a> 自适应布局 (Adaptive Layout)</h3>`,7),us={class:"custom-container tip"},vs=s("p",{class:"custom-container-title"},"本节内容",-1),Bs=s("blockquote",null,[s("p",null,"commonMain")],-1),Ds={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui.layout/-adaptive-row",target:"_blank",rel:"noopener noreferrer"},bs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui.layout/-adaptive-column",target:"_blank",rel:"noopener noreferrer"},Cs=s("p",null,"自适应布局相关扩展。",-1),hs=o(`<p>自适应布局提供了可在不知道子组件大小的情况下对每个子组件进行测量并水平或垂直以父布局的大小对其进行平均分配的解决方案。</p><p>例如，你可以使用以下方式对两个按钮进行水平排列，并以父组件的大小对它们的宽度进行平均分配。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 创建一个 AdaptiveRow</span></span>
<span class="line"><span style="color:#DCBDFB;">AdaptiveRow</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    modifier </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Modifier.</span><span style="color:#DCBDFB;">width</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">150</span><span style="color:#ADBAC7;">.dp),</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 你可以设置每个组件的间距</span></span>
<span class="line"><span style="color:#ADBAC7;">    spacingBetween </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.dp</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">Button</span><span style="color:#ADBAC7;">(onClick </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> { </span><span style="color:#768390;">/* ... */</span><span style="color:#ADBAC7;"> }) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">Text</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Button 1&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">Button</span><span style="color:#ADBAC7;">(onClick </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> { </span><span style="color:#768390;">/* ... */</span><span style="color:#ADBAC7;"> }) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">Text</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Button 2&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时你不需要对 <code>Button</code> 设置任何宽度，它们将会自动进行测量并平均分配。</p><p>同样地，你也可以使用 <code>AdaptiveColumn</code> 对组件进行垂直排列。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 创建一个 AdaptiveColumn</span></span>
<span class="line"><span style="color:#DCBDFB;">AdaptiveColumn</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    modifier </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Modifier.</span><span style="color:#DCBDFB;">height</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">150</span><span style="color:#ADBAC7;">.dp),</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 你可以设置每个组件的间距</span></span>
<span class="line"><span style="color:#ADBAC7;">    spacingBetween </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">.dp</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">Button</span><span style="color:#ADBAC7;">(onClick </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> { </span><span style="color:#768390;">/* ... */</span><span style="color:#ADBAC7;"> }) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">Text</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Button 1&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">Button</span><span style="color:#ADBAC7;">(onClick </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> { </span><span style="color:#768390;">/* ... */</span><span style="color:#ADBAC7;"> }) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">Text</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Button 2&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dialog、popup-组件扩展" tabindex="-1"><a class="header-anchor" href="#dialog、popup-组件扩展" aria-hidden="true">#</a> Dialog、Popup 组件扩展</h3>`,9),Fs={class:"custom-container tip"},gs=s("p",{class:"custom-container-title"},"本节内容",-1),ks=s("blockquote",null,[s("p",null,"commonMain")],-1),xs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui.window/-dialog-properties-wrapper",target:"_blank",rel:"noopener noreferrer"},_s=s("p",null,[n("Android 平台中 "),s("code",null,"DialogProperties"),n(" 的包装类。")],-1),fs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui.window/-dialog-properties-wrapper/-android-properties",target:"_blank",rel:"noopener noreferrer"},qs=s("p",null,[n("Android 平台中 "),s("code",null,"DialogProperties"),n(" 中仅限于 Android 平台的属性。")],-1),Ps={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui.window/-secure-flag-policy-wrapper",target:"_blank",rel:"noopener noreferrer"},Ms=s("p",null,[n("Android 平台中 "),s("code",null,"SecureFlagPolicy"),n(" 的包装类。")],-1),ws={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui.window/-dialog",target:"_blank",rel:"noopener noreferrer"},Ks=s("p",null,[n("适用于 "),s("code",null,"Dialog"),n(" 的扩展。")],-1),Ss={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-extension/compose-extension/com.highcapable.betterandroid.compose.extension.ui.window/-popup",target:"_blank",rel:"noopener noreferrer"},Vs=s("p",null,[n("适用于 "),s("code",null,"Popup"),n(" 的扩展。")],-1),Es=o(`<p>本节中介绍的扩展功能可用于在 Kotlin Multiplatform 中使用。</p><p>在创建 <code>Dialog</code>、<code>Popup</code> 时，<code>commonMain</code> 中并没有很好地处理 Android 平台中的特殊功能。</p><p><code>BetterAndroid</code> 为此提供了与 Android 平台相关的功能，你可以在 <code>commonMain</code> 中开箱即用，不需要单独为 Android 进行适配。</p><p><code>DialogPropertiesWrapper</code> 镜像了全部来自 <code>DialogProperties</code> 的属性，并将 Android 平台特殊的属性封装为了 <code>DialogPropertiesWrapper.AndroidProperties</code>。</p><p>在 <code>BetterAndroid</code> 为你提供的 <code>Dialog</code> 方法中，你可以直接传入 <code>DialogPropertiesWrapper</code> 对象。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 创建 Dialog</span></span>
<span class="line"><span style="color:#DCBDFB;">Dialog</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    onDismissRequest </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 处理相关事件</span></span>
<span class="line"><span style="color:#ADBAC7;">    },</span></span>
<span class="line"><span style="color:#ADBAC7;">    properties </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">DialogPropertiesWrapper</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        dismissOnBackPress </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        dismissOnClickOutside </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        usePlatformDefaultWidth </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        usePlatformInsets </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        scrimColor </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.Black.</span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(alpha </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">0.6f</span><span style="color:#ADBAC7;">),</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 为 Android 平台设置特殊属性</span></span>
<span class="line"><span style="color:#ADBAC7;">        androidProperties </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> DialogPropertiesWrapper.</span><span style="color:#DCBDFB;">AndroidProperties</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">            secureFlagPolicy </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SecureFlagPolicyWrapper.Inherit,</span></span>
<span class="line"><span style="color:#ADBAC7;">            decorFitsSystemWindows </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">        )</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 一些内容</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>目前 <code>DialogPropertiesWrapper</code> 中的 <code>scrimColor</code> 在 Android 平台只有 <code>alpha</code> 能够生效。</p></div><p>对于 <code>Popup</code>，Android 平台不存在 <code>onPreviewKeyEvent</code>、<code>onKeyEvent</code> 参数，这会导致 <code>commonMain</code> 分发到 Android 时编译失败。</p><p>为了修复这个问题，<code>BetterAndroid</code> 为 Android 平台模拟了 <code>onPreviewKeyEvent</code>、<code>onKeyEvent</code>，现在你无需考虑兼容性问题。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 创建 Popup</span></span>
<span class="line"><span style="color:#DCBDFB;">Popup</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    onDismissRequest </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 处理相关事件</span></span>
<span class="line"><span style="color:#ADBAC7;">    },</span></span>
<span class="line"><span style="color:#ADBAC7;">    properties </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">PopupProperties</span><span style="color:#ADBAC7;">(),</span></span>
<span class="line"><span style="color:#ADBAC7;">    onPreviewKeyEvent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 处理相关事件</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">false</span></span>
<span class="line"><span style="color:#ADBAC7;">    },</span></span>
<span class="line"><span style="color:#ADBAC7;">    onKeyEvent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 处理相关事件</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">false</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 一些内容</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>你需要将上述 <code>Dialog</code>、<code>Popup</code> 引用的包名由 <code>androidx.compose.ui.window</code> 更换为 <code>com.highcapable.betterandroid.compose.extension.ui.window</code>。</p></div>`,13);function Ws(Ls,Is){const a=l("ExternalLinkIcon"),p=l("RouterLink");return c(),r("div",null,[A,s("p",null,[n("你可以 "),s("a",y,[n("点击这里"),e(a)]),n(" 查看 KDoc。")]),m,s("div",u,[v,B,s("p",null,[s("a",D,[n("Color → isBrightColor"),e(a)])]),s("p",null,[s("a",b,[n("Color → toHexColor"),e(a)])]),s("p",null,[s("a",C,[n("Color → mixColorOf"),e(a)])]),s("p",null,[s("a",h,[n("Color → orNull"),e(a)])]),s("p",null,[s("a",F,[n("Color → toComposeColor"),e(a)])]),g,s("p",null,[s("a",k,[n("Color → toPlatformColor"),e(a)])]),x,s("p",null,[s("a",_,[n("Color → toPlatformColor"),e(a)])]),f]),q,s("p",null,[P,n(" 同样为 "),M,n(" 提供了与在 "),e(p,{to:"/zh-cn/library/ui-extension.html#%E9%A2%9C%E8%89%B2-color-%E6%89%A9%E5%B1%95"},{default:t(()=>[n("ui-extension → 颜色 (Color) 扩展")]),_:1}),n(" 中类似的扩展，使其更加易用。")]),w,s("div",K,[S,s("p",null,[s("a",V,[n("Border → borderOrElse"),e(a)])]),s("p",null,[s("a",E,[n("BorderStroke → solidColor"),e(a)])]),W]),L,s("p",null,[n("这个问题的起因出自 "),s("a",I,[n("这里"),e(a)]),n("， 其中提到的将边框设置为透明颜色的方案并不友好，因为它依然进行了一次绘制操作。")]),O,s("div",N,[H,R,s("p",null,[s("a",J,[n("ComponentPadding"),e(a)])]),T]),U,s("div",z,[X,j,s("p",null,[s("a",Z,[n("Foundation → componentState"),e(a)])]),s("p",null,[s("a",G,[n("Foundation → clickable"),e(a)])]),s("p",null,[s("a",Q,[n("Foundation → combinedClickable"),e(a)])]),s("p",null,[s("a",Y,[n("Foundation → toggleable"),e(a)])]),s("p",null,[s("a",$,[n("Foundation → selectable"),e(a)])]),s("p",null,[s("a",ss,[n("Foundation → HapticFeedback"),e(a)])]),ns]),es,s("div",as,[os,ls,s("p",null,[s("a",ps,[n("ImageVector → ImageVector"),e(a)])]),is]),cs,s("div",rs,[ts,ds,s("p",null,[s("a",As,[n("Unit → orNull"),e(a)])]),ys]),ms,s("div",us,[vs,Bs,s("p",null,[s("a",Ds,[n("AdaptiveLayout → AdaptiveRow"),e(a)])]),s("p",null,[s("a",bs,[n("AdaptiveLayout → AdaptiveColumn"),e(a)])]),Cs]),hs,s("div",Fs,[gs,ks,s("p",null,[s("a",xs,[n("DialogPropertiesWrapper"),e(a)])]),_s,s("p",null,[s("a",fs,[n("DialogPropertiesWrapper.AndroidProperties"),e(a)])]),qs,s("p",null,[s("a",Ps,[n("SecureFlagPolicyWrapper"),e(a)])]),Ms,s("p",null,[s("a",ws,[n("Dialog → Dialog"),e(a)])]),Ks,s("p",null,[s("a",Ss,[n("Popup → Popup"),e(a)])]),Vs]),Es])}const Ns=i(d,[["render",Ws],["__file","compose-extension.html.vue"]]);export{Ns as default};
