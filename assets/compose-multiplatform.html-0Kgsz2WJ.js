import{_ as r,r as p,o as i,c,a as s,b as n,d as a,w as o,e as t}from"./app-ewiN1Yda.js";const d={},m=t('<h1 id="compose-multiplatform" tabindex="-1"><a class="header-anchor" href="#compose-multiplatform" aria-hidden="true">#</a> compose-multiplatform</h1><p><img src="https://img.shields.io/maven-central/v/com.highcapable.betterandroid/compose-multiplatform?logo=apachemaven&amp;logoColor=orange&amp;style=flat-square" alt="Maven Central"><span style="margin-left:5px;"></span><img src="https://img.shields.io/maven-metadata/v?metadataUrl=https%3A%2F%2Fraw.githubusercontent.com%2FHighCapable%2Fmaven-repository%2Frefs%2Fheads%2Fmain%2Frepository%2Freleases%2Fcom%2Fhighcapable%2Fbetterandroid%2Fcompose-multiplatform%2Fmaven-metadata.xml&amp;logo=apachemaven&amp;logoColor=orange&amp;label=highcapable-maven-releases&amp;style=flat-square" alt="Maven metadata URL"><span style="margin-left:5px;"></span><img src="https://img.shields.io/badge/Min SDK-21-orange?logo=android&amp;style=flat-square" alt="Android Min SDK"></p><p>这是针对 Jetpack Compose 多平台功能的一个依赖。</p><p>目前支持的平台：Android、iOS、Desktop (JVM)。</p>',4),A={class:"custom-container warning"},y=s("p",{class:"custom-container-title"},"注意",-1),u=s("code",null,"1.0.0",-1),B={href:"https://github.com/BetterAndroid/BetterAndroid/issues",target:"_blank",rel:"noopener noreferrer"},v=t(`<h2 id="配置依赖" tabindex="-1"><a class="header-anchor" href="#配置依赖" aria-hidden="true">#</a> 配置依赖</h2><p>你可以使用如下方式将此模块添加到你的项目中。</p><p>这是一个 Kotlin Multiplatform 依赖，你需要 <code>org.jetbrains.kotlin.multiplatform</code> 插件来应用相关依赖。</p><h3 id="sweetdependency-推荐" tabindex="-1"><a class="header-anchor" href="#sweetdependency-推荐" aria-hidden="true">#</a> SweetDependency (推荐)</h3><p>在你的项目 <code>SweetDependency</code> 配置文件中添加依赖。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#8DDB8C;">libraries</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#8DDB8C;">com.highcapable.betterandroid</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># commonMain</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-multiplatform</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">+</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># androidMain</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-multiplatform-android</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-multiplatform</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># iosArm64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-multiplatform-iosarm64</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-multiplatform</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># iosX64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-multiplatform-iosx64</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-multiplatform</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># iosSimulatorArm64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-multiplatform-iossimulatorarm64</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-multiplatform</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># desktopMain</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-multiplatform-desktop</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-multiplatform</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在你的项目 <code>build.gradle.kts</code> 中配置依赖。</p><p>如果你在普通的项目中使用多平台依赖，你只需要按需部署对应平台后缀的依赖即可。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.multiplatform.android)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.multiplatform.iosarm64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.multiplatform.iosx64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.multiplatform.iossimulatorarm64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.multiplatform.desktop)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你在多平台项目中使用多平台依赖，你需要在 <code>commonMain</code> 中添加 <code>compose-multiplatform</code> 依赖。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">kotlin</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">sourceSets</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> commonMain </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getting</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">dependencies</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.multiplatform)</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="version-catalog" tabindex="-1"><a class="header-anchor" href="#version-catalog" aria-hidden="true">#</a> Version Catalog</h3><p>在你的项目 <code>gradle/libs.versions.toml</code> 中添加依赖。</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">[</span><span style="color:#F69D50;">versions</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-multiplatform = </span><span style="color:#96D0FF;">&quot;&lt;version&gt;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">[</span><span style="color:#F69D50;">libraries</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#768390;"># commonMain</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose.multiplatform = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose.multiplatform&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-multiplatform&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># androidMain</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose.multiplatform-android = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose.multiplatform-android&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-multiplatform&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># iosArm64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose.multiplatform-iosarm64 = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose.multiplatform-iosarm64&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-multiplatform&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># iosX64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose.multiplatform-iosx64 = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose.multiplatform-iosx64&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-multiplatform&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># iosSimulatorArm64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose.multiplatform-iossimulatorarm64 = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose.multiplatform-iossimulatorarm64&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-multiplatform&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># desktopMain</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose.multiplatform-desktop = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose.multiplatform-desktop&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-multiplatform&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在你的项目 <code>build.gradle.kts</code> 中配置依赖。</p><p>如果你在普通的项目中使用多平台依赖，你只需要按需部署对应平台后缀的依赖即可。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.multiplatform.android)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.multiplatform.iosarm64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.multiplatform.iosx64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.multiplatform.iossimulatorarm64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.multiplatform.desktop)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你在多平台项目中使用多平台依赖，你需要在 <code>commonMain</code> 中添加 <code>compose-multiplatform</code> 依赖。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">kotlin</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">sourceSets</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> commonMain </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getting</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">dependencies</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.multiplatform)</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请将 <code>&lt;version&gt;</code> 修改为此文档顶部显示的版本。</p><h3 id="传统方式" tabindex="-1"><a class="header-anchor" href="#传统方式" aria-hidden="true">#</a> 传统方式</h3><p>在你的项目 <code>build.gradle.kts</code> 中配置依赖。</p><p>如果你在普通的项目中使用多平台依赖，你只需要按需部署对应平台后缀的依赖即可。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-multiplatform-android:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-multiplatform-iosarm64:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-multiplatform-iosx64:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-multiplatform-iossimulatorarm64:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-multiplatform-desktop:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你在多平台项目中使用多平台依赖，你需要在 <code>commonMain</code> 中添加 <code>compose-multiplatform</code> 依赖。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">kotlin</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">sourceSets</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> commonMain </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getting</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">dependencies</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-multiplatform:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请将 <code>&lt;version&gt;</code> 修改为此文档顶部显示的版本。</p><h2 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍" aria-hidden="true">#</a> 功能介绍</h2>`,28),b={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform",target:"_blank",rel:"noopener noreferrer"},D=s("p",null,[n("为了能让适应了原生 Android 开发的开发者们能够更快地对各种平台进行适配，借助于 Kotlin Multiplatform 与 Jetpack Compose 的跨平台特性，"),s("code",null,"BetterAndroid"),n(" 无缝地提供了多平台支持。")],-1),C=s("p",null,"以下是目前正在开发、开发完成的功能。",-1),h={href:"https://github.com/BetterAndroid/BetterAndroid/issues",target:"_blank",rel:"noopener noreferrer"},F=t('<p>标识为 “✅” 的功能表示可用，“❎” 表示平台不支持，“🚧” 表示准备或正在开发中 (WIP)，“🔨” 表示计划开发。</p><table><thead><tr><th>功能名称</th><th>描述</th><th style="text-align:center;">Android</th><th style="text-align:center;">iOS</th><th style="text-align:center;">Desktop</th></tr></thead><tbody><tr><td><code>BackHandler</code></td><td>为 Android 提供系统返回事件的支持</td><td style="text-align:center;">✅</td><td style="text-align:center;">❎</td><td style="text-align:center;">❎</td></tr><tr><td><code>PlatformWindowInsets</code></td><td>为移动平台提供对 Window Insets 的支持</td><td style="text-align:center;">🚧</td><td style="text-align:center;">🚧</td><td style="text-align:center;">❎</td></tr><tr><td><code>PlatformNotificationManager</code></td><td>为系统提供对发送通知、通知管理的支持</td><td style="text-align:center;">🔨</td><td style="text-align:center;">🔨</td><td style="text-align:center;">🔨</td></tr><tr><td><code>PlatformSystemBarsController</code></td><td>为移动平台提供对系统栏相关功能控制的支持</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">❎</td></tr><tr><td><code>PlatformDisplayController</code></td><td>为移动平台提供对屏幕旋转、屏幕亮度控制的支持</td><td style="text-align:center;">🚧</td><td style="text-align:center;">🚧</td><td style="text-align:center;">❎</td></tr><tr><td><code>PlatformHwSensorController</code></td><td>为移动平台提供对硬件传感器的支持 (例如振动)</td><td style="text-align:center;">🔨</td><td style="text-align:center;">🔨</td><td style="text-align:center;">❎</td></tr></tbody></table><p>已经开发完成的功能将在下方对使用方法进行详细介绍。</p><h3 id="初始化配置" tabindex="-1"><a class="header-anchor" href="#初始化配置" aria-hidden="true">#</a> 初始化配置</h3>',4),f={class:"custom-container tip"},g=s("p",{class:"custom-container-title"},"本节内容",-1),k=s("blockquote",null,[s("p",null,"iosMain")],-1),_={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.platform.uiviewcontroller/-app-component-u-i-view-controller",target:"_blank",rel:"noopener noreferrer"},S=s("p",null,[n("基础组件 "),s("code",null,"UIViewController"),n("。")],-1),x={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.platform/-app-component-u-i-view-controller",target:"_blank",rel:"noopener noreferrer"},q=s("p",null,[n("适用于创建 Compose 起始点的 "),s("code",null,"UIViewController"),n(" 扩展。")],-1),E=s("p",null,"在开始之前，我们建议你按照以下方式对项目结构进行配置。",-1),w={class:"custom-container tip"},I=s("p",{class:"custom-container-title"},"小提示",-1),M={href:"https://kmp.jetbrains.com",target:"_blank",rel:"noopener noreferrer"},P=t(`<h4 id="通用部分" tabindex="-1"><a class="header-anchor" href="#通用部分" aria-hidden="true">#</a> 通用部分</h4><p>请在 <code>commonMain</code> 中创建一个 <code>App.kt</code>，它将作为 Compose 的起始点。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F69D50;">@Composable</span></span>
<span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">App</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 你的 Compose 内容</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="android-平台" tabindex="-1"><a class="header-anchor" href="#android-平台" aria-hidden="true">#</a> Android 平台</h4>`,5),K=s("code",null,"AppComponentActivty",-1),U=t(`<blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MainActivity</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">AppComponentActivity</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState: </span><span style="color:#F69D50;">Bundle</span><span style="color:#ADBAC7;">?) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">setContent</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">App</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="ios-平台" tabindex="-1"><a class="header-anchor" href="#ios-平台" aria-hidden="true">#</a> iOS 平台</h4><div class="custom-container warning"><p class="custom-container-title">注意</p><p>你需要有一台能够运行 macOS 并正确配置 Xcode 环境的电脑或虚拟机。</p></div><p>首先，你需要手动创建一个 iOS App 的 Xcode 项目，语言请选择 Swift，并在 <code>Interface</code> 一栏选择 <code>Storyboard</code>。</p><p>然后，请在 <code>iosMain</code> 中的 <code>MainViewController.kt</code> 文件中使用以下方式创建一个 <code>AppComponentUIViewController</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createMainViewController</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">AppComponentUIViewController</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">App</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，请确定你在 <code>build.gradle.kts</code> 中为 iOS 项目设置的共享模块名称。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">kotlin</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">listOf</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">iosX64</span><span style="color:#ADBAC7;">(),</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">iosArm64</span><span style="color:#ADBAC7;">(),</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">iosSimulatorArm64</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">    ).</span><span style="color:#DCBDFB;">forEach</span><span style="color:#ADBAC7;"> { iosTarget </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        iosTarget.binaries.</span><span style="color:#DCBDFB;">framework</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 设置共享模块名称</span></span>
<span class="line"><span style="color:#ADBAC7;">            baseName </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;ComposeApp&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// 建议设置为静态库</span></span>
<span class="line"><span style="color:#ADBAC7;">            isStatic </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，请在 iOS 项目中对 <code>AppDelegate.swift</code> 文件进行以下配置。</p><p>如果你的 iOS 项目是使用 Swift UI 创建的，请手动创建这个文件并移除使用 Swift UI 创建的 <code>SwiftApp.swift</code> 相关文件。</p><blockquote><p>示例如下</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">UIKit</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComposeApp</span><span style="color:#ADBAC7;"> </span><span style="color:#768390;">// 这里为你的共享模块名称</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">@UIApplicationMain</span></span>
<span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AppDelegate</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">UIResponder</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">UIApplicationDelegate </span><span style="color:#ADBAC7;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> window: UIWindow</span><span style="color:#F47067;">?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">func</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">application</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">_</span><span style="color:#ADBAC7;"> application: UIApplication, </span><span style="color:#DCBDFB;">didFinishLaunchingWithOptions</span><span style="color:#ADBAC7;"> launchOptions:</span></span>
<span class="line"><span style="color:#ADBAC7;">        [UIApplication.LaunchOptionsKey: </span><span style="color:#6CB6FF;">Any</span><span style="color:#ADBAC7;">]</span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Bool</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 创建一个新的 UIWindow</span></span>
<span class="line"><span style="color:#ADBAC7;">        window </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">UIWindow</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">frame</span><span style="color:#ADBAC7;">: UIScreen.main.bounds)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 设置根视图的控制器</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// MainViewControllerKt 是 ComposeApp.h 中自动生成的 Kotlin 代码</span></span>
<span class="line"><span style="color:#ADBAC7;">        window</span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;">.rootViewController </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> MainViewControllerKt.</span><span style="color:#6CB6FF;">createMainViewController</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 使其可见</span></span>
<span class="line"><span style="color:#ADBAC7;">        window</span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;">.</span><span style="color:#6CB6FF;">makeKeyAndVisible</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>不要使用 <code>UIViewControllerRepresentable</code> 为 Swift UI 创建 <code>UIViewController</code>，虽然这是目前 Kotlin Multiplatform Wizard 自动为你生成的代码， 但是这会导致 <a href="#%E7%B3%BB%E7%BB%9F%E6%A0%8F-%E7%8A%B6%E6%80%81%E6%A0%8F%E3%80%81%E5%AF%BC%E8%88%AA%E6%A0%8F%E3%80%81home-indicator-%E7%AD%89">系统栏 (状态栏、导航栏、Home Indicator 等)</a> 相关功能失效， 因为 Swift UI 会接管整个视图的状态，此时，你只能在 Swift UI 中控制系统栏。</p></div><h4 id="desktop-平台" tabindex="-1"><a class="header-anchor" href="#desktop-平台" aria-hidden="true">#</a> Desktop 平台</h4><p>请在对应的 Java 项目 <code>Main.kt</code> 中使用以下方式创建 Compose 的起始点。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">application</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">Window</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        onCloseRequest </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ::</span><span style="color:#DCBDFB;">exitApplication</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 设置窗口标题</span></span>
<span class="line"><span style="color:#ADBAC7;">        title </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My App&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 设置窗口大小</span></span>
<span class="line"><span style="color:#ADBAC7;">        state </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">rememberWindowState</span><span style="color:#ADBAC7;">(width </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">300</span><span style="color:#ADBAC7;">.dp, height </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">500</span><span style="color:#ADBAC7;">.dp)</span></span>
<span class="line"><span style="color:#ADBAC7;">    ) { </span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">App</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="系统事件" tabindex="-1"><a class="header-anchor" href="#系统事件" aria-hidden="true">#</a> 系统事件</h3>`,21),H={class:"custom-container tip"},V=s("p",{class:"custom-container-title"},"本节内容",-1),O=s("blockquote",null,[s("p",null,"commonMain")],-1),W={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.backpress/-back-handler",target:"_blank",rel:"noopener noreferrer"},z=s("p",null,"适用于系统返回事件的扩展。",-1),L=s("p",null,[n("虽然 "),s("code",null,"androidx.activity:activity-compose"),n(" 提供了 "),s("code",null,"BackHandler"),n("，但是它只能在 Android 中使用。")],-1),N=s("p",null,[s("code",null,"BetterAndroid"),n(" 提供了 "),s("code",null,"BackHandler"),n(" 的多平台分发支持，你可以直接在 "),s("code",null,"commonMain"),n(" 中使用它，但是它仅会在 Android 平台中生效。")],-1),R=s("code",null,"BackHandler",-1),T=s("code",null,"BackPressedController",-1),X=s("code",null,"AppComponentActivty",-1),J=s("code",null,"Activity",-1),G=s("code",null,"IBackPressedController",-1),j=t(`<p>下面是一个使用示例，它与 <code>androidx.activity:activity-compose</code> 中提供的 <code>BackHandler</code> 用法完全相同。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 创建启用状态</span></span>
<span class="line"><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> enabled </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">remember</span><span style="color:#ADBAC7;"> { </span><span style="color:#DCBDFB;">mutableStateOf</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">) }</span></span>
<span class="line"><span style="color:#768390;">// 创建 BackHandler</span></span>
<span class="line"><span style="color:#DCBDFB;">BackHandler</span><span style="color:#ADBAC7;">(enabled) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 处理返回事件</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="系统栏-状态栏、导航栏、home-indicator-等" tabindex="-1"><a class="header-anchor" href="#系统栏-状态栏、导航栏、home-indicator-等" aria-hidden="true">#</a> 系统栏 (状态栏、导航栏、Home Indicator 等)</h3>`,4),Q={class:"custom-container tip"},Y=s("p",{class:"custom-container-title"},"本节内容",-1),Z=s("blockquote",null,[s("p",null,"commonMain")],-1),$={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.systembar/-platform-system-bars-controller",target:"_blank",rel:"noopener noreferrer"},ss=s("p",null,"Android、iOS 的系统栏控制器。",-1),ns={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.systembar/-native-system-bars-controller",target:"_blank",rel:"noopener noreferrer"},as=s("p",null,"Android、iOS 对应的原生系统栏控制器。",-1),es={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.systembar/-platform-system-bar-style",target:"_blank",rel:"noopener noreferrer"},ls=s("p",null,"系统栏的样式。",-1),os={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.systembar/-platform-system-bars",target:"_blank",rel:"noopener noreferrer"},ts=s("p",null,"系统栏的类型。",-1),ps={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.systembar/-platform-system-bar-behavior",target:"_blank",rel:"noopener noreferrer"},rs=s("p",null,"系统栏的行为。",-1),is={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.systembar/remember-system-bars-controller",target:"_blank",rel:"noopener noreferrer"},cs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.systembar/native-controller",target:"_blank",rel:"noopener noreferrer"},ds=s("p",null,"适用于系统栏的扩展。",-1),ms=s("blockquote",null,[s("p",null,"iosMain")],-1),As={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.platform.systembar/-system-bars-controller",target:"_blank",rel:"noopener noreferrer"},ys=s("p",null,"系统栏控制器。",-1),us={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.platform.systembar.style/-system-bar-style",target:"_blank",rel:"noopener noreferrer"},Bs=s("p",null,"系统栏的样式。",-1),vs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.platform.systembar.type/-system-bars",target:"_blank",rel:"noopener noreferrer"},bs=s("p",null,"系统栏的类型。",-1),Ds={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.platform.systembar.type/-system-bar-behavior",target:"_blank",rel:"noopener noreferrer"},Cs=s("p",null,"系统栏的行为。",-1),hs=t('<p>在 Android、iOS 中，你都需要对系统提供的状态栏、导航栏 (Home Indicator) 进行控制和调整以便给用户带来更好的体验。</p><p>为此 <code>BetterAndroid</code> 为你提供了 <code>PlatformSystemBarsController</code>，它能够通过通用 API 来轻松实现对每个平台系统栏的控制。</p><p><code>PlatformSystemBarsController</code> 的工作原理是通过 <code>NativeSystemBarsController</code> 根据平台的不同而分发到对应的原生控制器。</p><p>在开始使用前，确保你已经阅读了 <a href="#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE">初始化配置</a> 并对当前项目完成了相关配置。</p>',4),Fs=s("code",null,"PlatformSystemBarsController",-1),fs=s("code",null,"SystemBarsController",-1),gs=s("code",null,"AppComponentActivty",-1),ks=s("code",null,"Activity",-1),_s=s("code",null,"ISystemBarsController",-1),Ss=t(`<p>你可以通过以下方式来在 Compose 中全局得到 <code>PlatformSystemBarsController</code> 对象。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 通过状态管理获取 PlatformSystemBarsController</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> systemBars </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">rememberSystemBarsController</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>在使用 <code>rememberSystemBarsController</code> 时，如果原生的 <code>SystemBarsController</code> 未被初始化，它将会自动调用 <code>init</code> 进行初始化， 为了避免界面效果出现问题，你应该确保在每个平台的配置阶段就已经完成了初始化操作，否则你应该确保 <code>rememberSystemBarsController</code> 在所有内容开始绘制前进行调用。</p></div><p>下面是 <code>PlatformSystemBarsController</code> 的详细用法介绍。</p>`,5),xs=t(`<p>设置系统栏的行为。</p><p>这决定了显示或隐藏系统栏时由系统控制的行为。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">systemBars.behavior </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> PlatformSystemBarBehavior.Immersive</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下是 <code>PlatformSystemBarBehavior</code> 中提供的全部行为，标有 <code>*</code> 的为默认行为。</p><table><thead><tr><th>行为</th><th style="text-align:center;">平台</th><th>描述</th></tr></thead><tbody><tr><td><code>Default</code></td><td style="text-align:center;">全部</td><td>由系统控制的默认行为</td></tr><tr><td>*<code>Immersive</code></td><td style="text-align:center;">Android</td><td>在全屏时可由手势滑动弹出并显示为半透明的系统栏，并在一段时间后继续隐藏</td></tr><tr><td></td><td style="text-align:center;">iOS</td><td>当状态栏隐藏时，可以通过系统手势暂时显示系统栏，但一段时间后系统栏会继续隐藏</td></tr></tbody></table><p>显示、隐藏系统栏。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 进入沉浸模式 (全屏模式)</span></span>
<span class="line"><span style="color:#768390;">// 同时隐藏状态栏和导航栏、Home Indicator</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">hide</span><span style="color:#ADBAC7;">(PlatformSystemBars.All)</span></span>
<span class="line"><span style="color:#768390;">// 单独控制状态栏和导航栏</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">hide</span><span style="color:#ADBAC7;">(PlatformSystemBars.StatusBars)</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">hide</span><span style="color:#ADBAC7;">(PlatformSystemBars.NavigationBars)</span></span>
<span class="line"><span style="color:#768390;">// 退出沉浸模式 (全屏模式)</span></span>
<span class="line"><span style="color:#768390;">// 同时显示状态栏和导航栏、Home Indicator</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">show</span><span style="color:#ADBAC7;">(PlatformSystemBars.All)</span></span>
<span class="line"><span style="color:#768390;">// 单独控制状态栏和导航栏、Home Indicator</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">show</span><span style="color:#ADBAC7;">(PlatformSystemBars.StatusBars)</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">show</span><span style="color:#ADBAC7;">(PlatformSystemBars.NavigationBars)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置系统栏的样式。</p><p>你可以自定义状态栏、导航栏、Home Indicator 的外观。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>在 Android 6.0 以下系统中，状态栏的内容不支持反色，如果你设置了亮色则会自动处理为半透明遮罩，但是对于 MIUI、Flyme 自行添加了反色功能的系统将使用其私有方案实现反色效果。</p><p>在 Android 8 以下系统中，导航栏的内容不支持反色，处理方式同上。</p><p>在 iOS 中，Home Indicator 不支持设置 <code>darkContent</code>，它的颜色是由系统控制的，但是你可以为其设置背景颜色。</p></div><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 设置状态栏的样式</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.statusBarStyle </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">PlatformSystemBarStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置背景颜色</span></span>
<span class="line"><span style="color:#ADBAC7;">    color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置内容颜色</span></span>
<span class="line"><span style="color:#ADBAC7;">    darkContent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 设置导航栏、Home Indicator 的样式</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.navigationBarStyle </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">PlatformSystemBarStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置背景颜色</span></span>
<span class="line"><span style="color:#ADBAC7;">    color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置内容颜色</span></span>
<span class="line"><span style="color:#ADBAC7;">    darkContent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 你可以一次性设置状态栏和导航栏、Home Indicator 的样式</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">setStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    statusBar </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">PlatformSystemBarStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White,</span></span>
<span class="line"><span style="color:#ADBAC7;">        darkContent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">    ),</span></span>
<span class="line"><span style="color:#ADBAC7;">    navigationBar </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">PlatformSystemBarStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White,</span></span>
<span class="line"><span style="color:#ADBAC7;">        darkContent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 你也可以同时设置状态栏和导航栏、Home Indicator 的样式</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">setStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    style </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">PlatformSystemBarStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White,</span></span>
<span class="line"><span style="color:#ADBAC7;">        darkContent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是 <code>PlatformSystemBarStyle</code> 中提供的预置样式，标有 <code>*</code> 的为默认样式。</p><table><thead><tr><th>样式</th><th>描述</th></tr></thead><tbody><tr><td><code>Auto</code></td><td>系统深色模式下为纯黑背景 + 浅色内容颜色，浅色模式下为纯白背景 + 深色内容颜色</td></tr><tr><td>*<code>AutoTransparent</code></td><td>系统深色模式下为浅色内容颜色，浅色模式下为深色内容颜色，背景透明</td></tr><tr><td><code>Light</code></td><td>纯白背景 + 深色内容颜色</td></tr><tr><td><code>LightScrim</code></td><td>半透明纯白背景 + 深色内容颜色</td></tr><tr><td><code>LightTransparent</code></td><td>透明背景 + 深色内容颜色</td></tr><tr><td><code>Dark</code></td><td>纯黑背景 + 浅色内容颜色</td></tr><tr><td><code>DarkScrim</code></td><td>半透明纯黑背景 + 浅色内容颜色</td></tr><tr><td><code>DarkTransparent</code></td><td>透明背景 + 浅色内容颜色</td></tr></tbody></table><p>获取原生控制器。</p><p>你可以通过以下方式在对应的平台中获取原生控制器，在 <code>commonMain</code> 或不支持的平台中使用将始终返回 <code>null</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 获取原生控制器</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> nativeController </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> systemBars.nativeController</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,20),qs={class:"custom-container tip"},Es=s("p",{class:"custom-container-title"},"小提示",-1),ws=s("code",null,"BetterAndroid",-1),Is=s("code",null,"SystemBarsController",-1);function Ms(Ps,Ks){const e=p("ExternalLinkIcon"),l=p("RouterLink");return i(),c("div",null,[m,s("div",A,[y,s("p",null,[n("此模块尚在开发与测试，在 "),u,n(" 版本正式发布前 API 可能会发生变化，欢迎前往 "),s("a",B,[n("GitHub Issues"),a(e)]),n(" 向我们提出建议。")])]),v,s("p",null,[n("你可以 "),s("a",b,[n("点击这里"),a(e)]),n(" 查看 KDoc。")]),D,C,s("p",null,[n("我们欢迎更多的开发者参与到开发中来，如果可能，欢迎提交 PR 为此项目贡献或通过 "),s("a",h,[n("GitHub Issues"),a(e)]),n(" 向我们提出建议。")]),F,s("div",f,[g,k,s("p",null,[s("a",_,[n("AppComponentUIViewController"),a(e)])]),S,s("p",null,[s("a",x,[n("UIViewController → AppComponentUIViewController"),a(e)])]),q]),E,s("div",w,[I,s("p",null,[n("我们建议并参考 "),a(l,{to:"/zh-cn/guide/quick-start.html#%E9%A1%B9%E7%9B%AE%E6%A8%A1%E7%89%88"},{default:o(()=>[n("快速开始 → 项目模版")]),_:1}),n(" 来创建项目以免去手动配置。")]),s("p",null,[n("你也可以使用 "),s("a",M,[n("Kotlin Multiplatform Wizard"),a(e)]),n(" 以自动帮你完成 iOS 项目部分的 Gradle 脚本编译配置。")])]),P,s("p",null,[n("首先，请在对应的 Android 项目中导入 "),a(l,{to:"/zh-cn/library/ui-component.html"},{default:o(()=>[n("ui-component")]),_:1}),n(" 模块。")]),s("p",null,[n("然后，请参考 "),a(l,{to:"/zh-cn/library/ui-component.html#activity"},{default:o(()=>[n("ui-component → Activity")]),_:1}),n(" 使用 "),K,n(" 作为 Compose 的起始点。")]),U,s("div",H,[V,O,s("p",null,[s("a",W,[n("BackHandler → BackHandler"),a(e)])]),z]),L,N,s("p",null,[R,n(" 在 Android 中使用 "),a(l,{to:"/zh-cn/library/ui-component.html#%E7%B3%BB%E7%BB%9F%E4%BA%8B%E4%BB%B6"},{default:o(()=>[n("ui-component → 系统事件")]),_:1}),n(" 中的 "),T,n(" 实现， 你可以参考 "),a(l,{to:"/zh-cn/library/ui-component.html#activity"},{default:o(()=>[n("ui-component → Activity")]),_:1}),n(" 使用 "),X,n(" 或为你的 "),J,n(" 手动实现 "),G,n(" 接口。")]),j,s("div",Q,[Y,Z,s("p",null,[s("a",$,[n("PlatformSystemBarsController"),a(e)])]),ss,s("p",null,[s("a",ns,[n("NativeSystemBarsController"),a(e)])]),as,s("p",null,[s("a",es,[n("PlatformSystemBarStyle"),a(e)])]),ls,s("p",null,[s("a",os,[n("PlatformSystemBars"),a(e)])]),ts,s("p",null,[s("a",ps,[n("PlatformSystemBarBehavior"),a(e)])]),rs,s("p",null,[s("a",is,[n("SystemBars → rememberSystemBarsController"),a(e)])]),s("p",null,[s("a",cs,[n("SystemBars → nativeController"),a(e)])]),ds,ms,s("p",null,[s("a",As,[n("SystemBarsController"),a(e)])]),ys,s("p",null,[s("a",us,[n("SystemBarStyle"),a(e)])]),Bs,s("p",null,[s("a",vs,[n("SystemBars"),a(e)])]),bs,s("p",null,[s("a",Ds,[n("SystemBarBehavior"),a(e)])]),Cs]),hs,s("p",null,[Fs,n(" 在 Android 中使用 "),a(l,{to:"/zh-cn/library/ui-component.html#%E7%B3%BB%E7%BB%9F%E6%A0%8F-%E7%8A%B6%E6%80%81%E6%A0%8F%E3%80%81%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%AD%89"},{default:o(()=>[n("ui-component → 系统栏 (状态栏、导航栏等)")]),_:1}),n(" 中的 "),fs,n(" 实现， 你可以参考 "),a(l,{to:"/zh-cn/library/ui-component.html#activity"},{default:o(()=>[n("ui-component → Activity")]),_:1}),n(" 使用 "),gs,n(" 或为你的 "),ks,n(" 手动实现 "),_s,n(" 接口。")]),Ss,s("p",null,[n("这里的大部分用法将与 "),a(l,{to:"/zh-cn/library/ui-component.html#%E7%B3%BB%E7%BB%9F%E6%A0%8F-%E7%8A%B6%E6%80%81%E6%A0%8F%E3%80%81%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%AD%89"},{default:o(()=>[n("ui-component → 系统栏 (状态栏、导航栏等)")]),_:1}),n(" 中保持一致。")]),xs,s("div",qs,[Es,s("p",null,[ws,n(" 同样为 iOS 提供了一个原生的 "),Is,n("， 它的用法与 "),a(l,{to:"/zh-cn/library/ui-component.html#%E7%B3%BB%E7%BB%9F%E6%A0%8F-%E7%8A%B6%E6%80%81%E6%A0%8F%E3%80%81%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%AD%89"},{default:o(()=>[n("ui-component → 系统栏 (状态栏、导航栏等)")]),_:1}),n(" 除了初始化功能外基本保持一致，通常情况下你应该不需要直接使用它，这里也不再进行详细的介绍。")])])])}const Hs=r(d,[["render",Ms],["__file","compose-multiplatform.html.vue"]]);export{Hs as default};
