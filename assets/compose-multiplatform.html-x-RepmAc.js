import{_ as i,r,o as p,c,a as s,b as e,d as n,w as l,e as t}from"./app-ewiN1Yda.js";const d={},m=t('<h1 id="compose-multiplatform" tabindex="-1"><a class="header-anchor" href="#compose-multiplatform" aria-hidden="true">#</a> compose-multiplatform</h1><p><img src="https://img.shields.io/maven-central/v/com.highcapable.betterandroid/compose-multiplatform?logo=apachemaven&amp;logoColor=orange&amp;style=flat-square" alt="Maven Central"><span style="margin-left:5px;"></span><img src="https://img.shields.io/maven-metadata/v?metadataUrl=https%3A%2F%2Fraw.githubusercontent.com%2FHighCapable%2Fmaven-repository%2Frefs%2Fheads%2Fmain%2Frepository%2Freleases%2Fcom%2Fhighcapable%2Fbetterandroid%2Fcompose-multiplatform%2Fmaven-metadata.xml&amp;logo=apachemaven&amp;logoColor=orange&amp;label=highcapable-maven-releases&amp;style=flat-square" alt="Maven metadata URL"><span style="margin-left:5px;"></span><img src="https://img.shields.io/badge/Min SDK-21-orange?logo=android&amp;style=flat-square" alt="Android Min SDK"></p><p>This is a dependency for Jetpack Compose&#39;s multi-platform features.</p><p>Currently supported platforms: Android, iOS, Desktop (JVM).</p>',4),u={class:"custom-container warning"},y=s("p",{class:"custom-container-title"},"Notice",-1),A=s("p",null,[e("This module is still under development and testing, and the API may change before the "),s("code",null,"1.0.0"),e(" version is officially released.")],-1),b={href:"https://github.com/BetterAndroid/BetterAndroid/issues",target:"_blank",rel:"noopener noreferrer"},h=t(`<h2 id="configure-dependency" tabindex="-1"><a class="header-anchor" href="#configure-dependency" aria-hidden="true">#</a> Configure Dependency</h2><p>You can add this module to your project using the following method.</p><p>This is a Kotlin Multiplatform dependency, you need the <code>org.jetbrains.kotlin.multiplatform</code> plugin to apply the relevant dependencies.</p><h3 id="sweetdependency-recommended" tabindex="-1"><a class="header-anchor" href="#sweetdependency-recommended" aria-hidden="true">#</a> SweetDependency (Recommended)</h3><p>Add dependencies to your project&#39;s <code>SweetDependency</code> configuration file.</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#8DDB8C;">libraries</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#8DDB8C;">com.highcapable.betterandroid</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># commonMain</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-multiplatform</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">+</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># androidMain</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-multiplatform-android</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-multiplatform</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># iosArm64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-multiplatform-iosarm64</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-multiplatform</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># iosX64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-multiplatform-iosx64</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-multiplatform</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># iosSimulatorArm64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-multiplatform-iossimulatorarm64</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-multiplatform</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;"># desktopMain</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">compose-multiplatform-desktop</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version-ref</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">&lt;this&gt;::compose-multiplatform</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Configure dependencies in your project&#39;s <code>build.gradle.kts</code>.</p><p>If you use multi-platform dependencies in a regular project, you only need to deploy the corresponding platform suffix dependencies as needed.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.multiplatform.android)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.multiplatform.iosarm64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.multiplatform.iosx64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.multiplatform.iossimulatorarm64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.multiplatform.desktop)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you use multi-platform dependencies in a multi-platform project, you need to add the <code>compose-multiplatform</code> dependency in <code>commonMain</code>.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">kotlin</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">sourceSets</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> commonMain </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getting</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">dependencies</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.compose.multiplatform)</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="version-catalog" tabindex="-1"><a class="header-anchor" href="#version-catalog" aria-hidden="true">#</a> Version Catalog</h3><p>Add dependency in your project&#39;s <code>gradle/libs.versions.toml</code>.</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">[</span><span style="color:#F69D50;">versions</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-multiplatform = </span><span style="color:#96D0FF;">&quot;&lt;version&gt;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">[</span><span style="color:#F69D50;">libraries</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#768390;"># commonMain</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-multiplatform = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose.multiplatform&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-multiplatform&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># androidMain</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-multiplatform-android = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose.multiplatform-android&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-multiplatform&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># iosArm64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-multiplatform-iosarm64 = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose.multiplatform-iosarm64&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-multiplatform&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># iosX64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-multiplatform-iosx64 = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose.multiplatform-iosx64&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-multiplatform&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># iosSimulatorArm64Main</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-multiplatform-iossimulatorarm64 = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose.multiplatform-iossimulatorarm64&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-multiplatform&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;"># desktopMain</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-compose-multiplatform-desktop = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose.multiplatform-desktop&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-compose-multiplatform&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Configure dependencies in your project&#39;s <code>build.gradle.kts</code>.</p><p>If you use multi-platform dependencies in a regular project, you only need to deploy the corresponding platform suffix dependencies as needed.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.multiplatform.android)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.multiplatform.iosarm64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.multiplatform.iosx64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.multiplatform.iossimulatorarm64)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.multiplatform.desktop)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you use multi-platform dependencies in a multi-platform project, you need to add the <code>compose-multiplatform</code> dependency in <code>commonMain</code>.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">kotlin</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">sourceSets</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> commonMain </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getting</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">dependencies</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.compose.multiplatform)</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Please change <code>&lt;version&gt;</code> to the version displayed at the top of this document.</p><h3 id="traditional-method" tabindex="-1"><a class="header-anchor" href="#traditional-method" aria-hidden="true">#</a> Traditional Method</h3><p>Configure dependencies in your project&#39;s <code>build.gradle.kts</code>.</p><p>If you use multi-platform dependencies in a regular project, you only need to deploy the corresponding platform suffix dependencies as needed.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-multiplatform-android:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-multiplatform-iosarm64:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-multiplatform-iosx64:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-multiplatform-iossimulatorarm64:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-multiplatform-desktop:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you use multi-platform dependencies in a multi-platform project, you need to add the <code>compose-multiplatform</code> dependency in <code>commonMain</code>.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">kotlin</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">sourceSets</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> commonMain </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">getting</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">dependencies</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">                </span><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:compose-multiplatform:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">            }</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Please change <code>&lt;version&gt;</code> to the version displayed at the top of this document.</p><h2 id="function-introduction" tabindex="-1"><a class="header-anchor" href="#function-introduction" aria-hidden="true">#</a> Function Introduction</h2>`,28),v={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform",target:"_blank",rel:"noopener noreferrer"},B=s("p",null,[e("In order to allow developers who are adapted to native Android development to adapt to various platforms faster, "),s("code",null,"BetterAndroid"),e(" seamlessly provides multi-platform support with the help of the cross-platform features of Kotlin Multiplatform and Jetpack Compose.")],-1),D=s("p",null,"The following are the functions currently being developed and completed.",-1),C={href:"https://github.com/BetterAndroid/BetterAndroid/issues",target:"_blank",rel:"noopener noreferrer"},f=t('<p>Features marked with &quot;✅&quot; indicate available, &quot;❎&quot; indicates not supported by the platform, &quot;🚧&quot; indicates preparation or under development (WIP), and &quot;🔨&quot; indicates planned development.</p><table><thead><tr><th>Feature Name</th><th>Description</th><th style="text-align:center;">Android</th><th style="text-align:center;">iOS</th><th style="text-align:center;">Desktop</th></tr></thead><tbody><tr><td><code>BackHandler</code></td><td>System back pressed event for Android.</td><td style="text-align:center;">✅</td><td style="text-align:center;">❎</td><td style="text-align:center;">❎</td></tr><tr><td><code>PlatformWindowInsets</code></td><td>Window insets for mobile platforms.</td><td style="text-align:center;">🚧</td><td style="text-align:center;">🚧</td><td style="text-align:center;">❎</td></tr><tr><td><code>PlatformNotificationManager</code></td><td>Notifications post &amp; management to the system.</td><td style="text-align:center;">🔨</td><td style="text-align:center;">🔨</td><td style="text-align:center;">🔨</td></tr><tr><td><code>PlatformSystemBarsController</code></td><td>System bar-related controller for mobile platforms.</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td><td style="text-align:center;">❎</td></tr><tr><td><code>PlatformDisplayController</code></td><td>Screen rotation &amp; brightness controller for mobile platforms.</td><td style="text-align:center;">🚧</td><td style="text-align:center;">🚧</td><td style="text-align:center;">❎</td></tr><tr><td><code>PlatformHwSensorController</code></td><td>Hardware sensors (such as vibration) for mobile platforms.</td><td style="text-align:center;">🔨</td><td style="text-align:center;">🔨</td><td style="text-align:center;">❎</td></tr></tbody></table><p>The features that have been developed will be described in detail below.</p><h3 id="initial-configuration" tabindex="-1"><a class="header-anchor" href="#initial-configuration" aria-hidden="true">#</a> Initial Configuration</h3>',4),g={class:"custom-container tip"},F=s("p",{class:"custom-container-title"},"Contents of This Section",-1),k=s("blockquote",null,[s("p",null,"iosMain")],-1),_={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.platform.uiviewcontroller/-app-component-u-i-view-controller",target:"_blank",rel:"noopener noreferrer"},w=s("p",null,[e("Basic component "),s("code",null,"UIViewController"),e(".")],-1),S={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.platform/-app-component-u-i-view-controller",target:"_blank",rel:"noopener noreferrer"},x=s("p",null,[e("Extensions for "),s("code",null,"UIViewController"),e(" to creating a starting point for Compose.")],-1),q=s("p",null,"Before starting, we recommend that you configure your project structure as follows.",-1),I={class:"custom-container tip"},M=s("p",{class:"custom-container-title"},"Tips",-1),P={href:"https://kmp.jetbrains.com",target:"_blank",rel:"noopener noreferrer"},T=t(`<h4 id="general-section" tabindex="-1"><a class="header-anchor" href="#general-section" aria-hidden="true">#</a> General Section</h4><p>Please create an <code>App.kt</code> in <code>commonMain</code> which will serve as the starting point for Compose.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F69D50;">@Composable</span></span>
<span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">App</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Your composables content here.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="android-platform" tabindex="-1"><a class="header-anchor" href="#android-platform" aria-hidden="true">#</a> Android Platform</h4>`,5),j=s("code",null,"AppComponentActivty",-1),K=t(`<blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MainActivity</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">AppComponentActivity</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState: </span><span style="color:#F69D50;">Bundle</span><span style="color:#ADBAC7;">?) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">setContent</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">App</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="ios-platform" tabindex="-1"><a class="header-anchor" href="#ios-platform" aria-hidden="true">#</a> iOS Platform</h4><div class="custom-container warning"><p class="custom-container-title">Notice</p><p>You need to have a computer or virtual machine that can run macOS and have the Xcode environment configured correctly.</p></div><p>First, you need to manually create an iOS App Xcode project, select Swift as the language, and select <code>Storyboard</code> in the <code>Interface</code> column.</p><p>Then, create an <code>AppComponentUIViewController</code> in the <code>MainViewController.kt</code> file in <code>iosMain</code> using the following method.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">createMainViewController</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">AppComponentUIViewController</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">App</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, determine the shared module name you set in <code>build.gradle.kts</code> for your iOS project.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">kotlin</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">listOf</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">iosX64</span><span style="color:#ADBAC7;">(),</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">iosArm64</span><span style="color:#ADBAC7;">(),</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">iosSimulatorArm64</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">    ).</span><span style="color:#DCBDFB;">forEach</span><span style="color:#ADBAC7;"> { iosTarget </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">        iosTarget.binaries.</span><span style="color:#DCBDFB;">framework</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// Set the shared module name.</span></span>
<span class="line"><span style="color:#ADBAC7;">            baseName </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;ComposeApp&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#768390;">// It is recommended to set it as a static library.</span></span>
<span class="line"><span style="color:#ADBAC7;">            isStatic </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, make the following configurations to the <code>AppDelegate.swift</code> file in your iOS project.</p><p>If your iOS project was created using Swift UI, please create this file manually and remove the <code>SwiftApp.swift</code> related files created using Swift UI.</p><blockquote><p>The following example</p></blockquote><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">UIKit</span></span>
<span class="line"><span style="color:#F47067;">import</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">ComposeApp</span><span style="color:#ADBAC7;"> </span><span style="color:#768390;">// Here is your shared module name.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F47067;">@UIApplicationMain</span></span>
<span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">AppDelegate</span><span style="color:#ADBAC7;">: </span><span style="color:#6CB6FF;">UIResponder</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">UIApplicationDelegate </span><span style="color:#ADBAC7;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> window: UIWindow</span><span style="color:#F47067;">?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">func</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">application</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">_</span><span style="color:#ADBAC7;"> application: UIApplication, </span><span style="color:#DCBDFB;">didFinishLaunchingWithOptions</span><span style="color:#ADBAC7;"> launchOptions:</span></span>
<span class="line"><span style="color:#ADBAC7;">        [UIApplication.LaunchOptionsKey: </span><span style="color:#6CB6FF;">Any</span><span style="color:#ADBAC7;">]</span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;">) </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">Bool</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Create a new UIWindow.</span></span>
<span class="line"><span style="color:#ADBAC7;">        window </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">UIWindow</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">frame</span><span style="color:#ADBAC7;">: UIScreen.main.bounds)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Set the controller of the root view.</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// MainViewControllerKt is the automatically generated Kotlin code in ComposeApp.h.</span></span>
<span class="line"><span style="color:#ADBAC7;">        window</span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;">.rootViewController </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> MainViewControllerKt.</span><span style="color:#6CB6FF;">createMainViewController</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Make it visible.</span></span>
<span class="line"><span style="color:#ADBAC7;">        window</span><span style="color:#F47067;">?</span><span style="color:#ADBAC7;">.</span><span style="color:#6CB6FF;">makeKeyAndVisible</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">Notice</p><p>Do not use <code>UIViewControllerRepresentable</code> to create <code>UIViewController</code> for Swift UI, although this is currently the code that the Kotlin Multiplatform Wizard automatically generates for you.</p><p>But this will cause the related functions of <a href="#system-bars-status-bars-navigation-bars-home-indicator-etc">System Bars (Status Bars, Navigation Bars, Home Indicator, etc)</a> to fail, because Swift UI will take over the state of the entire view, at this time, you can only control system bars in Swift UI.</p></div><h4 id="desktop-platform" tabindex="-1"><a class="header-anchor" href="#desktop-platform" aria-hidden="true">#</a> Desktop Platform</h4><p>Please use the following method to create the starting point of Compose in the corresponding Java project <code>Main.kt</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">main</span><span style="color:#ADBAC7;">() </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">application</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">Window</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        onCloseRequest </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ::</span><span style="color:#DCBDFB;">exitApplication</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Set window title.</span></span>
<span class="line"><span style="color:#ADBAC7;">        title </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My App&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Set window size.</span></span>
<span class="line"><span style="color:#ADBAC7;">        state </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">rememberWindowState</span><span style="color:#ADBAC7;">(width </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">300</span><span style="color:#ADBAC7;">.dp, height </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">500</span><span style="color:#ADBAC7;">.dp)</span></span>
<span class="line"><span style="color:#ADBAC7;">    ) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">App</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="system-event" tabindex="-1"><a class="header-anchor" href="#system-event" aria-hidden="true">#</a> System Event</h3>`,21),U={class:"custom-container tip"},N=s("p",{class:"custom-container-title"},"Contents of This Section",-1),V=s("blockquote",null,[s("p",null,"commonMain")],-1),H={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.backpress/-back-handler",target:"_blank",rel:"noopener noreferrer"},O=s("p",null,"Extensions for system back pressed event.",-1),W=s("p",null,[e("Although "),s("code",null,"androidx.activity:activity-compose"),e(" provides "),s("code",null,"BackHandler"),e(", it can only be used in Android.")],-1),L=s("p",null,[s("code",null,"BetterAndroid"),e(" provides multi-platform distribution support for "),s("code",null,"BackHandler"),e(", you can use it directly in "),s("code",null,"commonMain"),e(", but it will only take effect on the Android platform.")],-1),E=s("code",null,"BackHandler",-1),Y=s("code",null,"BackPressedController",-1),z=s("code",null,"AppComponentActivty",-1),R=s("code",null,"IBackPressedController",-1),G=s("code",null,"Activity",-1),X=t(`<p>Below is a usage example that is identical to the <code>BackHandler</code> usage provided in <code>androidx.activity:activity-compose</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Create enabled state.</span></span>
<span class="line"><span style="color:#F47067;">var</span><span style="color:#ADBAC7;"> enabled </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">remember</span><span style="color:#ADBAC7;"> { </span><span style="color:#DCBDFB;">mutableStateOf</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">) }</span></span>
<span class="line"><span style="color:#768390;">// Create BackHandler.</span></span>
<span class="line"><span style="color:#DCBDFB;">BackHandler</span><span style="color:#ADBAC7;">(enabled) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Handle back pressed event.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="system-bars-status-bars-navigation-bars-home-indicator-etc" tabindex="-1"><a class="header-anchor" href="#system-bars-status-bars-navigation-bars-home-indicator-etc" aria-hidden="true">#</a> System Bars (Status Bars, Navigation Bars, Home Indicator, etc)</h3>`,4),J={class:"custom-container tip"},Q=s("p",{class:"custom-container-title"},"Contents of This Section",-1),Z=s("blockquote",null,[s("p",null,"commonMain")],-1),$={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.systembar/-platform-system-bars-controller",target:"_blank",rel:"noopener noreferrer"},ss=s("p",null,"System bars controller for Android and iOS.",-1),es={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.systembar/-native-system-bars-controller",target:"_blank",rel:"noopener noreferrer"},ns=s("p",null,"Native system bars controller corresponding to Android and iOS.",-1),as={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.systembar/-platform-system-bar-style",target:"_blank",rel:"noopener noreferrer"},os=s("p",null,"System bars style.",-1),ls={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.systembar/-platform-system-bars",target:"_blank",rel:"noopener noreferrer"},ts=s("p",null,"System bars type.",-1),rs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.systembar/-platform-system-bar-behavior",target:"_blank",rel:"noopener noreferrer"},is=s("p",null,"System bars behavior.",-1),ps={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.systembar/remember-system-bars-controller",target:"_blank",rel:"noopener noreferrer"},cs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.systembar/native-controller",target:"_blank",rel:"noopener noreferrer"},ds=s("p",null,"Extensions for system bars.",-1),ms=s("blockquote",null,[s("p",null,"iosMain")],-1),us={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.platform.systembar/-system-bars-controller",target:"_blank",rel:"noopener noreferrer"},ys=s("p",null,"System bars controller.",-1),As={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.platform.systembar.style/-system-bar-style",target:"_blank",rel:"noopener noreferrer"},bs=s("p",null,"System bars style.",-1),hs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.platform.systembar.type/-system-bars",target:"_blank",rel:"noopener noreferrer"},vs=s("p",null,"System bars type.",-1),Bs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/compose-multiplatform/compose-multiplatform/com.highcapable.betterandroid.compose.multiplatform.platform.systembar.type/-system-bar-behavior",target:"_blank",rel:"noopener noreferrer"},Ds=s("p",null,"System bars behavior.",-1),Cs=t('<p>In both Android and iOS, you need to control and adjust the status bars and navigation bars (home indicator) provided by the system to give users a better experience.</p><p>For this purpose, <code>BetterAndroid</code> provides you with <code>PlatformSystemBarsController</code>, which can easily control the system bars of each platform through a common API.</p><p>The working principle of <code>PlatformSystemBarsController</code> is to distribute it to the corresponding native controller according to different platforms through <code>NativeSystemBarsController</code>.</p><p>Before starting to use it, make sure you have read <a href="#initial-configuration">Initial Configuration</a> and completed the relevant configuration for the current project.</p>',4),fs=s("code",null,"PlatformSystemBarsController",-1),gs=s("code",null,"SystemBarsController",-1),Fs=s("code",null,"AppComponentActivty",-1),ks=s("code",null,"ISystemBarsController",-1),_s=s("code",null,"Activity",-1),ws=t(`<p>You can get the <code>PlatformSystemBarsController</code> object globally in Compose in the following way.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Get PlatformSystemBarsController through state management.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> systemBars </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">rememberSystemBarsController</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">Notice</p><p>When using <code>rememberSystemBarsController</code>, if the native <code>SystemBarsController</code> has not been initialized, it will automatically call <code>init</code> for initialization.</p><p>To avoid problems with interface performance, you should ensure that initialization operations are completed during the configuration phase of each platform, otherwise you should ensure that <code>rememberSystemBarsController</code> is called before all content starts to be drawn.</p></div><p>The following is a detailed usage introduction of <code>PlatformSystemBarsController</code>.</p>`,5),Ss=t(`<p>Set the behavior of system bars.</p><p>This determines the system-controlled behavior when showing or hiding system bars.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">systemBars.behavior </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> PlatformSystemBarBehavior.Immersive</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The following are all behaviors provided in <code>PlatformSystemBarBehavior</code>, those marked with <code>*</code> are the default behaviors.</p><table><thead><tr><th>Behavior</th><th style="text-align:center;">Platform</th><th>Description</th></tr></thead><tbody><tr><td><code>Default</code></td><td style="text-align:center;">All</td><td>Default behavior controlled by the system.</td></tr><tr><td>*<code>Immersive</code></td><td style="text-align:center;">Android</td><td>A system bar that can be popped up by gesture sliding in full screen and displayed as a translucent system bar, and continues to hide after a period of time.</td></tr><tr><td></td><td style="text-align:center;">iOS</td><td>The system bars can be revealed temporarily with system gestures when the status bars hide, but disappears after a period of time.</td></tr></tbody></table><p>Show, hide system bars.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Enter immersive mode (full screen mode).</span></span>
<span class="line"><span style="color:#768390;">// Hide status bars and navigation bars, home indicator at the same time.</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">hide</span><span style="color:#ADBAC7;">(PlatformSystemBars.All)</span></span>
<span class="line"><span style="color:#768390;">// Separately control the status bars and navigation bars, home indicator.</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">hide</span><span style="color:#ADBAC7;">(PlatformSystemBars.StatusBars)</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">hide</span><span style="color:#ADBAC7;">(PlatformSystemBars.NavigationBars)</span></span>
<span class="line"><span style="color:#768390;">// Exit immersive mode (full screen mode).</span></span>
<span class="line"><span style="color:#768390;">// Show status bars and navigation bars, home indicator at the same time.</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">show</span><span style="color:#ADBAC7;">(PlatformSystemBars.ALL)</span></span>
<span class="line"><span style="color:#768390;">// Separately control the status bars and navigation bars, home indicator.</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">show</span><span style="color:#ADBAC7;">(PlatformSystemBars.StatusBars)</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">show</span><span style="color:#ADBAC7;">(PlatformSystemBars.NavigationBars)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Set the style of the system bars.</p><p>You can customize the appearance of the status bars and navigation bars, home indicator.</p><div class="custom-container warning"><p class="custom-container-title">Notice</p><p>In systems below Android 6.0, the content of the status bars does not support inversion, if you set a bright color, it will be automatically processed as a semi-transparent mask.</p><p>However, for MIUI and Flyme systems that have added the inverse color function themselves, they will use their own private solutions to achieve the inverse color effect.</p><p>In systems below Android 8, the content of the navigation bars does not support inversion, and the processing method is the same as above.</p><p>In iOS, home indicator does not support setting <code>darkContent</code>, its color is controlled by the system, but you can set the background color for it.</p></div><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Set the style of the status bars.</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.statusBarStyle </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">PlatformSystemBarStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Set background color.</span></span>
<span class="line"><span style="color:#ADBAC7;">    color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Set content color.</span></span>
<span class="line"><span style="color:#ADBAC7;">    darkContent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// Set the style of the navigation bars, home indicator.</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.navigationBarStyle </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">PlatformSystemBarStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Set background color.</span></span>
<span class="line"><span style="color:#ADBAC7;">    color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Set content color.</span></span>
<span class="line"><span style="color:#ADBAC7;">    darkContent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// You can set the style of the status bars and navigation bars, home indicator at once.</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">setStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    statusBar </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">PlatformSystemBarStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White,</span></span>
<span class="line"><span style="color:#ADBAC7;">        darkContent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">    ),</span></span>
<span class="line"><span style="color:#ADBAC7;">    navigationBar </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">PlatformSystemBarStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White,</span></span>
<span class="line"><span style="color:#ADBAC7;">        darkContent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// You can also set the style of the status bars and navigation bars,</span></span>
<span class="line"><span style="color:#768390;">// home indicator at the same time.</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">setStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    style </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">PlatformSystemBarStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.White,</span></span>
<span class="line"><span style="color:#ADBAC7;">        darkContent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The following are the preset styles provided in <code>PlatformSystemBarStyle</code>, the ones marked with <code>*</code> are the default styles.</p><table><thead><tr><th>Style</th><th>Description</th></tr></thead><tbody><tr><td><code>Auto</code></td><td>The system dark mode is a pure black background + light content color, and the light mode is a pure white background + dark content color.</td></tr><tr><td>*<code>AutoTransparent</code></td><td>The light content color is used in the system dark mode, and the dark content color is used in the light mode, with a transparent background.</td></tr><tr><td><code>Light</code></td><td>Pure white background + dark content color.</td></tr><tr><td><code>LightScrim</code></td><td>Translucent pure white background + dark content color.</td></tr><tr><td><code>LightTransparent</code></td><td>Transparent background + dark content color.</td></tr><tr><td><code>Dark</code></td><td>Pure black background + light content color.</td></tr><tr><td><code>DarkScrim</code></td><td>Translucent solid black background + light content color.</td></tr><tr><td><code>DarkTransparent</code></td><td>Transparent background + light content color.</td></tr></tbody></table><p>Get the native controller.</p><p>You can obtain the native controller in the corresponding platform through the following methods, using <code>commonMain</code> or in unsupported platforms will always return <code>null</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Get the native controller.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> nativeController </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> systemBars.nativeController</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,20),xs={class:"custom-container tip"},qs=s("p",{class:"custom-container-title"},"Tips",-1),Is=s("code",null,"BetterAndroid",-1),Ms=s("code",null,"SystemBarsController",-1);function Ps(Ts,js){const a=r("ExternalLinkIcon"),o=r("RouterLink");return p(),c("div",null,[m,s("div",u,[y,A,s("p",null,[e("We welcome you to make suggestions to us at "),s("a",b,[e("GitHub Issues"),n(a)]),e(".")])]),h,s("p",null,[e("You can view the KDoc "),s("a",v,[e("click here"),n(a)]),e(".")]),B,D,s("p",null,[e("We welcome more developers to participate in the development, if possible, you are welcome to submit a PR to contribute to this project or make suggestions to us through "),s("a",C,[e("GitHub Issues"),n(a)]),e(".")]),f,s("div",g,[F,k,s("p",null,[s("a",_,[e("AppComponentUIViewController"),n(a)])]),w,s("p",null,[s("a",S,[e("UIViewController → AppComponentUIViewController"),n(a)])]),x]),q,s("div",I,[M,s("p",null,[e("We recommend and refer to "),n(o,{to:"/en/guide/quick-start.html#project-template"},{default:l(()=>[e("Quick Start → Project Template")]),_:1}),e(" to create a project without manual configuration.")]),s("p",null,[e("You can also use the "),s("a",P,[e("Kotlin Multiplatform Wizard"),n(a)]),e(" to automatically help you complete the Gradle script compilation configuration of the iOS project.")])]),T,s("p",null,[e("First, please import the "),n(o,{to:"/en/library/ui-component.html"},{default:l(()=>[e("ui-component")]),_:1}),e(" module in the corresponding Android project.")]),s("p",null,[e("Then, please refer to "),n(o,{to:"/en/library/ui-component.html#activity"},{default:l(()=>[e("ui-component → Activity")]),_:1}),e(" to use "),j,e(" as the starting point for Compose.")]),K,s("div",U,[N,V,s("p",null,[s("a",H,[e("BackHandler → BackHandler"),n(a)])]),O]),W,L,s("p",null,[E,e(" is implemented in Android using "),Y,e(" in "),n(o,{to:"/en/library/ui-component.html#system-event"},{default:l(()=>[e("ui-component → System Event")]),_:1}),e(", you can refer to "),n(o,{to:"/en/library/ui-component.html#activity"},{default:l(()=>[e("ui-component → Activity")]),_:1}),e(" to use "),z,e(" or manually implement the "),R,e(" interface for your "),G,e(".")]),X,s("div",J,[Q,Z,s("p",null,[s("a",$,[e("PlatformSystemBarsController"),n(a)])]),ss,s("p",null,[s("a",es,[e("NativeSystemBarsController"),n(a)])]),ns,s("p",null,[s("a",as,[e("PlatformSystemBarStyle"),n(a)])]),os,s("p",null,[s("a",ls,[e("PlatformSystemBars"),n(a)])]),ts,s("p",null,[s("a",rs,[e("PlatformSystemBarBehavior"),n(a)])]),is,s("p",null,[s("a",ps,[e("SystemBars → rememberSystemBarsController"),n(a)])]),s("p",null,[s("a",cs,[e("SystemBars → nativeController"),n(a)])]),ds,ms,s("p",null,[s("a",us,[e("SystemBarsController"),n(a)])]),ys,s("p",null,[s("a",As,[e("SystemBarStyle"),n(a)])]),bs,s("p",null,[s("a",hs,[e("SystemBars"),n(a)])]),vs,s("p",null,[s("a",Bs,[e("SystemBarBehavior"),n(a)])]),Ds]),Cs,s("p",null,[fs,e(" uses "),gs,e(" in "),n(o,{to:"/en/library/ui-component.html#system-bars-status-bars-navigation-bars-etc"},{default:l(()=>[e("ui-component → System bars (Status bars, Navigation bars, etc)")]),_:1}),e(" in Android accomplish, you can refer to "),n(o,{to:"/en/library/ui-component.html#activity"},{default:l(()=>[e("ui-component → Activity")]),_:1}),e(" to use "),Fs,e(" or manually implement the "),ks,e(" interface for your "),_s,e(".")]),ws,s("p",null,[e("Most of the usage here will be consistent with "),n(o,{to:"/en/library/ui-component.html#system-bars-status-bars-navigation-bars-etc"},{default:l(()=>[e("ui-component → System Bars (Status Bars, Navigation Bars, etc)")]),_:1}),e(".")]),Ss,s("div",xs,[qs,s("p",null,[Is,e(" also provides a native "),Ms,e(" for iOS, its usage is basically the same as "),n(o,{to:"/en/library/ui-component.html#system-bars-status-bars-navigation-bars-etc"},{default:l(()=>[e("ui-component → System Bars (Status Bars, Navigation Bars, etc)")]),_:1}),e(" except for the initialization function, normally you should not need to use it directly, and it will not be introduced in detail here.")])])])}const Us=i(d,[["render",Ps],["__file","compose-multiplatform.html.vue"]]);export{Us as default};
