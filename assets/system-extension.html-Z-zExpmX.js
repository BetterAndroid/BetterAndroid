import{_ as t,r as l,o as i,c as r,a as e,b as s,d as a,e as o}from"./app-ewiN1Yda.js";const p={},c=o(`<h1 id="system-extension" tabindex="-1"><a class="header-anchor" href="#system-extension" aria-hidden="true">#</a> system-extension</h1><p><img src="https://img.shields.io/maven-central/v/com.highcapable.betterandroid/system-extension?logo=apachemaven&amp;logoColor=orange&amp;style=flat-square" alt="Maven Central"><span style="margin-left:5px;"></span><img src="https://img.shields.io/maven-metadata/v?metadataUrl=https%3A%2F%2Fraw.githubusercontent.com%2FHighCapable%2Fmaven-repository%2Frefs%2Fheads%2Fmain%2Frepository%2Freleases%2Fcom%2Fhighcapable%2Fbetterandroid%2Fsystem-extension%2Fmaven-metadata.xml&amp;logo=apachemaven&amp;logoColor=orange&amp;label=highcapable-maven-releases&amp;style=flat-square" alt="Maven metadata URL"><span style="margin-left:5px;"></span><img src="https://img.shields.io/badge/Min SDK-21-orange?logo=android&amp;style=flat-square" alt="Android Min SDK"></p><p>This is a dependency for system layer related extensions.</p><h2 id="configure-dependency" tabindex="-1"><a class="header-anchor" href="#configure-dependency" aria-hidden="true">#</a> Configure Dependency</h2><p>You can add this module to your project using the following method.</p><h3 id="sweetdependency-recommended" tabindex="-1"><a class="header-anchor" href="#sweetdependency-recommended" aria-hidden="true">#</a> SweetDependency (Recommended)</h3><p>Add dependency in your project&#39;s <code>SweetDependency</code> configuration file.</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#8DDB8C;">libraries</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#8DDB8C;">com.highcapable.betterandroid</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">system-extension</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">+</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Configure dependency in your project&#39;s <code>build.gradle.kts</code>.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.system.extension)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="version-catalog" tabindex="-1"><a class="header-anchor" href="#version-catalog" aria-hidden="true">#</a> Version Catalog</h3><p>Add dependency in your project&#39;s <code>gradle/libs.versions.toml</code>.</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">[</span><span style="color:#F69D50;">versions</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-system-extension = </span><span style="color:#96D0FF;">&quot;&lt;version&gt;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">[</span><span style="color:#F69D50;">libraries</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-system-extension = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:system-extension&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-system-extension&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Configure dependency in your project&#39;s <code>build.gradle.kts</code>.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.system.extension)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Please change <code>&lt;version&gt;</code> to the version displayed at the top of this document.</p><h3 id="traditional-method" tabindex="-1"><a class="header-anchor" href="#traditional-method" aria-hidden="true">#</a> Traditional Method</h3><p>Configure dependency in your project&#39;s <code>build.gradle.kts</code>.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:system-extension:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Please change <code>&lt;version&gt;</code> to the version displayed at the top of this document.</p><h2 id="function-introduction" tabindex="-1"><a class="header-anchor" href="#function-introduction" aria-hidden="true">#</a> Function Introduction</h2>`,21),d={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension",target:"_blank",rel:"noopener noreferrer"},u=e("h3",{id:"application-extension",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#application-extension","aria-hidden":"true"},"#"),s(" Application Extension")],-1),y={class:"custom-container tip"},m=e("p",{class:"custom-container-title"},"Contents of This Section",-1),h={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/-package-info-flags-wrapper",target:"_blank",rel:"noopener noreferrer"},b=e("p",null,[s("The "),e("code",null,"flags"),s(" attribute of "),e("code",null,"PackageInfo"),s(" wrapper.")],-1),v={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/-application-info-flags-wrapper",target:"_blank",rel:"noopener noreferrer"},A=e("p",null,[s("The "),e("code",null,"flags"),s(" attribute of "),e("code",null,"ApplicationInfo"),s(" wrapper.")],-1),g={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-component-name",target:"_blank",rel:"noopener noreferrer"},D={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/has-package",target:"_blank",rel:"noopener noreferrer"},B={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/has-launch-activity",target:"_blank",rel:"noopener noreferrer"},C={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-package-info",target:"_blank",rel:"noopener noreferrer"},f={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-package-info-or-null",target:"_blank",rel:"noopener noreferrer"},x={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-installed-packages",target:"_blank",rel:"noopener noreferrer"},F={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-installed-packages-or-null",target:"_blank",rel:"noopener noreferrer"},k={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/query-launch-activities-for-package",target:"_blank",rel:"noopener noreferrer"},_={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/query-launch-activities-for-package-or-null",target:"_blank",rel:"noopener noreferrer"},w={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/is-component-enabled",target:"_blank",rel:"noopener noreferrer"},q={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/enable-component",target:"_blank",rel:"noopener noreferrer"},I={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/disable-component",target:"_blank",rel:"noopener noreferrer"},S={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/reset-component",target:"_blank",rel:"noopener noreferrer"},E={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/version-code-compat",target:"_blank",rel:"noopener noreferrer"},M={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/primary-cpu-abi",target:"_blank",rel:"noopener noreferrer"},T={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/secondary-cpu-abi",target:"_blank",rel:"noopener noreferrer"},P={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/has-flags",target:"_blank",rel:"noopener noreferrer"},O=e("p",null,[s("Extensions for "),e("code",null,"Application"),s(".")],-1),R=o(`<p><code>BetterAndroid</code> provides extended functions for <code>PackageManager</code>, <code>PackageInfo</code>, <code>ApplicationInfo</code> and other functions, so that you can use these functions more conveniently.</p><p>They are collectively classified as application extensions, meaning application-related functions.</p><p>Below are examples of how to use these extensions.</p><p>Get the <code>ComponentName</code> of a component class through generics.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// Get the ComponentName of MainActivity.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> componentName </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.</span><span style="color:#DCBDFB;">getComponentName</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MainActivity</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Determine whether the app has been installed.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// For example, determine whether Chrome is installed.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> hasChrome </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">hasPackage</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.android.chrome&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Determine whether the app has a launchable <code>Activity</code>.</p><p>This function is mainly used to determine whether the app has an <code>Activity</code> that can be launched from the launcher.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// For example, determine the com.mydemo.test app.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> hasLaunchActivity </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">hasLaunchActivity</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.mydemo.test&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">Notice</p><p>Starting from Android 10, even if the app does not have an <code>Activity</code> that declares <code>ACTION_MAIN</code> and <code>CATEGORY_LAUNCHER</code>, its icon may still be displayed on the launcher, and clicking it will open the application information interface, but this does not mean that it has a launchable <code>Activity</code>.</p></div><p>Get app&#39;s package information.</p><p><code>BetterAndroid</code> provides an overloaded method with the same name for <code>getPackageInfo</code>, you don’t need to consider compatibility issues, just use <code>PackageInfoFlagsWrapper</code> as the parameter of <code>flags</code>.</p><p>The reason for overloading this method is that in Android 13, the official method of <code>Int</code> type <code>flags</code> was invalidated and a new solution was enabled, however, no compatibility processing tools were provided, but it was later canceled in Android 14, which will cause great trouble to developers.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// For example, get Chrome&#39;s PackageInfo.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> packageInfo </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">getPackageInfo</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.android.chrome&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// You can pass in one or more PackageInfoFlagsWrapper objects in the second parameter</span></span>
<span class="line"><span style="color:#768390;">// to set flags instead of using bit operations.</span></span>
<span class="line"><span style="color:#768390;">// PackageInfoFlagsWrapper is a wrapper mirror for all PackageInfo flags.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> packageInfo </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager</span></span>
<span class="line"><span style="color:#ADBAC7;">    .</span><span style="color:#DCBDFB;">getPackageInfo</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.android.chrome&quot;</span><span style="color:#ADBAC7;">, PackageInfoFlagsWrapper.GET_META_DATA)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>When you are not sure whether <code>PackageInfo</code> can be obtained successfully, you can replace the obtaining method with <code>getPackageInfoOrNull</code>, so that if the acquisition fails, <code>null</code> will be returned instead of throwing an exception.</p></div><p>Get a list of installed apps&#39; package information.</p><p><code>BetterAndroid</code> also provides an overloaded method with the same name for <code>getInstalledPackages</code>. You don&#39;t need to consider compatibility issues, just use <code>PackageInfoFlagsWrapper</code> as the parameter of <code>flags</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// Get a list of all installed apps&#39; package information.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> packageInfos </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">getInstalledPackages</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// Similarly, you can pass in one or more PackageInfoFlagsWrapper objects</span></span>
<span class="line"><span style="color:#768390;">// in the second parameter to set flags.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> packageInfos </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">getInstalledPackages</span><span style="color:#ADBAC7;">(PackageInfoFlagsWrapper.GET_META_DATA)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>Similarly, when you are not sure whether <code>PackageInfo</code> can be obtained successfully, you can replace the obtaining method with <code>getInstalledPackagesOrNull</code>.</p></div><p>Query all launchable <code>Activities</code> of an app.</p><p>This method is implemented based on <code>queryIntentActivities</code> and <code>getLaunchIntentForPackage</code>, simplifying the acquisition process.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// For example, query all launchable activities of Chrome.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> launchActivities </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">queryLaunchActivitiesForPackage</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.android.chrome&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>Similarly, when you are not sure whether <code>ResolveInfo</code> can be obtained successfully, you can replace the obtaining method with <code>queryLaunchActivitiesForPackageOrNull</code>.</p></div><p>Determine whether the component declared by the app is enabled or in the default state.</p><p><code>BetterAndroid</code> encapsulates the <code>getComponentEnabledSetting</code> method, you can use the following methods to determine the component status faster.</p><p>The default state is the state declared by the app itself in <code>AndroidManifest.xml</code>, or the enabled state if not declared.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// Get the ComponentName of MainActivity.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> mainComponent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.</span><span style="color:#DCBDFB;">getComponentName</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MainActivity</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="color:#768390;">// Determine whether MainActivity is enabled.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> isEnabled </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">isComponentEnabled</span><span style="color:#ADBAC7;">(mainComponent)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Enable, disable, or reset components declared by the app.</p><p><code>BetterAndroid</code> encapsulates the <code>setComponentEnabledSetting</code> method, you can use the following methods to complete this operation faster.</p><p>The reset operation will reset to the default state, which is the state declared by the app itself in <code>AndroidManifest.xml</code>, or the enabled state if not declared.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// Get the ComponentName of MainActivity.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> mainComponent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.</span><span style="color:#DCBDFB;">getComponentName</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MainActivity</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="color:#768390;">// Enable MainActivity.</span></span>
<span class="line"><span style="color:#ADBAC7;">context.packageManager.</span><span style="color:#DCBDFB;">enableComponent</span><span style="color:#ADBAC7;">(mainComponent)</span></span>
<span class="line"><span style="color:#768390;">// Disable MainActivity.</span></span>
<span class="line"><span style="color:#ADBAC7;">context.packageManager.</span><span style="color:#DCBDFB;">disableComponent</span><span style="color:#ADBAC7;">(mainComponent)</span></span>
<span class="line"><span style="color:#768390;">// Reset MainActivity.</span></span>
<span class="line"><span style="color:#ADBAC7;">context.packageManager.</span><span style="color:#DCBDFB;">resetComponent</span><span style="color:#ADBAC7;">(mainComponent)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">Pay Attention</p><p>Your app does not have permission to enable or disable components of other apps unless it is in the system user group.</p></div><p>Get the version code of the apps.</p><p><code>longVersionCode</code> is a new feature introduced in Android 9, it is an expanded version of <code>versionCode</code> and is used to solve the problem of insufficient digits in <code>versionCode</code>.</p><p>Since <code>versionCode</code> has been marked as invalid, and it is too cumbersome for developers to use <code>PackageInfoCompat.getLongVersionCode</code> provided by <code>androidx</code>, this method is basically difficult to find.</p><p>The use of two version numbers at the same time will also cause problems, developers cause trouble.</p><p>For this purpose, <code>BetterAndroid</code> encapsulates the compatible implementation of version number, you don&#39;t need to think about <code>versionCode</code> and <code>longVersionCode</code> now.</p><p>You can directly use <code>versionCodeCompat</code> to get the version number of the apps, and its type will always remain is <code>Long</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// For example, get the version number of Chrome.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> versionCode </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">getPackageInfo</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.android.chrome&quot;</span><span style="color:#ADBAC7;">).versionCodeCompat</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Gets the CPU ABI name of the apps.</p><p>This is a hidden API, so <code>BetterAndroid</code> is obtained through reflection, and you may need to use it in some specific scenarios.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// For example, get Chrome&#39;s PackageInfo.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> packageInfo </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">getPackageInfo</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.android.chrome&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// Get the main CPU ABI name.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> primaryCpuAbi </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> packageInfo.applicationInfo.primaryCpuAbi</span></span>
<span class="line"><span style="color:#768390;">// Get the secondary CPU ABI name.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> secondaryCpuAbi </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> packageInfo.applicationInfo.secondaryCpuAbi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Determines whether <code>ApplicationInfo</code> contains the specified <code>flags</code>.</p><p><code>BetterAndroid</code> encapsulates the method of judging <code>flags</code> through bit operations, you can use the following method to complete this operation faster.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// For example, get Chrome&#39;s ApplicationInfo.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> applicationInfo </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.packageManager.</span><span style="color:#DCBDFB;">getPackageInfo</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.android.chrome&quot;</span><span style="color:#ADBAC7;">).applicationInfo</span></span>
<span class="line"><span style="color:#768390;">// Determine whether Chrome is a system app.</span></span>
<span class="line"><span style="color:#768390;">// You can pass in one or more ApplicationInfoFlagsWrapper objects</span></span>
<span class="line"><span style="color:#768390;">// to set flags instead of using bit operations.</span></span>
<span class="line"><span style="color:#768390;">// ApplicationInfoFlagsWrapper is a wrapper image for all ApplicationInfo flags.</span></span>
<span class="line"><span style="color:#768390;">// For ease of reading, all flags have the FLAG prefix removed in ApplicationInfoFlagsWrapper.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> isSystemApp </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> applicationInfo.</span><span style="color:#DCBDFB;">hasFlags</span><span style="color:#ADBAC7;">(ApplicationInfoFlagsWrapper.SYSTEM)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57),N={class:"custom-container warning"},K=e("p",{class:"custom-container-title"},"Notice",-1),L=e("p",null,[s("In all of the above features, when it comes to querying package behavior outside of your own app, Android 11 and later require the "),e("code",null,"QUERY_ALL_PACKAGES"),s(" permission or explicitly configure a "),e("code",null,"queries"),s(" property list.")],-1),V={href:"https://developer.android.com/training/package-visibility",target:"_blank",rel:"noopener noreferrer"},U=e("h3",{id:"broadcast-extension",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#broadcast-extension","aria-hidden":"true"},"#"),s(" Broadcast Extension")],-1),G={class:"custom-container tip"},Y=e("p",{class:"custom-container-title"},"Contents of This Section",-1),W={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/register-receiver",target:"_blank",rel:"noopener noreferrer"},H={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/send-broadcast",target:"_blank",rel:"noopener noreferrer"},j={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/-broadcast-receiver",target:"_blank",rel:"noopener noreferrer"},z=e("p",null,"Extensions for Broadcast.",-1),Q=o(`<p>Broadcast is a very important feature in Android, which allows apps to communicate with each other.</p><p><code>BetterAndroid</code> provides a dynamic registration solution at runtime for broadcast, you can send broadcasts and create <code>BoardcastReceiver</code> more easily.</p><p>You can use the following methods to send and receive normal broadcasts without declaring them in <code>AndroidManifest.xml</code>.</p><p>For example, we want to send a broadcast to <code>com.example.app</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// Send a normal broadcast to com.example.app.</span></span>
<span class="line"><span style="color:#ADBAC7;">context.</span><span style="color:#DCBDFB;">sendBroadcast</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.example.app&quot;</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Set action.</span></span>
<span class="line"><span style="color:#ADBAC7;">    action </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;com.example.app.action.KNOCK&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Pass a string parameter.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">putExtra</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;greetings&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;Hey you!&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// Specifying the receiver&#39;s package name parameter is optional,</span></span>
<span class="line"><span style="color:#768390;">// if you not fill in a package name, this will be received by all receivers</span></span>
<span class="line"><span style="color:#768390;">// added with the following action.</span></span>
<span class="line"><span style="color:#ADBAC7;">context.</span><span style="color:#DCBDFB;">sendBroadcast</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Set action.</span></span>
<span class="line"><span style="color:#ADBAC7;">    action </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;com.example.app.action.KNOCK&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Pass a string parameter.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">putExtra</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;greetings&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;Hey there!&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In <code>com.example.app</code>, we can receive this broadcast like this.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// Create intent filter.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> filter </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">IntentFilter</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">apply</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Specify the sender&#39;s action.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">addAction</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.example.app.action.KNOCK&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// (Solution 1) Directly register the broadcast receiver.</span></span>
<span class="line"><span style="color:#768390;">// The callback here is the onReceive method, which is synchronous (main thread).</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> receiver </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.</span><span style="color:#DCBDFB;">registerReceiver</span><span style="color:#ADBAC7;">(filter) { context, intent </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Get the passed string parameter.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> greetings </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> intent.</span><span style="color:#DCBDFB;">getStringExtra</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;greetings&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Use Toast to display the received parameter.</span></span>
<span class="line"><span style="color:#ADBAC7;">    context.</span><span style="color:#DCBDFB;">toast</span><span style="color:#ADBAC7;">(greetings)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// (Solution 2) Create the broadcast receiver method body.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> body </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">BroadcastReceiver</span><span style="color:#ADBAC7;"> { context, intent </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Get the passed string parameter.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> greetings </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> intent.</span><span style="color:#DCBDFB;">getStringExtra</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;greetings&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Use Toast to display the received parameter.</span></span>
<span class="line"><span style="color:#ADBAC7;">    context.</span><span style="color:#DCBDFB;">toast</span><span style="color:#ADBAC7;">(greetings)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> receiver </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.</span><span style="color:#DCBDFB;">registerReceiver</span><span style="color:#ADBAC7;">(filter, body </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> body)</span></span>
<span class="line"><span style="color:#768390;">// You can unregister the broadcast receiver when you no longer need to receive broadcasts.</span></span>
<span class="line"><span style="color:#ADBAC7;">context.</span><span style="color:#DCBDFB;">unregisterReceiver</span><span style="color:#ADBAC7;">(receiver)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>You can set the <code>exported</code> parameter (default is <code>true</code>) in the <code>registerReceiver</code> method to determine whether the current broadcast receiver needs to add <code>Context.RECEIVER_EXPORTED</code>.</p><p>If your broadcast is not open to the outside apps, you can set it to <code>false</code>.</p></div>`,10),J={class:"custom-container warning"},Z=e("p",{class:"custom-container-title"},"Notice",-1),X=e("p",null,[s("In Android 14 or higher, a runtime-registered broadcast receiver must specify an exported behavior to receive broadcasts from other apps. If the current target Android version is 14 and above, you must ensure that the "),e("code",null,"exported"),s(" parameter is "),e("code",null,"true"),s(" to receive broadcasts from other apps, otherwise an exception will be thrown directly.")],-1),$={href:"https://developer.android.com/about/versions/14/behavior-changes-14#runtime-receivers-exported",target:"_blank",rel:"noopener noreferrer"},ee=e("h3",{id:"clipboard-extension",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#clipboard-extension","aria-hidden":"true"},"#"),s(" Clipboard Extension")],-1),se={class:"custom-container tip"},ne=e("p",{class:"custom-container-title"},"Contents of This Section",-1),ae={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/-clip-data-item-builder",target:"_blank",rel:"noopener noreferrer"},oe=e("p",null,[e("code",null,"ClipData.Item"),s(" builder.")],-1),te={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/clipboard-manager",target:"_blank",rel:"noopener noreferrer"},le={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/copy",target:"_blank",rel:"noopener noreferrer"},ie={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/list-of-items",target:"_blank",rel:"noopener noreferrer"},re={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/-clip-data",target:"_blank",rel:"noopener noreferrer"},pe=e("p",null,"Extensions for clipboard.",-1),ce=o(`<p>The clipboard is a very important function that is often used in app development, but its use is not very user-friendly.</p><p>You need to use <code>getSystemService</code> to get <code>ClipboardManager</code>, and then use <code>setPrimaryClip</code> to set the clipboard content.</p><p>Of course, you can also use <code>getPrimaryClip</code> to read the clipboard content.</p><p>Sometimes we only need to set or read a string, but these operations require writing a lot of code, which is very unfriendly to developers.</p><p>For this reason, <code>BetterAndroid</code> provides a simpler solution for the clipboard, you can directly use the following methods to set or read the clipboard content.</p><p>Read the contents of the clipboard.</p><p>Now, you can directly replace <code>ClipData.getItemAt</code> and <code>ClipData.getItemCount</code> with <code>ClipData.listOfItems</code>.</p><p>This method will return a <code>List&lt;ClipData.Item&gt;</code>, you can use <code>firstOrNull</code> to get the first <code>ClipData.Item</code>, or use <code>isEmpty</code> to directly determine whether there is content in the clipboard.</p><p>Its benefits it means that you no longer need to consider whether the array will out of bounds.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// Get the clipboard manager.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> manager </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.clipboardManager</span></span>
<span class="line"><span style="color:#768390;">// Get the first ClipData.Item in the clipboard.</span></span>
<span class="line"><span style="color:#768390;">// Normally, you only need to get the first object.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> clipItem </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> manager.primaryClip?.</span><span style="color:#DCBDFB;">listOfItems</span><span style="color:#ADBAC7;">()?.</span><span style="color:#DCBDFB;">firstOrNull</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// Get the copied text.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> copiedText </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> clipItem?.text</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Copy a text to the clipboard.</p><p>You don&#39;t need to write <code>setPrimaryClip(ClipData.newPlainText(&quot;Lable&quot;, &quot;Text&quot;))</code> anymore, copying a text should be simple.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// Copy a text to the clipboard.</span></span>
<span class="line"><span style="color:#ADBAC7;">context.clipboardManager.</span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// Add a label to this text.</span></span>
<span class="line"><span style="color:#ADBAC7;">context.clipboardManager.</span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;MyText&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Copy HTML type text, <code>Uri</code>, <code>Intent</code> to the clipboard.</p><p>No matter what content you copy, you can do it using the <code>copy</code> method.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// Copy HTML type text to the clipboard.</span></span>
<span class="line"><span style="color:#ADBAC7;">context.clipboardManager.</span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;&lt;b&gt;Hello World!&lt;/b&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// Copy uri to clipboard.</span></span>
<span class="line"><span style="color:#ADBAC7;">context.clipboardManager.</span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(Uri.</span><span style="color:#DCBDFB;">parse</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;some://uri&quot;</span><span style="color:#ADBAC7;">), context.contentResolver)</span></span>
<span class="line"><span style="color:#768390;">// Copy intent to the clipboard.</span></span>
<span class="line"><span style="color:#ADBAC7;">context.clipboardManager.</span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">Intent</span><span style="color:#ADBAC7;">(Intent.ACTION_VIEW, Uri.</span><span style="color:#DCBDFB;">parse</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;some://uri&quot;</span><span style="color:#ADBAC7;">)))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Copies the contents of a custom <code>ClipData</code> to the clipboard.</p><p>You can use the <code>ClipData</code> method to create a new <code>ClipData</code> object and then copy it to the clipboard.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// Create ClipData object.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> clipData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">ClipData</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">addText</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">addHtmlText</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;&lt;b&gt;Hello World!&lt;/b&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">addUri</span><span style="color:#ADBAC7;">(Uri.</span><span style="color:#DCBDFB;">parse</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;some://uri&quot;</span><span style="color:#ADBAC7;">), context.contentResolver)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">addIntent</span><span style="color:#ADBAC7;">(</span><span style="color:#DCBDFB;">Intent</span><span style="color:#ADBAC7;">(Intent.ACTION_VIEW, Uri.</span><span style="color:#DCBDFB;">parse</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;some://uri&quot;</span><span style="color:#ADBAC7;">)))</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// Copy to clipboard.</span></span>
<span class="line"><span style="color:#ADBAC7;">context.clipboardManager.</span><span style="color:#DCBDFB;">copy</span><span style="color:#ADBAC7;">(clipData)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),de={class:"custom-container warning"},ue=e("p",{class:"custom-container-title"},"Notice",-1),ye=e("p",null,"In Android 10 or later, the contents of the clipboard cannot be read while your app is in the background unless your app is an input method (IME).",-1),me={href:"https://developer.android.com/about/versions/10/privacy/changes#clipboard-data",target:"_blank",rel:"noopener noreferrer"},he=e("h3",{id:"intent-extension",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#intent-extension","aria-hidden":"true"},"#"),s(" Intent Extension")],-1),be={class:"custom-container tip"},ve=e("p",{class:"custom-container-title"},"Content of This Section",-1),Ae={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-serializable-extra-compat",target:"_blank",rel:"noopener noreferrer"},ge={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-serializable-compat",target:"_blank",rel:"noopener noreferrer"},De={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-parcelable-extra-compat",target:"_blank",rel:"noopener noreferrer"},Be={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/get-parcelable-compat",target:"_blank",rel:"noopener noreferrer"},Ce=e("p",null,[s("Extensions for "),e("code",null,"Intent"),s(".")],-1),fe=o(`<p>Currently, the extension methods in <code>Intent</code> are only used to handle the acquisition methods of <code>Serializable</code> and <code>Parcelable</code> types.</p><p>They are marked as deprecated in Android 13 and the official does not provide any effective compatible handling method.</p><p>You can use the compatibility handling methods provided by <code>BetterAndroid</code> to obtain data of <code>Serializable</code> and <code>Parcelable</code> types.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your intent.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> intent: </span><span style="color:#F69D50;">Intent</span></span>
<span class="line"><span style="color:#768390;">// Get data of serializable type.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> myData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> intent.</span><span style="color:#DCBDFB;">getSerializableExtraCompat</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyData</span><span style="color:#ADBAC7;">&gt;(</span><span style="color:#96D0FF;">&quot;my_key_name&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> myData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> intent.extras?.</span><span style="color:#DCBDFB;">getSerializableCompat</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyData</span><span style="color:#ADBAC7;">&gt;(</span><span style="color:#96D0FF;">&quot;my_key_name&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// Get data of parcelable type.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> myData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> intent.</span><span style="color:#DCBDFB;">getParcelableExtraCompat</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyData</span><span style="color:#ADBAC7;">&gt;(</span><span style="color:#96D0FF;">&quot;my_key_name&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> myData </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> intent.extras?.</span><span style="color:#DCBDFB;">getParcelableCompat</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyData</span><span style="color:#ADBAC7;">&gt;(</span><span style="color:#96D0FF;">&quot;my_key_name&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The following is a comparison table of the original method and the compatibility method.</p><table><thead><tr><th>Original Method</th><th>Compatibility Method</th></tr></thead><tbody><tr><td><code>Intent.getSerializableExtra</code></td><td><code>Intent.getSerializableExtraCompat</code></td></tr><tr><td><code>Bundle.getSerializable</code></td><td><code>Bundle.getSerializableCompat</code></td></tr><tr><td><code>Intent.getParcelableExtra</code></td><td><code>Intent.getParcelableExtraCompat</code></td></tr><tr><td><code>Bundle.getParcelable</code></td><td><code>Bundle.getParcelableCompat</code></td></tr></tbody></table><h3 id="service-extension" tabindex="-1"><a class="header-anchor" href="#service-extension" aria-hidden="true">#</a> Service Extension</h3>`,8),xe={class:"custom-container tip"},Fe=e("p",{class:"custom-container-title"},"Content of This Section",-1),ke={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/start-service",target:"_blank",rel:"noopener noreferrer"},_e={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/start-foreground-service",target:"_blank",rel:"noopener noreferrer"},we={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/start-service-or-else",target:"_blank",rel:"noopener noreferrer"},qe={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.component/start-foreground-service-or-else",target:"_blank",rel:"noopener noreferrer"},Ie=e("p",null,[s("Extensions for "),e("code",null,"Service"),s(".")],-1),Se=o(`<p>Similar to how to start <code>Activity</code>, when we need to start a <code>Service</code>, we need to use <code>Intent</code> to create an <code>Intent(this, MyService::class.java)</code>, and then call <code>startService(intent)</code> to start it.</p><p>This may not be very friendly to write, so <code>BetterAndroid</code> provides an extension for <code>Service</code>, now you can directly use the following method to start a <code>Service</code>.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// Assume MyService is your target service.</span></span>
<span class="line"><span style="color:#ADBAC7;">context.</span><span style="color:#DCBDFB;">startService</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyService</span><span style="color:#ADBAC7;">&gt;()</span></span>
<span class="line"><span style="color:#768390;">// You can create an intent using the following method.</span></span>
<span class="line"><span style="color:#ADBAC7;">context.</span><span style="color:#DCBDFB;">startService</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">MyService</span><span style="color:#ADBAC7;">&gt; {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Add some extra parameters here.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">putExtra</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;key&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;value&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you need to start a <code>Service</code> of an external app, you can use the following method.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Assume this is your context.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// Assume that the app package you need to start is named com.example.app.</span></span>
<span class="line"><span style="color:#768390;">// Assume that the service class you need to start is named com.example.app.MyService.</span></span>
<span class="line"><span style="color:#ADBAC7;">context.</span><span style="color:#DCBDFB;">startService</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.example.app&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;com.example.app.MyService&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// You can still create an intent using the following method.</span></span>
<span class="line"><span style="color:#ADBAC7;">context.</span><span style="color:#DCBDFB;">startService</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.example.app&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;com.example.app.MyService&quot;</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Add some extra parameters here.</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">putExtra</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;key&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;value&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tips</p><p>You can use <code>startServiceOrElse</code> and <code>startForegroundServiceOrElse</code> instead of <code>startService</code> and <code>startForegroundService</code> to determine whether the <code>Service</code> can be started successfully.</p><p>If the startup fails, this method will not throw an exception but return <code>false</code>.</p></div>`,8),Ee={class:"custom-container warning"},Me=e("p",{class:"custom-container-title"},"Notice",-1),Te=e("p",null,[s("In Android 8 or higher, in some cases, you may need to use "),e("code",null,"startForegroundService"),s(" to start a foreground service.")],-1),Pe={href:"https://developer.android.com/about/versions/oreo/background",target:"_blank",rel:"noopener noreferrer"},Oe=e("h3",{id:"system-infomation",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#system-infomation","aria-hidden":"true"},"#"),s(" System Infomation")],-1),Re={class:"custom-container tip"},Ne=e("p",{class:"custom-container-title"},"Content of This Section",-1),Ke={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.tool/-android-version",target:"_blank",rel:"noopener noreferrer"},Le=e("p",null,"Android version tool.",-1),Ve={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.tool/-rom-type",target:"_blank",rel:"noopener noreferrer"},Ue=e("p",null,"Android ROM type tool.",-1),Ge={href:"https://betterandroid.github.io/BetterAndroid/KDoc/system-extension/system-extension/com.highcapable.betterandroid.system.extension.tool/-system-properties",target:"_blank",rel:"noopener noreferrer"},Ye=e("p",null,[s("Android's "),e("code",null,"SystemProperties"),s(" tool.")],-1),We=o(`<p>Maybe you are tired of <code>Build.VERSION.SDK_INT</code> and <code>Build.VERSION_CODES</code> floating around in your code, so from now on, you no longer need to use them.</p><p><code>BetterAndroid</code> has prepared simpler writing methods for you to replace them.</p><p>Previously, we needed to determine the Android API level of the current system, which was basically done in the following ways.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (Build.VERSION.SDK_INT </span><span style="color:#F47067;">&gt;=</span><span style="color:#ADBAC7;"> Build.VERSION_CODES.Q) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Execute relevant code.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// Or use hard-coded API version code.</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (Build.VERSION.SDK_INT </span><span style="color:#F47067;">&gt;=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">29</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Execute relevant code.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, you can do this very easily in the following way.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">AndroidVersion.</span><span style="color:#DCBDFB;">require</span><span style="color:#ADBAC7;">(AndroidVersion.Q) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Execute relevant code.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// result will get &quot;target&quot; when API is greater than or equal to 29, otherwise it will be &quot;legacy&quot;.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> result </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> AndroidVersion.</span><span style="color:#DCBDFB;">require</span><span style="color:#ADBAC7;">(AndroidVersion.Q, </span><span style="color:#96D0FF;">&quot;legacy&quot;</span><span style="color:#ADBAC7;">) { </span><span style="color:#96D0FF;">&quot;target&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"><span style="color:#768390;">// If it is a nullable result, you can use the following method.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> myData: </span><span style="color:#F69D50;">MyData</span><span style="color:#ADBAC7;">?</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> result </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> AndroidVersion.</span><span style="color:#DCBDFB;">requireOrNull</span><span style="color:#ADBAC7;">(AndroidVersion.Q, </span><span style="color:#DCBDFB;">MyData</span><span style="color:#ADBAC7;">()) { myData }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also use the following methods to judge.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Determine whether API is less than 29.</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (AndroidVersion.</span><span style="color:#DCBDFB;">isLessThan</span><span style="color:#ADBAC7;">(AndroidVersion.Q)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Execute relevant code.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// Determine whether API is greater than 29.</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (AndroidVersion.</span><span style="color:#DCBDFB;">isGreaterThan</span><span style="color:#ADBAC7;">(AndroidVersion.Q)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Execute relevant code.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// Determine whether API is less than or equal to 29.</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (AndroidVersion.</span><span style="color:#DCBDFB;">isAtMost</span><span style="color:#ADBAC7;">(AndroidVersion.Q)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Execute relevant code.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// Determine whether the API is greater than or equal to 29.</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (AndroidVersion.</span><span style="color:#DCBDFB;">isAtLeast</span><span style="color:#ADBAC7;">(AndroidVersion.Q)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Execute relevant code.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The following is the constant mapping comparison table for each API, after Android version update, <code>BetterAndroid</code> will update these constants synchronously.</p><table><thead><tr><th>API Level</th><th><code>AndroidVersion</code> Name</th><th><code>Build.VERSION_CODES</code> Name</th><th>Corresponding System Version</th></tr></thead><tbody><tr><td>1</td><td><code>B</code></td><td><code>BASE</code></td><td>1.0</td></tr><tr><td>2</td><td><code>B_1_1</code></td><td><code>BASE_1_1</code></td><td>1.1</td></tr><tr><td>3</td><td><code>C</code></td><td><code>CUPCAKE</code></td><td>1.5</td></tr><tr><td>4</td><td><code>D</code></td><td><code>DONUT</code></td><td>1.6</td></tr><tr><td>5</td><td><code>E</code></td><td><code>ECLAIR</code></td><td>2.0</td></tr><tr><td>6</td><td><code>E_0_1</code></td><td><code>ECLAIR_0_1</code></td><td>2.0.1</td></tr><tr><td>7</td><td><code>E_MR1</code></td><td><code>ECLAIR_MR1</code></td><td>2.1</td></tr><tr><td>8</td><td><code>F</code></td><td><code>FROYO</code></td><td>2.2</td></tr><tr><td>9</td><td><code>G</code></td><td><code>GINGERBREAD</code></td><td>2.3</td></tr><tr><td>10</td><td><code>G_MR1</code></td><td><code>GINGERBREAD_MR1</code></td><td>2.3.3</td></tr><tr><td>11</td><td><code>H</code></td><td><code>HONEYCOMB</code></td><td>3.0</td></tr><tr><td>12</td><td><code>H_MR1</code></td><td><code>HONEYCOMB_MR1</code></td><td>3.1</td></tr><tr><td>13</td><td><code>H_MR2</code></td><td><code>HONEYCOMB_MR2</code></td><td>3.2</td></tr><tr><td>14</td><td><code>I</code></td><td><code>ICE_CREAM_SANDWICH</code></td><td>4.0</td></tr><tr><td>15</td><td><code>I_MR1</code></td><td><code>ICE_CREAM_SANDWICH_MR1</code></td><td>4.03</td></tr><tr><td>16</td><td><code>J</code></td><td><code>JELLY_BEAN</code></td><td>4.1</td></tr><tr><td>17</td><td><code>J_MR1</code></td><td><code>JELLY_BEAN_MR1</code></td><td>4.2</td></tr><tr><td>18</td><td><code>J_MR2</code></td><td><code>JELLY_BEAN_MR2</code></td><td>4.3</td></tr><tr><td>19</td><td><code>K</code></td><td><code>KITKAT</code></td><td>4.4.3, 4.4.4</td></tr><tr><td>20</td><td><code>K_W</code></td><td><code>KITKAT_WATCH</code></td><td>4.4W</td></tr><tr><td>21</td><td><code>L</code></td><td><code>LOLLIPOP</code></td><td>5.0, 5.0.2</td></tr><tr><td>22</td><td><code>L_MR1</code></td><td><code>LOLLIPOP_MR1</code></td><td>5.1, 5.1.1</td></tr><tr><td>23</td><td><code>M</code></td><td><code>M</code></td><td>6.0, 6.0.1</td></tr><tr><td>24</td><td><code>N</code></td><td><code>N</code></td><td>7.0</td></tr><tr><td>25</td><td><code>N_MR1</code></td><td><code>N_MR1</code></td><td>7.1, 7.1.1, 7.1.2</td></tr><tr><td>26</td><td><code>O</code></td><td><code>O</code></td><td>8.0</td></tr><tr><td>27</td><td><code>O_MR1</code></td><td><code>O_MR1</code></td><td>8.1</td></tr><tr><td>28</td><td><code>P</code></td><td><code>P</code></td><td>9</td></tr><tr><td>29</td><td><code>Q</code></td><td><code>Q</code></td><td>10</td></tr><tr><td>30</td><td><code>R</code></td><td><code>R</code></td><td>11</td></tr><tr><td>31</td><td><code>S</code></td><td><code>S</code></td><td>12</td></tr><tr><td>32</td><td><code>S_V2</code></td><td><code>S_V2</code></td><td>12.1, 12L</td></tr><tr><td>33</td><td><code>T</code></td><td><code>TIRAMISU</code></td><td>13</td></tr><tr><td>34</td><td><code>U</code></td><td><code>UPSIDE_DOWN_CAKE</code></td><td>14</td></tr><tr><td>35</td><td><code>V</code></td><td><code>VANILLA_ICE_CREAM</code></td><td>15</td></tr><tr><td>36</td><td><code>BAKLAVA</code></td><td><code>BAKLAVA</code></td><td>16</td></tr></tbody></table><p>In addition to judging the API level, you can also use the following method to get the current Android version name.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Get the current Android version name.</span></span>
<span class="line"><span style="color:#768390;">// It is equivalent to Build.VERSION.RELEASE.</span></span>
<span class="line"><span style="color:#768390;">// For example, the version name of Android 10 is the string &quot;10&quot;.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> versionName </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> AndroidVersion.name</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also use <code>code</code> directly to get the current Android API level.</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Get the current Android API level.</span></span>
<span class="line"><span style="color:#768390;">// Its function is equivalent to Build.VERSION.SDK_INT.</span></span>
<span class="line"><span style="color:#768390;">// For example, the API level of Android 10 is integer 29.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> targetSdk </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> AndroidVersion.code</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With more and more Android systems for deeply customized Android phones released by manufacturers in mainland China and other countries, it is very necessary for us to target the different functions of each customized version of the system, but how to judge the types of these systems is a big problem.</p><p>Usually, everyone’s solution is to determine the model of the device to determine what kind of customized system it is, however, if the current device is not running the customized system you judged, such as the case where the user flashes the phone by himself, then this solution is will fail.</p><p><code>BetterAndroid</code> provides you with a simple, fast and efficient solution by collecting corresponding features of various common custom systems.</p><p>The following is a simple example to determine the type of current ROM.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Determine whether the current ROM type is MIUI.</span></span>
<span class="line"><span style="color:#F47067;">if</span><span style="color:#ADBAC7;"> (RomType.</span><span style="color:#DCBDFB;">equals</span><span style="color:#ADBAC7;">(RomType.MIUI)) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Execute relevant code.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yes, it&#39;s that simple, if you need to judge multiple ROM types at the same time, you can also use the following method.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Get the current ROM type.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> type </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> RomType.current</span></span>
<span class="line"><span style="color:#768390;">// Determine the current ROM type in batches.</span></span>
<span class="line"><span style="color:#F47067;">when</span><span style="color:#ADBAC7;"> (type) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    RomType.MIUI </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Execute relevant code.</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    RomType.COLOROS </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Execute relevant code.</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    RomType.ORIGINOS </span><span style="color:#F47067;">-&gt;</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Execute relevant code.</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27),He={href:"https://github.com/BetterAndroid/BetterAndroid/issues",target:"_blank",rel:"noopener noreferrer"},je=e("thead",null,[e("tr",null,[e("th",null,[e("code",null,"RomType"),s(" Name")]),e("th",null,"ROM Type")])],-1),ze=e("tr",null,[e("td",null,[e("code",null,"DEFAULT")]),e("td",null,"Default, uncategorized. (Stock Android or AOSP-based Android system or ROM type not currently collected)")],-1),Qe=e("td",null,[e("code",null,"HARMONYOS")],-1),Je={href:"https://www.harmonyos.com/",target:"_blank",rel:"noopener noreferrer"},Ze=e("td",null,[e("code",null,"EMUI")],-1),Xe={href:"https://www.huaweicentral.com/emui",target:"_blank",rel:"noopener noreferrer"},$e=e("td",null,[e("code",null,"MIUI")],-1),es={href:"https://home.miui.com/",target:"_blank",rel:"noopener noreferrer"},ss=e("td",null,[e("code",null,"HYPEROS")],-1),ns={href:"https://hyperos.mi.com/",target:"_blank",rel:"noopener noreferrer"},as=e("td",null,[e("code",null,"COLOROS")],-1),os={href:"https://www.coloros.com/",target:"_blank",rel:"noopener noreferrer"},ts=e("td",null,[e("code",null,"FUNTOUCHOS")],-1),ls={href:"https://www.vivo.com/funtouchos",target:"_blank",rel:"noopener noreferrer"},is=e("td",null,[e("code",null,"ORIGINOS")],-1),rs={href:"https://www.vivo.com/originos",target:"_blank",rel:"noopener noreferrer"},ps=e("td",null,[e("code",null,"FLYME")],-1),cs={href:"https://flyme.com/",target:"_blank",rel:"noopener noreferrer"},ds=e("td",null,[e("code",null,"ONEUI")],-1),us={href:"https://www.samsung.com/one-ui",target:"_blank",rel:"noopener noreferrer"},ys=e("td",null,[e("code",null,"ZUI")],-1),ms={href:"https://zui.com/",target:"_blank",rel:"noopener noreferrer"},hs=e("td",null,[e("code",null,"REDMAGICOS")],-1),bs={href:"https://www.nubia.com/",target:"_blank",rel:"noopener noreferrer"},vs=e("td",null,[e("code",null,"NUBIAUI")],-1),As={href:"https://www.nubia.com/",target:"_blank",rel:"noopener noreferrer"},gs=e("td",null,[e("code",null,"ROGUI")],-1),Ds={href:"https://www.asus.com/",target:"_blank",rel:"noopener noreferrer"},Bs=e("td",null,[e("code",null,"VISIONOS")],-1),Cs={href:"https://fans.hisense.com/forum-269-1.html",target:"_blank",rel:"noopener noreferrer"},fs=o(`<p><code>SystemProperties</code> is a tool provided by Android that can read the contents of <code>build.prop</code> during runtime, but this function is not open to developers.</p><p>So in order to avoid using reflection to access <code>SystemProperties</code> every time, <code>BetterAndroid</code> mirrors all methods of <code>SystemProperties</code>.</p><p>Now, you can directly access <code>SystemProperties</code> using non-reflective means.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// For example, get the build ID of the current system.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> buildId </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SystemProperties.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;ro.build.id&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// Get the build type of the current system.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> buildTags </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SystemProperties.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;ro.system.build.tags&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// Get the CPU ABI list supported by the current device.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> abis </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SystemProperties.</span><span style="color:#DCBDFB;">get</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;ro.system.product.cpu.abilist&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>BetterAndroid</code> also provides an extension usage for it.</p><blockquote><p>The following example</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// Determine whether the properties key exists.</span></span>
<span class="line"><span style="color:#768390;">// For example, some unique key values in ROM.</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> isExists </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SystemProperties.</span><span style="color:#DCBDFB;">contains</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;ro.miui.ui.version.name&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function xs(Fs,ks){const n=l("ExternalLinkIcon");return i(),r("div",null,[c,e("p",null,[s("You can view the KDoc "),e("a",d,[s("click here"),a(n)]),s(".")]),u,e("div",y,[m,e("p",null,[e("a",h,[s("PackageInfoFlagsWrapper"),a(n)])]),b,e("p",null,[e("a",v,[s("ApplicationInfoFlagsWrapper"),a(n)])]),A,e("p",null,[e("a",g,[s("Application → getComponentName"),a(n)])]),e("p",null,[e("a",D,[s("Application → hasPackage"),a(n)])]),e("p",null,[e("a",B,[s("Application → hasLaunchActivity"),a(n)])]),e("p",null,[e("a",C,[s("Application → getPackageInfo"),a(n)])]),e("p",null,[e("a",f,[s("Application → getPackageInfoOrNull"),a(n)])]),e("p",null,[e("a",x,[s("Application → getInstalledPackages"),a(n)])]),e("p",null,[e("a",F,[s("Application → getInstalledPackagesOrNull"),a(n)])]),e("p",null,[e("a",k,[s("Application → queryLaunchActivitiesForPackage"),a(n)])]),e("p",null,[e("a",_,[s("Application → queryLaunchActivitiesForPackageOrNull"),a(n)])]),e("p",null,[e("a",w,[s("Application → isComponentEnabled"),a(n)])]),e("p",null,[e("a",q,[s("Application → enableComponent"),a(n)])]),e("p",null,[e("a",I,[s("Application → disableComponent"),a(n)])]),e("p",null,[e("a",S,[s("Application → resetComponent"),a(n)])]),e("p",null,[e("a",E,[s("Application → versionCodeCompat"),a(n)])]),e("p",null,[e("a",M,[s("Application → primaryCpuAbi"),a(n)])]),e("p",null,[e("a",T,[s("Application → secondaryCpuAbi"),a(n)])]),e("p",null,[e("a",P,[s("Application → hasFlags"),a(n)])]),O]),R,e("div",N,[K,L,e("p",null,[s("Please refer to "),e("a",V,[s("Package visibility filtering on Android"),a(n)]),s(".")])]),U,e("div",G,[Y,e("p",null,[e("a",W,[s("Broadcast → registerReceiver"),a(n)])]),e("p",null,[e("a",H,[s("Broadcast → sendBroadcast"),a(n)])]),e("p",null,[e("a",j,[s("BroadcastReceiver"),a(n)])]),z]),Q,e("div",J,[Z,X,e("p",null,[s("Please refer to "),e("a",$,[s("Runtime-registered broadcasts receivers must specify export behavior"),a(n)]),s(".")])]),ee,e("div",se,[ne,e("p",null,[e("a",ae,[s("ClipDataItemBuilder"),a(n)])]),oe,e("p",null,[e("a",te,[s("Clipboard → clipboardManager"),a(n)])]),e("p",null,[e("a",le,[s("Clipboard → copy"),a(n)])]),e("p",null,[e("a",ie,[s("Clipboard → listOfItems"),a(n)])]),e("p",null,[e("a",re,[s("Clipboard → ClipData"),a(n)])]),pe]),ce,e("div",de,[ue,ye,e("p",null,[s("Please refer to "),e("a",me,[s("Limited access to clipboard data"),a(n)]),s(".")])]),he,e("div",be,[ve,e("p",null,[e("a",Ae,[s("Intent → getSerializableExtraCompat"),a(n)])]),e("p",null,[e("a",ge,[s("Intent → getSerializableCompat"),a(n)])]),e("p",null,[e("a",De,[s("Intent → getParcelableExtraCompat"),a(n)])]),e("p",null,[e("a",Be,[s("Intent → getParcelableCompat"),a(n)])]),Ce]),fe,e("div",xe,[Fe,e("p",null,[e("a",ke,[s("Service → startService"),a(n)])]),e("p",null,[e("a",_e,[s("Service → startForegroundService"),a(n)])]),e("p",null,[e("a",we,[s("Service → startServiceOrElse"),a(n)])]),e("p",null,[e("a",qe,[s("Service → startForegroundServiceOrElse"),a(n)])]),Ie]),Se,e("div",Ee,[Me,Te,e("p",null,[s("Please refer to "),e("a",Pe,[s("Background Execution Limits"),a(n)]),s(".")])]),Oe,e("div",Re,[Ne,e("p",null,[e("a",Ke,[s("AndroidVersion"),a(n)])]),Le,e("p",null,[e("a",Ve,[s("RomType"),a(n)])]),Ue,e("p",null,[e("a",Ge,[s("SystemProperties"),a(n)])]),Ye]),We,e("p",null,[s("The following is a comparison table of constants for currently collected ROM types, if you have features for more ROM types, you are welcome to PR or go to "),e("a",He,[s("GitHub Issues"),a(n)]),s(" to make suggestions to us.")]),e("table",null,[je,e("tbody",null,[ze,e("tr",null,[Qe,e("td",null,[e("a",Je,[s("HarmonyOS"),a(n)]),s(" (Based on AOSP)")])]),e("tr",null,[Ze,e("td",null,[e("a",Xe,[s("EMUI"),a(n)])])]),e("tr",null,[$e,e("td",null,[e("a",es,[s("MIUI"),a(n)])])]),e("tr",null,[ss,e("td",null,[e("a",ns,[s("HyperOS"),a(n)])])]),e("tr",null,[as,e("td",null,[e("a",os,[s("ColorOS"),a(n)])])]),e("tr",null,[ts,e("td",null,[e("a",ls,[s("FuntouchOS"),a(n)])])]),e("tr",null,[is,e("td",null,[e("a",rs,[s("OriginOS"),a(n)])])]),e("tr",null,[ps,e("td",null,[e("a",cs,[s("Flyme"),a(n)])])]),e("tr",null,[ds,e("td",null,[e("a",us,[s("OneUI"),a(n)])])]),e("tr",null,[ys,e("td",null,[e("a",ms,[s("ZUI"),a(n)])])]),e("tr",null,[hs,e("td",null,[e("a",bs,[s("RedMagicOS"),a(n)])])]),e("tr",null,[vs,e("td",null,[e("a",As,[s("NubiaUI"),a(n)])])]),e("tr",null,[gs,e("td",null,[e("a",Ds,[s("RogUI"),a(n)])])]),e("tr",null,[Bs,e("td",null,[e("a",Cs,[s("VisionOS"),a(n)])])])])]),fs])}const ws=t(p,[["render",xs],["__file","system-extension.html.vue"]]);export{ws as default};
