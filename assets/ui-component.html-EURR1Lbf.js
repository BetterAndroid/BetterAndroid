import{_ as i,r as t,o as c,c as r,a as s,b as n,d as a,w as p,e as l}from"./app-ewiN1Yda.js";const d={},y=l(`<h1 id="ui-component" tabindex="-1"><a class="header-anchor" href="#ui-component" aria-hidden="true">#</a> ui-component</h1><p><img src="https://img.shields.io/maven-central/v/com.highcapable.betterandroid/ui-component?logo=apachemaven&amp;logoColor=orange&amp;style=flat-square" alt="Maven Central"><span style="margin-left:5px;"></span><img src="https://img.shields.io/maven-metadata/v?metadataUrl=https%3A%2F%2Fraw.githubusercontent.com%2FHighCapable%2Fmaven-repository%2Frefs%2Fheads%2Fmain%2Frepository%2Freleases%2Fcom%2Fhighcapable%2Fbetterandroid%2Fui-component%2Fmaven-metadata.xml&amp;logo=apachemaven&amp;logoColor=orange&amp;label=highcapable-maven-releases&amp;style=flat-square" alt="Maven metadata URL"><span style="margin-left:5px;"></span><img src="https://img.shields.io/badge/Min SDK-21-orange?logo=android&amp;style=flat-square" alt="Android Min SDK"></p><p>这是针对 UI (用户界面) 相关组件的一个依赖。</p><h2 id="配置依赖" tabindex="-1"><a class="header-anchor" href="#配置依赖" aria-hidden="true">#</a> 配置依赖</h2><p>你可以使用如下方式将此模块添加到你的项目中。</p><h3 id="sweetdependency-推荐" tabindex="-1"><a class="header-anchor" href="#sweetdependency-推荐" aria-hidden="true">#</a> SweetDependency (推荐)</h3><p>在你的项目 <code>SweetDependency</code> 配置文件中添加依赖。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#8DDB8C;">libraries</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">  </span><span style="color:#8DDB8C;">com.highcapable.betterandroid</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#8DDB8C;">ui-component</span><span style="color:#ADBAC7;">:</span></span>
<span class="line"><span style="color:#ADBAC7;">      </span><span style="color:#8DDB8C;">version</span><span style="color:#ADBAC7;">: </span><span style="color:#96D0FF;">+</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在你的项目 <code>build.gradle.kts</code> 中配置依赖。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(com.highcapable.betterandroid.ui.component)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="version-catalog" tabindex="-1"><a class="header-anchor" href="#version-catalog" aria-hidden="true">#</a> Version Catalog</h3><p>在你的项目 <code>gradle/libs.versions.toml</code> 中添加依赖。</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">[</span><span style="color:#F69D50;">versions</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-ui-component = </span><span style="color:#96D0FF;">&quot;&lt;version&gt;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">[</span><span style="color:#F69D50;">libraries</span><span style="color:#ADBAC7;">]</span></span>
<span class="line"><span style="color:#ADBAC7;">betterandroid-ui-component = { module = </span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:ui-component&quot;</span><span style="color:#ADBAC7;">, version.ref = </span><span style="color:#96D0FF;">&quot;betterandroid-ui-component&quot;</span><span style="color:#ADBAC7;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在你的项目 <code>build.gradle.kts</code> 中配置依赖。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(libs.betterandroid.ui.component)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请将 <code>&lt;version&gt;</code> 修改为此文档顶部显示的版本。</p><h3 id="传统方式" tabindex="-1"><a class="header-anchor" href="#传统方式" aria-hidden="true">#</a> 传统方式</h3><p>在你的项目 <code>build.gradle.kts</code> 中配置依赖。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">implementation</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;com.highcapable.betterandroid:ui-component:&lt;version&gt;&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请将 <code>&lt;version&gt;</code> 修改为此文档顶部显示的版本。</p><h2 id="功能介绍" tabindex="-1"><a class="header-anchor" href="#功能介绍" aria-hidden="true">#</a> 功能介绍</h2>`,21),A={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component",target:"_blank",rel:"noopener noreferrer"},v={class:"custom-container tip"},u=s("p",{class:"custom-container-title"},"在找适配器 (Adapter) 吗？",-1),B=s("h3",{id:"activity",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#activity","aria-hidden":"true"},"#"),n(" Activity")],-1),m={class:"custom-container tip"},D=s("p",{class:"custom-container-title"},"本节内容",-1),C={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.activity/-app-binding-activity",target:"_blank",rel:"noopener noreferrer"},b=s("p",null,[n("带有视图绑定的 "),s("code",null,"Activity"),n(" (继承于 "),s("code",null,"AppCompatActivity"),n(")。")],-1),F={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.activity/-app-views-activity",target:"_blank",rel:"noopener noreferrer"},h=s("p",null,[n("基础视图组件 "),s("code",null,"Activity"),n(" (继承于 "),s("code",null,"AppCompatActivity"),n(")。")],-1),g={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.activity/-app-component-activity",target:"_blank",rel:"noopener noreferrer"},k=s("p",null,[n("基础组件 "),s("code",null,"Activity"),n(" (继承于 "),s("code",null,"ComponentActivity"),n(")。")],-1),_=s("p",null,"可用于 Jetpack Compose 项目。",-1),w={class:"custom-container tip"},I=s("p",{class:"custom-container-title"},"小提示",-1),f={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.proxy/-i-back-pressed-controller",target:"_blank",rel:"noopener noreferrer"},W={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.proxy/-i-system-bars-controller",target:"_blank",rel:"noopener noreferrer"},q=s("p",null,[n("你可以在下方的 "),s("a",{href:"#%E7%B3%BB%E7%BB%9F%E4%BA%8B%E4%BB%B6"},"系统事件"),n(" 和 "),s("a",{href:"#%E7%B3%BB%E7%BB%9F%E6%A0%8F-%E7%8A%B6%E6%80%81%E6%A0%8F%E3%80%81%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%AD%89"},"系统栏 (状态栏、导航栏等)"),n(" 中找到详细的使用方法。")],-1),x=l(`<p>在使用 <code>ViewBinding</code> 的情况下，你可以使用 <code>AppBindingActivity</code> 来快速创建一个带有视图绑定的 <code>Activity</code>。</p><p>在 <code>AppBindingActivity</code> 中，你可以直接使用 <code>binding</code> 属性获取视图绑定对象而无需手动调用 <code>setContentView</code> 方法。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MainActivity</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">AppBindingActivity</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">ActivityMainBinding</span><span style="color:#ADBAC7;">&gt;() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState: </span><span style="color:#F69D50;">Bundle</span><span style="color:#ADBAC7;">?) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState)</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.mainText.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>如果你需要在视图装载前进行一些自定义操作，在一般情况下，你可能会这样做。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MainActivity</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">AppCompatActivity</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState: </span><span style="color:#F69D50;">Bundle</span><span style="color:#ADBAC7;">?) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">doSomething</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">setContentView</span><span style="color:#ADBAC7;">(R.layout.activity_main)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">findViewById</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">TextView</span><span style="color:#ADBAC7;">&gt;(R.id.main_text).text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">doSomething</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Your code here.</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用 <code>AppBindingActivity</code> 的情况下，你需要这样做。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MainActivity</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">AppBindingActivity</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">ActivityMainBinding</span><span style="color:#ADBAC7;">&gt;() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState: </span><span style="color:#F69D50;">Bundle</span><span style="color:#ADBAC7;">?) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState)</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.mainText.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onPrepareContentView</span><span style="color:#ADBAC7;">(savedInstanceState: </span><span style="color:#F69D50;">Bundle</span><span style="color:#ADBAC7;">?): </span><span style="color:#F69D50;">LayoutInflater</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">doSomething</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 你可以返回经过处理后的 LayoutInflater，这个实例将用于初始化布局</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">return</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">onPrepareContentView</span><span style="color:#ADBAC7;">(savedInstanceState)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">private</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">doSomething</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// Your code here.</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>你也可以使用 <code>AppViewsActivity</code> 来创建一个基本 <code>Activity</code>，使用 <code>findViewById</code> 方法来获取 <code>View</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MainActivity</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">AppViewsActivity</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState: </span><span style="color:#F69D50;">Bundle</span><span style="color:#ADBAC7;">?) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">setContentView</span><span style="color:#ADBAC7;">(R.layout.activity_main)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">findViewById</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">TextView</span><span style="color:#ADBAC7;">&gt;(R.id.main_text).text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你的项目是一个 Jetpack Compose 项目，你可以使用 <code>AppComponentActivity</code> 来创建一个基本 <code>Activity</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MainActivity</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">AppComponentActivity</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState: </span><span style="color:#F69D50;">Bundle</span><span style="color:#ADBAC7;">?) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">setContent</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#DCBDFB;">Text</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),S={class:"custom-container tip"},V=s("p",{class:"custom-container-title"},"小提示",-1),E=s("code",null,"BetterAndroid",-1),P=s("code",null,"Activity",-1),N=s("h3",{id:"fragment",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#fragment","aria-hidden":"true"},"#"),n(" Fragment")],-1),T={class:"custom-container tip"},M=s("p",{class:"custom-container-title"},"本节内容",-1),L={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.fragment/-app-binding-fragment",target:"_blank",rel:"noopener noreferrer"},R=s("p",null,[n("带有视图绑定的 "),s("code",null,"Fragment"),n("。")],-1),K={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.fragment/-app-views-fragment",target:"_blank",rel:"noopener noreferrer"},H=s("p",null,[n("基础视图组件 "),s("code",null,"Fragment"),n("。")],-1),O={class:"custom-container tip"},G=s("p",{class:"custom-container-title"},"小提示",-1),U={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.proxy/-i-back-pressed-controller",target:"_blank",rel:"noopener noreferrer"},z={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.proxy/-i-system-bars-controller",target:"_blank",rel:"noopener noreferrer"},Y=s("p",null,[n("你可以在下方的 "),s("a",{href:"#%E7%B3%BB%E7%BB%9F%E4%BA%8B%E4%BB%B6"},"系统事件"),n(" 和 "),s("a",{href:"#%E7%B3%BB%E7%BB%9F%E6%A0%8F-%E7%8A%B6%E6%80%81%E6%A0%8F%E3%80%81%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%AD%89"},"系统栏 (状态栏、导航栏等)"),n(" 中找到详细的使用方法。")],-1),J=l(`<p>在使用 <code>ViewBinding</code> 的情况下，你可以使用 <code>AppBindingFragment</code> 来快速创建一个带有视图绑定的 <code>Fragment</code>。</p><p>在 <code>AppBindingFragment</code> 中，你可以直接使用 <code>binding</code> 属性获取视图绑定对象而无需手动重写 <code>onCreateView</code> 方法。</p><p>你不需要考虑 <code>Fragment</code> 的生命周期对 <code>binding</code> 的影响，<code>BetterAndroid</code> 已经为你处理了这些问题。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MainFragment</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">AppBindingFragment</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">FragmentMainBinding</span><span style="color:#ADBAC7;">&gt;() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onViewCreated</span><span style="color:#ADBAC7;">(view: </span><span style="color:#F69D50;">View</span><span style="color:#ADBAC7;">, savedInstanceState: </span><span style="color:#F69D50;">Bundle</span><span style="color:#ADBAC7;">?) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">onViewCreated</span><span style="color:#ADBAC7;">(view, savedInstanceState)</span></span>
<span class="line"><span style="color:#ADBAC7;">        binding.mainText.text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以使用 <code>AppViewsFragment</code> 来创建一个基本 <code>Fragment</code>。</p><p>同样地，你无需重写 <code>onCreateView</code> 方法，直接将需要绑定的布局资源 ID 填入构造方法即可。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">MainFragment</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">AppViewsFragment</span><span style="color:#ADBAC7;">(</span><span style="color:#F69D50;">R</span><span style="color:#ADBAC7;">.</span><span style="color:#F69D50;">layout</span><span style="color:#ADBAC7;">.</span><span style="color:#F69D50;">fragment_main</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onViewCreated</span><span style="color:#ADBAC7;">(view: </span><span style="color:#F69D50;">View</span><span style="color:#ADBAC7;">, savedInstanceState: </span><span style="color:#F69D50;">Bundle</span><span style="color:#ADBAC7;">?) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">onViewCreated</span><span style="color:#ADBAC7;">(view, savedInstanceState)</span></span>
<span class="line"><span style="color:#ADBAC7;">        view.</span><span style="color:#DCBDFB;">findViewById</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">TextView</span><span style="color:#ADBAC7;">&gt;(R.id.main_text).text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),j={class:"custom-container tip"},Q=s("p",{class:"custom-container-title"},"小提示",-1),X=s("code",null,"BetterAndroid",-1),Z=s("code",null,"Fragment",-1),$=s("h3",{id:"系统事件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#系统事件","aria-hidden":"true"},"#"),n(" 系统事件")],-1),ss={class:"custom-container tip"},ns=s("p",{class:"custom-container-title"},"本节内容",-1),as={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.backpress/-back-pressed-controller",target:"_blank",rel:"noopener noreferrer"},es=s("p",null,"返回事件控制器。",-1),ls={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.backpress.callback/-on-back-pressed-callback",target:"_blank",rel:"noopener noreferrer"},os=s("p",null,"简单返回事件回调。",-1),ps={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.proxy/-i-back-pressed-controller",target:"_blank",rel:"noopener noreferrer"},ts=s("p",null,"返回事件控制器接口。",-1),is=l(`<p>在 <code>androidx</code> 的依赖 <code>androidx.activity:activity</code> 中已经为开发者提供了一个 <code>OnBackPressedDispatcher</code>。</p><p>但是出于对官方贸然作废重写 <code>onBackPressed</code> 方法的不满，<code>BetterAndroid</code> 对 <code>OnBackPressedDispatcher</code> 相关功能进行了封装， 支持了更适用于 Kotlin 写法的返回事件回调功能，同时添加了忽略全部回调事件直接释放返回事件的功能，使其变得更加灵活好用。</p><p><code>AppBindingActivity</code>、<code>AppViewsActivity</code>、<code>AppComponentActivity</code>、<code>AppBindingFragment</code>、<code>AppViewsFragment</code> 已经默认实现了 <code>IBackPressedController</code> 接口，你可以直接使用 <code>backPressed</code> 获取 <code>BackPressedController</code>。</p><p>但是你依然可以在 <code>Activity</code> 中手动创建一个 <code>BackPressedController</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">YourActivity</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">AppCompatActivity</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 创建一个懒加载对象</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> backPressed </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">lazy</span><span style="color:#ADBAC7;"> { BackPressedController.</span><span style="color:#DCBDFB;">from</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">this</span><span style="color:#ADBAC7;">) }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState: </span><span style="color:#F69D50;">Bundle</span><span style="color:#ADBAC7;">?) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">setContentView</span><span style="color:#ADBAC7;">(R.layout.activity_main)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 在这里调用 backPressed 实现相关功能</span></span>
<span class="line"><span style="color:#ADBAC7;">        backPressed</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onDestroy</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">onDestroy</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 销毁 backPressed，这会移除所有回调事件</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 可选，防止内存泄漏</span></span>
<span class="line"><span style="color:#ADBAC7;">        backPressed.</span><span style="color:#DCBDFB;">destroy</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是 <code>BackPressedController</code> 的基本用法。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 添加一个返回回调</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> callback </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> backPressed.</span><span style="color:#DCBDFB;">addCallback</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 在回调内忽略当前回调并触发返回操作</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 例如你可以在此处弹出一个对话框询问用户是否退出且此时选择了 “是”</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 传入的对象需要为创建此回调的 backPressed</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">trigger</span><span style="color:#ADBAC7;">(backPressed)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 或者在触发后同时移除自身</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">trigger</span><span style="color:#ADBAC7;">(backPressed, removed </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 直接移除 (不推荐，你应该使用 backPressed.removeCallback)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">remove</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 你也可以手动创建一个回调</span></span>
<span class="line"><span style="color:#768390;">// 注意：请确保引入 com.highcapable.betterandroid.ui.component.backpress.callback</span></span>
<span class="line"><span style="color:#768390;">//      包名下的 OnBackPressedCallback，而不是 androidx.activity.OnBackPressedCallback</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> callback </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">OnBackPressedCallback</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// Your code here.</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 然后添加到 backPressed</span></span>
<span class="line"><span style="color:#ADBAC7;">backPressed.</span><span style="color:#DCBDFB;">addCallback</span><span style="color:#ADBAC7;">(callback)</span></span>
<span class="line"><span style="color:#768390;">// 移除一个已知的回调</span></span>
<span class="line"><span style="color:#ADBAC7;">backPressed.</span><span style="color:#DCBDFB;">removeCallback</span><span style="color:#ADBAC7;">(callback)</span></span>
<span class="line"><span style="color:#768390;">// 触发系统的返回操作</span></span>
<span class="line"><span style="color:#ADBAC7;">backPressed.</span><span style="color:#DCBDFB;">trigger</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// 你可以设置 ignored 为 true 来忽略所有已添加的回调直接返回</span></span>
<span class="line"><span style="color:#ADBAC7;">backPressed.</span><span style="color:#DCBDFB;">trigger</span><span style="color:#ADBAC7;">(ignored </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 判断当前是否存在已启用的回调</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> hasEnabledCallbacks </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> backPressed.hasEnabledCallbacks</span></span>
<span class="line"><span style="color:#768390;">// 销毁，这会移除所有回调事件</span></span>
<span class="line"><span style="color:#ADBAC7;">backPressed.</span><span style="color:#DCBDFB;">destroy</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>在使用 <code>BackPressedController</code> 后，当前的 <code>OnBackPressedDispatcher</code> 已被其自动接管， 你不应该继续使用 <code>onBackPressedDispatcher.addCallback(...)</code>，这会造成存在未知的 (野生的) 回调导致无法干净地移除它们。</p></div><h3 id="通知" tabindex="-1"><a class="header-anchor" href="#通知" aria-hidden="true">#</a> 通知</h3>`,11),cs={class:"custom-container tip"},rs=s("p",{class:"custom-container-title"},"本节内容",-1),ds={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.notification/-notification-builder",target:"_blank",rel:"noopener noreferrer"},ys=s("p",null,"系统通知构建器。",-1),As={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.notification/-notification-channel-builder",target:"_blank",rel:"noopener noreferrer"},vs=s("p",null,"系统通知渠道构建器。",-1),us={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.notification/-notification-channel-group-builder",target:"_blank",rel:"noopener noreferrer"},Bs=s("p",null,"系统通知渠道组构建器。",-1),ms={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.notification.type/-notification-importance",target:"_blank",rel:"noopener noreferrer"},Ds=s("p",null,"系统通知优先级。",-1),Cs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.notification/-notification-poster",target:"_blank",rel:"noopener noreferrer"},bs=s("p",null,"系统通知推送器。",-1),Fs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.notification.factory",target:"_blank",rel:"noopener noreferrer"},hs=s("p",null,"适用于通知构建的扩展方法。",-1),gs=l(`<p>想要在 Android 中创建并发送一条通知并不容易，其中最大的问题就在于系统通知的创建复杂、管理混乱且 API 难以简单地兼容旧版本。</p><p>尤其是当开发者看到了 <code>NotificationCompat</code> 以及 <code>NotificationChannelCompat</code> 这两个类时，更是会感到无从下手。</p><p>于是 <code>BetterAndroid</code> 对系统通知相关 API 进行了整体性的封装，基本上覆盖了系统通知中能够用到的所有功能和调用。</p><p>所以你不需要再考虑类似通知渠道这样 Android 8 及以下系统的兼容性问题，<code>BetterAndroid</code> 已经为你处理了这些问题。</p><p>在 Kotlin 中你能够更加方便地创建一条系统通知。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你当前的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 创建需要推送的通知对象</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> notification </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.</span><span style="color:#DCBDFB;">createNotification</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 创建并设置通知渠道</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 在 Android 8 及以上系统中必须存在一个通知渠道</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 在低于 Android 8 的系统中，此功能会被自动兼容化处理</span></span>
<span class="line"><span style="color:#ADBAC7;">    channel </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">NotificationChannel</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;my_channel_id&quot;</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 设置通知渠道名称 (这会显示在系统的通知设置中)</span></span>
<span class="line"><span style="color:#ADBAC7;">        name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My Channel&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 设置通知渠道描述 (这会显示在系统的通知设置中)</span></span>
<span class="line"><span style="color:#ADBAC7;">        description </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My channel description.&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 其余用法与 NotificationChannelCompat.Builder 保持一致</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置通知小图标 (这将会显示在状态栏和通知栏中)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 通知小图标必须为单色图标 (建议为矢量图)</span></span>
<span class="line"><span style="color:#ADBAC7;">    smallIconResId </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> R.drawable.ic_my_notification</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置通知标题</span></span>
<span class="line"><span style="color:#ADBAC7;">    contentTitle </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My Notification&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置通知内容</span></span>
<span class="line"><span style="color:#ADBAC7;">    contentText </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 其余用法与 NotificationCompat.Builder 保持一致</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 使用默认通知 ID 推送通知</span></span>
<span class="line"><span style="color:#ADBAC7;">notification.</span><span style="color:#DCBDFB;">post</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// 使用自定义通知 ID 推送通知</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> notifyId </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span></span>
<span class="line"><span style="color:#ADBAC7;">notification.</span><span style="color:#DCBDFB;">post</span><span style="color:#ADBAC7;">(notifyId)</span></span>
<span class="line"><span style="color:#768390;">// 取消当前通知 (这会从系统通知栏中清除这条通知)</span></span>
<span class="line"><span style="color:#ADBAC7;">notification.</span><span style="color:#DCBDFB;">cancel</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// 判断当前通知是否已经被取消</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> isCanceled </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> notification.isCanceled</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),ks={class:"custom-container warning"},_s=s("p",{class:"custom-container-title"},"注意",-1),ws=s("p",null,"在 Android 13 及以上系统中，你需要为通知定义并添加运行时权限。",-1),Is=s("p",null,[n("当未正确定义此权限时，调用 "),s("code",null,"post"),n(" 方法时将自动要求你添加权限到 "),s("code",null,"AndroidManifest.xml"),n(" 中。")],-1),fs={href:"https://developer.android.com/develop/ui/views/notifications/notification-permission",target:"_blank",rel:"noopener noreferrer"},Ws=l(`<p>你可以使用以下方式在通知渠道中为通知设置优先级。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你当前的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 创建需要推送的通知对象</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> notification </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context.</span><span style="color:#DCBDFB;">createNotification</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 创建并设置通知渠道</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 在低于 Android 8 的系统中，此功能会被自动兼容化处理</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 优先级决定了通知的重要性，这会影响通知的显示方式</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// BetterAndroid 将 NotificationManager 中的优先级静态变量</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 封装到了 NotificationImportance 中，你可以更方便地设置通知的优先级</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 这里我们设置了 NotificationImportance.HIGH (高优先级)，</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 这将会在系统通知栏中以横幅的形式显示通知并伴随响铃提醒</span></span>
<span class="line"><span style="color:#ADBAC7;">    channel </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">NotificationChannel</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;my_channel_id&quot;</span><span style="color:#ADBAC7;">, importance </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> NotificationImportance.HIGH) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My Channel&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">        description </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My channel description.&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    smallIconResId </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> R.drawable.ic_my_notification</span></span>
<span class="line"><span style="color:#ADBAC7;">    contentTitle </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My Notification&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    contentText </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 使用默认通知 ID 推送通知</span></span>
<span class="line"><span style="color:#ADBAC7;">notification.</span><span style="color:#DCBDFB;">post</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当遇到多组通知时，你可以使用以下方式创建一组通知渠道。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你当前的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 创建一个通知渠道组</span></span>
<span class="line"><span style="color:#768390;">// 在低于 Android 8 的系统中，此功能将无作用</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> channelGroup </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">NotificationChannelGroup</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;my_channel_group_id&quot;</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置通知渠道组名称 (这会显示在系统的通知设置中)</span></span>
<span class="line"><span style="color:#ADBAC7;">    name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My Channel Group&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置通知渠道组描述 (这会显示在系统的通知设置中)</span></span>
<span class="line"><span style="color:#ADBAC7;">    description </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My channel group description.&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 创建第一个通知渠道并指定通知渠道组</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> channel1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">NotificationChannel</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;my_channel_id_1&quot;</span><span style="color:#ADBAC7;">, channelGroup) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My Channel 1&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    description </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My channel description.&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 创建第二个通知渠道并指定通知渠道组</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> channel2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">NotificationChannel</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;my_channel_id_2&quot;</span><span style="color:#ADBAC7;">, channelGroup) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My Channel 2&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    description </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My channel description.&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 使用 channel1 创建第一条通知并推送</span></span>
<span class="line"><span style="color:#ADBAC7;">context.</span><span style="color:#DCBDFB;">createNotification</span><span style="color:#ADBAC7;">(channel1) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    smallIconResId </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> R.drawable.ic_my_notification</span></span>
<span class="line"><span style="color:#ADBAC7;">    contentTitle </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My Notification 1&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    contentText </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">}.</span><span style="color:#DCBDFB;">post</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">1</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 使用 channel2 创建第二条通知并推送</span></span>
<span class="line"><span style="color:#ADBAC7;">context.</span><span style="color:#DCBDFB;">createNotification</span><span style="color:#ADBAC7;">(channel2) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    smallIconResId </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> R.drawable.ic_my_notification</span></span>
<span class="line"><span style="color:#ADBAC7;">    contentTitle </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My Notification 2&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    contentText </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">}.</span><span style="color:#DCBDFB;">post</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">2</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述内容将创建一个通知渠道组并在其中添加两个通知渠道。</p><p>通知推送后，系统将会自动为这两个通知渠道创建一个组分类。</p>`,8),qs={class:"custom-container warning"},xs=s("p",{class:"custom-container-title"},"注意",-1),Ss=s("p",null,"通知渠道中的设置仅会在首次创建这个通知渠道时生效，如果通知渠道的设置被用户修改过，那么这些设置将不会再被覆盖。",-1),Vs=s("p",null,"你无法修改已经创建的通知渠道设置，但是你可以重新为其分配一个新的通知渠道 ID，这样将会创建一个新的通知渠道。",-1),Es={href:"https://developer.android.com/develop/ui/views/notifications/channels",target:"_blank",rel:"noopener noreferrer"},Ps=l(`<p>上方的示例中，通知对象是被自动化管理的，如果你希望手动创建一个通知对象而并不依赖于 <code>context.createNotification</code> 方法，请参考以下示例。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你当前的 Context</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> context: </span><span style="color:#F69D50;">Context</span></span>
<span class="line"><span style="color:#768390;">// 创建需要推送的通知对象</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> notification </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">Notification</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置 Context</span></span>
<span class="line"><span style="color:#ADBAC7;">    context </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> context,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 创建并设置通知渠道</span></span>
<span class="line"><span style="color:#ADBAC7;">    channel </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">NotificationChannel</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;my_channel_id&quot;</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        name </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My Channel&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">        description </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My channel description.&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    smallIconResId </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> R.drawable.ic_my_notification</span></span>
<span class="line"><span style="color:#ADBAC7;">    contentTitle </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;My Notification&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    contentText </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Hello World!&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"><span style="color:#768390;">// 将当前通知作为推送对象</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> poster </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> notification.</span><span style="color:#DCBDFB;">asPoster</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// 使用默认通知 ID 推送通知</span></span>
<span class="line"><span style="color:#ADBAC7;">poster.</span><span style="color:#DCBDFB;">post</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// 使用自定义通知 ID 推送通知</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> notifyId </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">1</span></span>
<span class="line"><span style="color:#ADBAC7;">poster.</span><span style="color:#DCBDFB;">post</span><span style="color:#ADBAC7;">(notifyId)</span></span>
<span class="line"><span style="color:#768390;">// 取消当前通知 (这会从系统通知栏中清除这条通知)</span></span>
<span class="line"><span style="color:#ADBAC7;">poster.</span><span style="color:#DCBDFB;">cancel</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// 判断当前通知是否已经被取消</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> isCanceled </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> poster.isCanceled</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>通过 <code>Notification</code>、<code>NotificationChannel</code>、<code>NotificationChannelGroup</code> 创建的对象是对 <code>NotificationCompat</code>、<code>NotificationChannelCompat</code>、<code>NotificationChannelGroupCompat</code> 的一个包装，你可以使用 <code>instance</code> 来得到其中的实际对象以进行一些你自己的操作。</p><p>你还可以通过 <code>Context.notificationManager</code> 来获取到 <code>NotificationManagerCompat</code> 对象以进行一些你自己的操作。</p></div><h3 id="边衬区-insets" tabindex="-1"><a class="header-anchor" href="#边衬区-insets" aria-hidden="true">#</a> 边衬区 (Insets)</h3>`,5),Ns={class:"custom-container tip"},Ts=s("p",{class:"custom-container-title"},"本节内容",-1),Ms={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.insets/-window-insets-wrapper",target:"_blank",rel:"noopener noreferrer"},Ls=s("p",null,[s("code",null,"WindowInsets"),n(" 的包装器。")],-1),Rs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.insets/-window-insets-wrapper/-absolute",target:"_blank",rel:"noopener noreferrer"},Ks=s("p",null,[s("code",null,"WindowInsetsWrapper"),n(" 的绝对 Insets 对象。")],-1),Hs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.insets/-insets-wrapper",target:"_blank",rel:"noopener noreferrer"},Os=s("p",null,[s("code",null,"Insets"),n(" 的包装器。")],-1),Gs={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.insets.factory",target:"_blank",rel:"noopener noreferrer"},Us=s("p",null,[n("适用于 "),s("code",null,"Insets"),n("、"),s("code",null,"WindowInsets"),n(" 的扩展方法。")],-1),zs={class:"custom-container tip"},Ys=s("p",{class:"custom-container-title"},"小提示",-1),Js={href:"https://developer.android.com/develop/ui/views/layout/insets?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},js=l('<div class="custom-container warning"><p class="custom-container-title">注意</p><p>在 <code>1.0.3</code> 及之前版本的依赖中，<code>BetterAndroid</code> 将 Insest、Window Insets 与 <a href="#%E7%B3%BB%E7%BB%9F%E6%A0%8F-%E7%8A%B6%E6%80%81%E6%A0%8F%E3%80%81%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%AD%89">系统栏 (状态栏、导航栏等)</a> 封装在了一起， 这是曾经不正确的做法，目前对于 Insets、Window Insets 已被解耦合为独立的功能，正如你现在所看到的。</p></div><p>Insets 和 Window Insets 在 Android 中是一个非常重要的概念，虽然这个 API 早在 Android 5.0 就已经存在了，但是在 Android 10 中才被官方正式推荐使用。(自 Android 9 开始，系统加入了异形屏处理的相关 API)</p><p>Insets 是一个特殊的空间，它代表 “附着” 在视图四周的占位区域，而诸如异形屏 (刘海屏) 遮挡的部分、状态栏、导航栏以及输入法等系统持有的 Insets 则称为 Window Insets。</p><p><code>BetterAndroid</code> 所做的主要就是对这套 API 进行了封装，使其更加易用。</p><p>下面，你可以通过一个存在的 <code>WindowInsets</code> 对象来创建一个 <code>WindowInsetsWrapper</code> 对象。</p>',5),Qs={class:"custom-container tip"},Xs=s("p",{class:"custom-container-title"},"小提示",-1),Zs=s("code",null,"WindowInsetsWrapper",-1),$s={href:"https://developer.android.com/jetpack/compose/layouts/insets",target:"_blank",rel:"noopener noreferrer"},sn=l(`<p>出于对向下兼容的考虑，<code>WindowInsetsWrapper</code> 封装的对象为 <code>WindowInsetsCompat</code> 并建议使用它而不是 <code>WindowInsets</code>。</p><p><code>WindowInsetsWrapper</code> 封装了 <code>WindowInsetsCompat.getInsets</code>、<code>WindowInsetsCompat.getInsetsIgnoringVisibility</code>、<code>WindowInsetsCompat.isVisible</code> 等方法， 你无需再为了获取一个 Insets 对象而写超级长的 <code>WindowInsetsCompat.getInsets(WindowInsetsCompat.Type.systemBars())</code> 等代码。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这个就是你的 WindowInsets</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> windowInsets: </span><span style="color:#F69D50;">WindowInsetsCompat</span></span>
<span class="line"><span style="color:#768390;">// 创建一个 WindowInsetsWrapper</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> insetsWrapper </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> windowInsets.</span><span style="color:#DCBDFB;">createWrapper</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// 你还可以通过 from 方法来创建</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> insetsWrapper </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> WindowInsetsWrapper.</span><span style="color:#DCBDFB;">from</span><span style="color:#ADBAC7;">(windowInsets)</span></span>
<span class="line"><span style="color:#768390;">// 获取系统栏的 Insets</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> systemBars </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> insetsWrapper.systemBars</span></span>
<span class="line"><span style="color:#768390;">// 通常情况下，获取到的 Insets 会包含它的可见性，</span></span>
<span class="line"><span style="color:#768390;">// 在不可见的情况下，Insets 的值全部为 0</span></span>
<span class="line"><span style="color:#768390;">// 你可以通过参数 ignoringVisibility 来忽略可见性</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> systemBars </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> insetsWrapper.</span><span style="color:#DCBDFB;">systemBars</span><span style="color:#ADBAC7;">(ignoreVisibility </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 获取到 Insets 对象后，你可以使用 isVisible 来判断其是否可见</span></span>
<span class="line"><span style="color:#768390;">// 注意：Insets 的值是由系统提供的，isVisible 只是一个状态，</span></span>
<span class="line"><span style="color:#768390;">// 无论其值是否为 0，你都可以使用它来判断当前的 Insets 是否可见</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> insetsIsVisible </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> systemBars.isVisible</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>BetterAndroid</code> 针对 Android 9 以下异形屏设备的主流品牌的厂商各自的私有方案做了一个兼容处理，如果你需要兼容更旧的设备，你可以在方法参数中传入一个可选的 <code>Window</code> 对象。</p><p>如果你的应用程序只需要适配 Android 9 及以上的设备，你可以忽略此参数。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这个就是你的 Activity</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> activity: </span><span style="color:#F69D50;">Activity</span></span>
<span class="line"><span style="color:#768390;">// 在通常情况下，你可以通过当前 Activity 获取 Window</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> window </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> activity.window</span></span>
<span class="line"><span style="color:#768390;">// 创建一个 WindowInsetsWrapper</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> insetsWrapper </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> windowInsets.</span><span style="color:#DCBDFB;">createWrapper</span><span style="color:#ADBAC7;">(window)</span></span>
<span class="line"><span style="color:#768390;">// 你还可以通过 from 方法来创建</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> insetsWrapper </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> WindowInsetsWrapper.</span><span style="color:#DCBDFB;">from</span><span style="color:#ADBAC7;">(windowInsets, window)</span></span>
<span class="line"><span style="color:#768390;">// 获取异形屏的 Insets</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> displayCutout </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> insetsWrapper.displayCutout</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>如果你的应用程序需要在 Android 10 或以下设备上运行，我们建议始终传入一个 <code>Window</code> 对象以保证 <code>BetterAndroid</code> 能正确为你处理兼容问题。</p><p>目前已知兼容问题为 <code>androidx</code> 提供的兼容处理方法无法对 Android 11 以下设备的 <code>statusBars</code>、<code>navigationBars</code>、<code>systemBars</code> 的 <code>isVisible</code> 和其内容给出正确的值，<code>BetterAndroid</code> 为此进行了修复。</p></div><p>你从 <code>WindowInsetsWrapper</code> 获取到的任何 Insets 对象即 <code>InsetsWrapper</code>，它封装了 <code>Insets</code> 对象并实现了可控的 <code>isVisible</code> 状态。</p><p><code>InsetsWrapper</code> 可以轻松地转换为原始的 <code>Insets</code> 对象，同时也可以重新转换为 <code>InsetsWrapper</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 获取系统栏的 Insets</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> systemBars </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> insetsWrapper.systemBars</span></span>
<span class="line"><span style="color:#768390;">// 转换为 Insets</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> insets </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> systemBars.</span><span style="color:#DCBDFB;">toInsets</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// 转换为 InsetsWrapper</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> wrapper </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> insets.</span><span style="color:#DCBDFB;">toWrapper</span><span style="color:#ADBAC7;">(systemBars.isVisible)</span></span>
<span class="line"><span style="color:#768390;">// 你还可以通过 of 方法来创建</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> wrapper </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> InsetsWrapper.</span><span style="color:#DCBDFB;">of</span><span style="color:#ADBAC7;">(insets, systemBars.isVisible)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 <code>Insets</code> 不同的是，<code>InsetsWrapper</code> 重载了运算符，你可以使用 <code>+</code>、<code>-</code> 以及 <code>or</code>、<code>and</code> 来对其进行运算或是对其进行比较。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> insets1 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> InsetsWrapper.</span><span style="color:#DCBDFB;">of</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">10</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> insets2 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> InsetsWrapper.</span><span style="color:#DCBDFB;">of</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;">, </span><span style="color:#6CB6FF;">20</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 使用 &quot;+&quot; 运算符，等同于 Insets.add(insets1, insets2)</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> insets3 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> insets1 </span><span style="color:#F47067;">+</span><span style="color:#ADBAC7;"> insets2</span></span>
<span class="line"><span style="color:#768390;">// 使用 &quot;-&quot; 运算符，等同于 Insets.subtract(insets2, insets1)</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> insets3 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> insets2 </span><span style="color:#F47067;">-</span><span style="color:#ADBAC7;"> insets1</span></span>
<span class="line"><span style="color:#768390;">// 使用 &quot;or&quot; 运算符，等同于 Insets.max(insets1, insets2)</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> insets3 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> insets1 or insets2</span></span>
<span class="line"><span style="color:#768390;">// 使用 &quot;and&quot; 运算符，等同于 Insets.min(insets1, insets2)</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> insets3 </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> insets1 and insets2</span></span>
<span class="line"><span style="color:#768390;">// 使用 &quot;&gt;&quot; 运算符进行比较</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> isUpperTo </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> insets1 </span><span style="color:#F47067;">&gt;</span><span style="color:#ADBAC7;"> insets2</span></span>
<span class="line"><span style="color:#768390;">// 使用 &quot;&lt;&quot; 运算符进行比较</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> isLowerTo </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> insets1 </span><span style="color:#F47067;">&lt;</span><span style="color:#ADBAC7;"> insets2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取到 Insets 对象后，一般做法是设置为 <code>View</code> 的 <code>padding</code>，让其为系统占位置的地方 “让路”。</p><p>无论是 <code>InsetsWrapper</code> 还是 <code>Insets</code>，你都不需要使用诸如 <code>View.setPadding(insets.left, insets.top, insets.right, insets.bottom)</code> 这样的形式，这看起来及其不友好。</p><p>你可以使用以下方式来轻松地将它直接设置为 <code>View</code> 的 <code>padding</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这个就是你当前的 View</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> view: </span><span style="color:#F69D50;">View</span></span>
<span class="line"><span style="color:#768390;">// 获取系统栏的 Insets</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> systemBars </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> insetsWrapper.systemBars</span></span>
<span class="line"><span style="color:#768390;">// 使用 Insets 设置 View 的 padding</span></span>
<span class="line"><span style="color:#ADBAC7;">view.</span><span style="color:#DCBDFB;">setInsetsPadding</span><span style="color:#ADBAC7;">(systemBars)</span></span>
<span class="line"><span style="color:#768390;">// 由于这里演示的对象是系统栏，你可以仅更新纵向 (上下) 的 padding</span></span>
<span class="line"><span style="color:#768390;">// 使用 updateInsetsPadding 方法的作用同 updatePadding</span></span>
<span class="line"><span style="color:#ADBAC7;">view.</span><span style="color:#DCBDFB;">updateInsetsPadding</span><span style="color:#ADBAC7;">(systemBars, vertical </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面我们说到了，要创建一个 <code>WindowInsetsWrapper</code> 对象，你需要一个已存在的 <code>WindowInsetsCompat</code> 对象。</p><p>出于对向下兼容的考虑，你可以使用 <code>ViewCompat.setOnApplyWindowInsetsListener</code> 来为 <code>View</code> 设置一个改变监听。</p><p>它的实质作用是控制 Window Insets 的传递，Window Insets 通过 <code>View.onApplyWindowInsets</code> 方法由根视图向子视图传递， 直到你使用 <code>WindowInsetsCompat.CONSUMED</code> 来明确消费掉它才会停止传递。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这个就是你当前的 View</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> view: </span><span style="color:#F69D50;">View</span></span>
<span class="line"><span style="color:#768390;">// 设置 View 的 Window Insets 改变监听</span></span>
<span class="line"><span style="color:#ADBAC7;">ViewCompat.</span><span style="color:#DCBDFB;">setOnApplyWindowInsetsListener</span><span style="color:#ADBAC7;">(view) { view, insets </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// insets 就是当前的 WindowInsetsCompat 对象</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 你可以通过它创建 WindowInsetsWrapper</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> insetsWrapper </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> insets.</span><span style="color:#DCBDFB;">createWrapper</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 在最后一位消费掉 Window Insets，将停止继续向下传递</span></span>
<span class="line"><span style="color:#ADBAC7;">    WindowInsetsCompat.CONSUMED </span><span style="color:#768390;">// 或者填入当前的 insets 继续向下传递</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的做法看起来会很麻烦，所以 <code>BetterAndroid</code> 同样为你提供了一个更加简单的方法。</p><p>例如，我们需要得知输入法所占的空间并为输入法布局设置来自 Window Insets 的 <code>padding</code>。</p><p>此时你可以使用 <code>View.handleOnWindowInsetsChanged</code> 直接得到一个 <code>WindowInsetsWrapper</code> 对象。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你的输入法布局</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> imeSpaceLayout: </span><span style="color:#F69D50;">FrameLayout</span></span>
<span class="line"><span style="color:#768390;">// 处理 View 的 Window Insets 改变监听</span></span>
<span class="line"><span style="color:#ADBAC7;">imeSpaceLayout.</span><span style="color:#DCBDFB;">handleOnWindowInsetsChanged</span><span style="color:#ADBAC7;"> { imeSpaceLayout, insetsWrapper </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置由 ime 提供的 padding</span></span>
<span class="line"><span style="color:#ADBAC7;">    imeSpaceLayout.</span><span style="color:#DCBDFB;">setInsetsPadding</span><span style="color:#ADBAC7;">(insetsWrapper.ime)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 或者使用 ime 更新底部的 padding</span></span>
<span class="line"><span style="color:#ADBAC7;">    imeSpaceLayout.</span><span style="color:#DCBDFB;">updateInsetsPadding</span><span style="color:#ADBAC7;">(insetsWrapper.ime, bottom </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想对子视图消费掉 Window Insets 使其不再向下传递，你只需要在方法参数中设置 <code>consumed = true</code> 即可。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 处理 View 的 Window Insets 改变监听</span></span>
<span class="line"><span style="color:#ADBAC7;">imeSpaceLayout.</span><span style="color:#DCBDFB;">handleOnWindowInsetsChanged</span><span style="color:#ADBAC7;">(consumed </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">) { imeSpaceLayout, insetsWrapper </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 内容与上述相同</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想同时在 Window Insets 改变时使其拥有动画效果，你无需重新设置一个 <code>View.setWindowInsetsAnimationCallback</code>。</p><p>你只需要在方法参数中设置 <code>animated = true</code> 即可，这样回调就会在每次 Window Insets 改变中触发。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 处理 View 的 Window Insets 改变监听</span></span>
<span class="line"><span style="color:#ADBAC7;">imeSpaceLayout.</span><span style="color:#DCBDFB;">handleOnWindowInsetsChanged</span><span style="color:#ADBAC7;">(animated </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span><span style="color:#ADBAC7;">) { imeSpaceLayout, insetsWrapper </span><span style="color:#F47067;">-&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 内容与上述相同</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>这个特性是从 Android 11 开始引入的，在这之前的系统中回调依然会被立即触发，所以将不会产生任何动画效果。</p></div><p>另外，当你设置了 Window Insets 改变的监听后，你不需要关心监听是何时设置的，你可以在任何时候移除它们。</p><p>这个操作会移除所有 <code>View.setOnApplyWindowInsetsListener</code>、<code>View.setWindowInsetsAnimationCallback</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这个就是你当前的 View</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> view: </span><span style="color:#F69D50;">View</span></span>
<span class="line"><span style="color:#768390;">// 移除 View 的 Window Insets 改变监听</span></span>
<span class="line"><span style="color:#ADBAC7;">view.</span><span style="color:#DCBDFB;">removeWindowInsetsListener</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>你只能为一个 <code>View</code> 设置一个 Window Insets 监听，重复设置的监听会被最后一次覆盖掉。</p></div><p>如果你想直接从当前 <code>View</code> 中获取 Window Insets，那么你还可以使用以下方式创建一个 <code>WindowInsetsWrapper</code> 对象。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这个就是你当前的 View</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> view: </span><span style="color:#F69D50;">View</span></span>
<span class="line"><span style="color:#768390;">// 创建一个 WindowInsetsWrapper</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> insetsWrapper </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> view.</span><span style="color:#DCBDFB;">createRootWindowInsetsWrapper</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// 你还可以通过 from 方法来创建</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> insetsWrapper </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> WindowInsetsWrapper.</span><span style="color:#DCBDFB;">from</span><span style="color:#ADBAC7;">(view)</span></span>
<span class="line"><span style="color:#768390;">// 获取系统栏的 Insets</span></span>
<span class="line"><span style="color:#768390;">// 如果无法通过 View 获取到 Window Insets，将会返回 null</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> systemBars </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> insetsWrapper?.systemBars</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上述做法，<code>WindowInsetsWrapper</code> 还提供了一个 <code>WindowInsetsWrapper.Absolute</code> 对象，你可以无需通过任何监听即可直接通过 <code>Window.getDecorView</code> 获取到一个绝对的 Insets 对象。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这个就是你的 Activity</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> activity: </span><span style="color:#F69D50;">Activity</span></span>
<span class="line"><span style="color:#768390;">// 在通常情况下，你可以通过当前 Activity 获取 Window</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> window </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> activity.window</span></span>
<span class="line"><span style="color:#768390;">// 创建一个 WindowInsetsWrapper.Absolute</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> absoluteWrapper </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> WindowInsetsWrapper.Absolute.</span><span style="color:#DCBDFB;">from</span><span style="color:#ADBAC7;">(window)</span></span>
<span class="line"><span style="color:#768390;">// 获取状态栏的 Insets</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> statusBar </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> absoluteWrapper.statusBar</span></span>
<span class="line"><span style="color:#768390;">// 获取导航栏的 Insets</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> navigationBar </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> absoluteWrapper.navigationBar</span></span>
<span class="line"><span style="color:#768390;">// 获取系统栏的 Insets</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> systemBars </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> absoluteWrapper.systemBars</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>这种方式获取到的值仅供参考，我们并不推荐这样去获取 Insets 对象，在当前为异形屏设备时，这些值可能会不准确。</p></div><p>以下是 <code>WindowInsetsWrapper</code> 中提供的全部 Insets。</p><table><thead><tr><th>Insets</th><th>描述</th></tr></thead><tbody><tr><td><code>statusBars</code></td><td>状态栏</td></tr><tr><td><code>navigationBars</code></td><td>导航栏</td></tr><tr><td><code>captionBar</code></td><td>标题栏</td></tr><tr><td><code>systemBars</code></td><td>系统栏 (<code>captionBar</code> + <code>statusBars</code> + <code>navigationBars</code>)</td></tr><tr><td><code>ime</code></td><td>输入法</td></tr><tr><td><code>tappableElement</code></td><td>可点击元素</td></tr><tr><td><code>systemGestures</code></td><td>系统手势</td></tr><tr><td><code>mandatorySystemGestures</code></td><td>强制系统手势</td></tr><tr><td><code>displayCutout</code></td><td>异形屏 (刘海屏)</td></tr><tr><td><code>waterFall</code></td><td>瀑布屏 (曲面屏)</td></tr><tr><td><code>safeGestures</code></td><td>安全手势 (<code>systemGestures</code> + <code>mandatorySystemGestures</code> + <code>waterFall</code> + <code>tappableElement</code>)</td></tr><tr><td><code>safeDrawing</code></td><td>安全绘制 (<code>displayCutout</code> + <code>systemBars</code> + <code>ime</code>)</td></tr><tr><td><code>safeDrawingIgnoringIme</code></td><td>安全绘制 (不包括 <code>ime</code>) (<code>displayCutout</code> + <code>systemBars</code>)</td></tr><tr><td><code>safeContent</code></td><td>安全内容 (<code>safeDrawing</code> + <code>safeGestures</code>)</td></tr></tbody></table><p>以下是 <code>WindowInsetsWrapper.Absolute</code> 中提供的全部 Insets。</p><table><thead><tr><th>Insets</th><th>描述</th></tr></thead><tbody><tr><td><code>statusBars</code></td><td>状态栏</td></tr><tr><td><code>navigationBars</code></td><td>导航栏</td></tr><tr><td><code>systemBars</code></td><td>系统栏 (<code>statusBars</code> + <code>navigationBars</code>)</td></tr></tbody></table><h3 id="系统栏-状态栏、导航栏等" tabindex="-1"><a class="header-anchor" href="#系统栏-状态栏、导航栏等" aria-hidden="true">#</a> 系统栏 (状态栏、导航栏等)</h3>`,56),nn={class:"custom-container tip"},an=s("p",{class:"custom-container-title"},"本节内容",-1),en={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.systembar/-system-bars-controller",target:"_blank",rel:"noopener noreferrer"},ln=s("p",null,"系统栏控制器。",-1),on={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.proxy/-i-system-bars-controller",target:"_blank",rel:"noopener noreferrer"},pn=s("p",null,"系统栏控制器接口。",-1),tn={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.systembar.style/-system-bar-style",target:"_blank",rel:"noopener noreferrer"},cn=s("p",null,"系统栏的样式。",-1),rn={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.systembar.type/-system-bars",target:"_blank",rel:"noopener noreferrer"},dn=s("p",null,"系统栏的类型。",-1),yn={href:"https://betterandroid.github.io/BetterAndroid/KDoc/ui-component/ui-component/com.highcapable.betterandroid.ui.component.systembar.type/-system-bar-behavior",target:"_blank",rel:"noopener noreferrer"},An=s("p",null,"系统栏的行为。",-1),vn=l(`<p>Android 开发的严重适配问题就在于终端设备没有统一开发规范的混乱性。</p><p>为了给用户带来更好的体验，状态栏、导航栏何时应该显示、隐藏，状态栏、导航栏的颜色、背景等等，这些都是开发者在开发过程中需要考虑的问题。</p><p>所以 <code>BetterAndroid</code> 对接并封装了 <code>androidx</code> 所提供的系统栏适配方案，并将其集成到了 <code>SystemBarsController</code> 中，现在，你可以非常方便地来调用它去轻松实现操作系统栏的一系列解决方案。</p><p><code>SystemBarsController</code> 最低支持到 Android 5.0，并解决了部分厂商定制系统中的兼容性问题。</p><p><code>AppBindingActivity</code>、<code>AppViewsActivity</code>、<code>AppComponentActivity</code>、<code>AppBindingFragment</code>、<code>AppViewsFragment</code> 已经默认实现了 <code>ISystemBarsController</code> 接口，你可以直接使用 <code>systemBars</code> 获取 <code>SystemBarsController</code>。</p><p>但是你依然可以在 <code>Activity</code> 中使用 <code>Activity.getWindow</code> 对象手动创建一个 <code>SystemBarsController</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">class</span><span style="color:#ADBAC7;"> </span><span style="color:#F69D50;">YourActivity</span><span style="color:#ADBAC7;"> : </span><span style="color:#F69D50;">AppCompatActivity</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 创建一个懒加载对象</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> systemBars </span><span style="color:#F47067;">by</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">lazy</span><span style="color:#ADBAC7;"> { SystemBarsController.</span><span style="color:#DCBDFB;">from</span><span style="color:#ADBAC7;">(window) }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState: </span><span style="color:#F69D50;">Bundle</span><span style="color:#ADBAC7;">?) {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">onCreate</span><span style="color:#ADBAC7;">(savedInstanceState)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 创建你的 binding</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> binding </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> ActivityMainBinding.</span><span style="color:#DCBDFB;">inflate</span><span style="color:#ADBAC7;">(layoutInflater)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">setContentView</span><span style="color:#ADBAC7;">(binding.root)</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 使用当前根布局初始化 systemBars</span></span>
<span class="line"><span style="color:#ADBAC7;">        systemBars.</span><span style="color:#DCBDFB;">init</span><span style="color:#ADBAC7;">(binding.root)</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">onDestroy</span><span style="color:#ADBAC7;">() {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">onDestroy</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 销毁 systemBars，这会还原初始化之前的状态</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 可选，防止内存泄漏</span></span>
<span class="line"><span style="color:#ADBAC7;">        systemBars.</span><span style="color:#DCBDFB;">destroy</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>在使用 <code>init</code> 方法时，推荐并建议传入你自己的根布局，否则将默认使用 <code>android.R.id.content</code> 作为根布局。</p><p>你<u><strong>应该避免使用它作为根布局</strong></u>，这是不可控的，你应该做到在 <code>Activity</code> 中能够随时维护一个自己的根布局。</p><p>如果你并未使用 <code>ViewBinding</code>，<code>AppViewsActivity</code>、<code>AppComponentActivity</code> 已经默认为你重写了 <code>setContentView</code> 方法， 它会在你使用这个方法的时候自动装载你的根布局到 <code>SystemBarsController</code> 中。</p><p>你也可以手动重写 <code>setContentView</code> 方法来实现这个功能。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#F47067;">override</span><span style="color:#ADBAC7;"> </span><span style="color:#F47067;">fun</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">setContentView</span><span style="color:#ADBAC7;">(layoutResID: </span><span style="color:#F69D50;">Int</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#6CB6FF;">super</span><span style="color:#ADBAC7;">.</span><span style="color:#DCBDFB;">setContentView</span><span style="color:#ADBAC7;">(layoutResID)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 第一位子布局即你的根布局</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> rootView </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">findViewById</span><span style="color:#ADBAC7;">&lt;</span><span style="color:#F69D50;">ViewGroup</span><span style="color:#ADBAC7;">&gt;(android.R.id.content).</span><span style="color:#DCBDFB;">getChildAt</span><span style="color:#ADBAC7;">(</span><span style="color:#6CB6FF;">0</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 使用当前根布局初始化 systemBars</span></span>
<span class="line"><span style="color:#ADBAC7;">    systemBars.</span><span style="color:#DCBDFB;">init</span><span style="color:#ADBAC7;">(rootView)</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>下面是 <code>SystemBarsController</code> 的详细用法介绍。</p><p>初始化 <code>SystemBarsController</code> 及处理根布局的 Window Insets <code>padding</code>。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 假设这就是你当前的根布局</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> rootView: </span><span style="color:#F69D50;">ViewGroup</span></span>
<span class="line"><span style="color:#768390;">// 初始化 SystemBarsController</span></span>
<span class="line"><span style="color:#768390;">// 你的根布局必须已经被设置到了一个父布局中，否则将会抛出异常</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">init</span><span style="color:#ADBAC7;">(rootView)</span></span>
<span class="line"><span style="color:#768390;">// 你可以自定义处理根布局的 Window Insets</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">init</span><span style="color:#ADBAC7;">(rootView, edgeToEdgeInsets </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> { systemBars })</span></span>
<span class="line"><span style="color:#768390;">// 如果你不希望 SystemBarsController 自动为你处理根布局的 Window Insets，</span></span>
<span class="line"><span style="color:#768390;">// 你可以直接设置 edgeToEdgeInsets 为 null</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">init</span><span style="color:#ADBAC7;">(rootView, edgeToEdgeInsets </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">null</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p><code>SystemBarsController</code> 初始化时会自动设置 <code>Window.setDecorFitsSystemWindows(false)</code> (在异形屏设备上会同时设置 <code>layoutInDisplayCutoutMode</code> 为 <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES</code>)， 你只要在 <code>init</code> 中设置了 <code>edgeToEdgeInsets</code> (默认设置)， 那么你的根布局将会拥有一个 <code>safeDrawingIgnoringIme</code> 控制的 Window Insets <code>padding</code>，这也是为什么你应该做到在 <code>Activity</code> 中能够随时维护一个自己的根布局。</p><p>如果你在 <code>init</code> 中将 <code>edgeToEdgeInsets</code> 设为了 <code>null</code>，那么你的根布局将会完全扩展到全屏。</p><p>以上效果等同于 <code>androidx.activity:activity</code> 中提供的 <code>enableEdgeToEdge</code>。</p><p>在不做出任何操作的情况下，你的布局就会被系统栏或系统的危险区域 (例如异形屏的挖空处) 遮挡，这会影响用户体验。</p><p>如果你想自己维护并管理当前根布局的 <code>padding</code>，你必须确保你的界面元素能够正确适应 Window Insets 提供的间距，你可以前往上一节的 <a href="#%E8%BE%B9%E8%A1%AC%E5%8C%BA-insets">边衬区 (Insets)</a> 了解更多关于 Window Insets 的内容。</p><p>你不再需要使用 <code>enableEdgeToEdge</code>，<code>SystemBarsController</code> 初始化后默认将持有此效果，你应该使用 <code>edgeToEdgeInsets</code> 来控制根布局的 Window Insets <code>padding</code>。</p></div>`,14),un={class:"custom-container tip"},Bn=s("p",{class:"custom-container-title"},"小提示",-1),mn=s("code",null,"AppComponentActivity",-1),Dn=s("code",null,"edgeToEdgeInsets = null",-1),Cn=s("code",null,"SystemBarsController",-1),bn=s("code",null,"BetterAndroid",-1),Fn=l(`<p>设置系统栏的行为。</p><p>这决定了显示或隐藏系统栏时由系统控制的行为。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">systemBars.behavior </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> SystemBarBehavior.SHOW_TRANSIENT_BARS_BY_SWIPE</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下是 <code>SystemBarBehavior</code> 中提供的全部行为，标有 <code>*</code> 的为默认行为。</p><table><thead><tr><th>行为</th><th>描述</th></tr></thead><tbody><tr><td><code>DEFAULT</code></td><td>由系统控制的默认行为</td></tr><tr><td>*<code>SHOW_TRANSIENT_BARS_BY_SWIPE</code></td><td>在全屏时可由手势滑动弹出并显示为半透明的系统栏，并在一段时间后继续隐藏</td></tr></tbody></table><p>显示、隐藏系统栏。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 进入沉浸模式 (全屏模式)</span></span>
<span class="line"><span style="color:#768390;">// 同时隐藏状态栏和导航栏</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">hide</span><span style="color:#ADBAC7;">(SystemBars.ALL)</span></span>
<span class="line"><span style="color:#768390;">// 单独控制状态栏和导航栏</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">hide</span><span style="color:#ADBAC7;">(SystemBars.STATUS_BARS)</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">hide</span><span style="color:#ADBAC7;">(SystemBars.NAVIGATION_BARS)</span></span>
<span class="line"><span style="color:#768390;">// 退出沉浸模式 (全屏模式)</span></span>
<span class="line"><span style="color:#768390;">// 同时显示状态栏和导航栏</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">show</span><span style="color:#ADBAC7;">(SystemBars.ALL)</span></span>
<span class="line"><span style="color:#768390;">// 单独控制状态栏和导航栏</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">show</span><span style="color:#ADBAC7;">(SystemBars.STATUS_BARS)</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">show</span><span style="color:#ADBAC7;">(SystemBars.NAVIGATION_BARS)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),hn={class:"custom-container tip"},gn=s("p",{class:"custom-container-title"},"小提示",-1),kn=l(`<p>设置系统栏的样式。</p><p>你可以自定义状态栏、导航栏的外观。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>在 Android 6.0 以下系统中，状态栏的内容不支持反色，如果你设置了亮色则会自动处理为半透明遮罩，但是对于 MIUI、Flyme 自行添加了反色功能的系统将使用其私有方案实现反色效果。</p><p>在 Android 8 以下系统中，导航栏的内容不支持反色，处理方式同上。</p></div><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 设置状态栏的样式</span></span>
<span class="line"><span style="color:#768390;">// 注意：请确保引入 com.highcapable.betterandroid.ui.component.systembar.style</span></span>
<span class="line"><span style="color:#768390;">//      包名下的 SystemBarStyle，而不是 androidx.activity.SystemBarStyle</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.statusBarStyle </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">SystemBarStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置背景颜色</span></span>
<span class="line"><span style="color:#ADBAC7;">    color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.WHITE,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置内容颜色</span></span>
<span class="line"><span style="color:#ADBAC7;">    darkContent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 设置导航栏的样式</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.navigationBarStyle </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">SystemBarStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置背景颜色</span></span>
<span class="line"><span style="color:#ADBAC7;">    color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.WHITE,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 设置内容颜色</span></span>
<span class="line"><span style="color:#ADBAC7;">    darkContent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 你可以一次性设置状态栏和导航栏的样式</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">setStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    statusBar </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">SystemBarStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.WHITE,</span></span>
<span class="line"><span style="color:#ADBAC7;">        darkContent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">    ),</span></span>
<span class="line"><span style="color:#ADBAC7;">    navigationBar </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">SystemBarStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.WHITE,</span></span>
<span class="line"><span style="color:#ADBAC7;">        darkContent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#768390;">// 你也可以同时设置状态栏和导航栏的样式</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">setStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    style </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#DCBDFB;">SystemBarStyle</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">        color </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Color.WHITE,</span></span>
<span class="line"><span style="color:#ADBAC7;">        darkContent </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">true</span></span>
<span class="line"><span style="color:#ADBAC7;">    )</span></span>
<span class="line"><span style="color:#ADBAC7;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是 <code>SystemBarStyle</code> 中提供的预置样式，标有 <code>*</code> 的为默认样式。</p><table><thead><tr><th>样式</th><th>描述</th></tr></thead><tbody><tr><td><code>Auto</code></td><td>系统深色模式下为纯黑背景 + 浅色内容颜色，浅色模式下为纯白背景 + 深色内容颜色</td></tr><tr><td>*<code>AutoTransparent</code></td><td>系统深色模式下为浅色内容颜色，浅色模式下为深色内容颜色，背景透明</td></tr><tr><td><code>Light</code></td><td>纯白背景 + 深色内容颜色</td></tr><tr><td><code>LightScrim</code></td><td>半透明纯白背景 + 深色内容颜色</td></tr><tr><td><code>LightTransparent</code></td><td>透明背景 + 深色内容颜色</td></tr><tr><td><code>Dark</code></td><td>纯黑背景 + 浅色内容颜色</td></tr><tr><td><code>DarkScrim</code></td><td>半透明纯黑背景 + 浅色内容颜色</td></tr><tr><td><code>DarkTransparent</code></td><td>透明背景 + 浅色内容颜色</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>在应用程序首次冷启动时，系统栏的颜色将跟随你在 <code>styles.xml</code> 中设置的属性而决定。</p><p>为了能在冷启动时带来更好的用户体验，你可以参考以下示例。</p><blockquote><p>示例如下</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#ADBAC7;">&lt;</span><span style="color:#8DDB8C;">style</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;Theme.MyApp.Demo&quot;</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">parent</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;Theme.MaterialComponents.DayNight.NoActionBar&quot;</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">&lt;!-- 设置状态栏颜色 --&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">item</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;android:statusBarColor&quot;</span><span style="color:#ADBAC7;">&gt;@color/colorPrimary&lt;/</span><span style="color:#8DDB8C;">item</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">&lt;!-- 设置导航栏颜色 --&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">item</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;android:navigationBarColor&quot;</span><span style="color:#ADBAC7;">&gt;@color/colorPrimary&lt;/</span><span style="color:#8DDB8C;">item</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">&lt;!-- 设置状态栏内容颜色 --&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">item</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;android:windowLightStatusBar&quot;</span><span style="color:#ADBAC7;">&gt;true&lt;/</span><span style="color:#8DDB8C;">item</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">&lt;!-- 设置导航栏内容颜色 --&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">    &lt;</span><span style="color:#8DDB8C;">item</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">name</span><span style="color:#ADBAC7;">=</span><span style="color:#96D0FF;">&quot;android:windowLightNavigationBar&quot;</span><span style="color:#ADBAC7;">&gt;true&lt;/</span><span style="color:#8DDB8C;">item</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="color:#ADBAC7;">&lt;/</span><span style="color:#8DDB8C;">style</span><span style="color:#ADBAC7;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>销毁 <code>SystemBarsController</code>。</p><p>这会还原初始化之前的状态，包括初始化之前的状态栏、导航栏颜色等。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#768390;">// 销毁 SystemBarsController，这会还原初始化之前的状态</span></span>
<span class="line"><span style="color:#ADBAC7;">systemBars.</span><span style="color:#DCBDFB;">destroy</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#768390;">// 你可以随时使用 isDestroyed 判断当前 SystemBarsController 是否已被销毁</span></span>
<span class="line"><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> isDestroyed </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> systemBars.isDestroyed</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>在使用 <code>SystemBarsController</code> 后，当前根布局 <code>rootView</code> 的 <code>WindowInsetsController</code> 已被其自动接管， 请不要手动设置 <code>WindowInsetsController</code> 中的 <code>isAppearanceLightStatusBars</code>、<code>isAppearanceLightNavigationBars</code> 等参数， 这可能会导致 <code>statusBarStyle</code>、<code>navigationBarStyle</code>、<code>setStyle</code> 等功能的实际效果显示异常。</p></div>`,13);function _n(wn,In){const e=t("ExternalLinkIcon"),o=t("RouterLink");return c(),r("div",null,[y,s("p",null,[n("你可以 "),s("a",A,[n("点击这里"),a(e)]),n(" 查看 KDoc。")]),s("div",v,[u,s("p",null,[n("适配器 (Adapter) 相关功能已被分离为一个独立的模块 "),a(o,{to:"/zh-cn/library/ui-component-adapter.html"},{default:p(()=>[n("ui-component-adapter")]),_:1}),n("，后期将单独进行更新。")])]),B,s("div",m,[D,s("p",null,[s("a",C,[n("AppBindingActivity"),a(e)])]),b,s("p",null,[s("a",F,[n("AppViewsActivity"),a(e)])]),h,s("p",null,[s("a",g,[n("AppComponentActivity"),a(e)])]),k,_]),s("div",w,[I,s("p",null,[n("下方的预置组件都实现了 "),s("a",f,[n("IBackPressedController"),a(e)]),n("、 "),s("a",W,[n("ISystemBarsController"),a(e)]),n(" 接口。")]),q]),x,s("div",S,[V,s("p",null,[n("有关 Jetpack Compose 的相关扩展你可以参考 "),a(o,{to:"/zh-cn/library/compose-extension.html"},{default:p(()=>[n("compose-extension")]),_:1}),n("、"),a(o,{to:"/zh-cn/library/compose-multiplatform.html"},{default:p(()=>[n("compose-multiplatform")]),_:1}),n("。")]),s("p",null,[E,n(" 同样为 "),P,n(" 提供了相关扩展，你可以参考 "),a(o,{to:"/zh-cn/library/ui-extension.html#activity-%E6%89%A9%E5%B1%95"},{default:p(()=>[n("ui-extension → Activity 扩展")]),_:1}),n("。")])]),N,s("div",T,[M,s("p",null,[s("a",L,[n("AppBindingFragment"),a(e)])]),R,s("p",null,[s("a",K,[n("AppViewsFragment"),a(e)])]),H]),s("div",O,[G,s("p",null,[n("下方的预置组件都实现了 "),s("a",U,[n("IBackPressedController"),a(e)]),n("、 "),s("a",z,[n("ISystemBarsController"),a(e)]),n(" 接口。")]),Y]),J,s("div",j,[Q,s("p",null,[X,n(" 同样为 "),Z,n(" 提供了相关扩展，你可以参考 "),a(o,{to:"/zh-cn/library/ui-extension.html#fragment-%E6%89%A9%E5%B1%95"},{default:p(()=>[n("ui-extension → Fragment 扩展")]),_:1}),n("。")])]),$,s("div",ss,[ns,s("p",null,[s("a",as,[n("BackPressedController"),a(e)])]),es,s("p",null,[s("a",ls,[n("OnBackPressedCallback"),a(e)])]),os,s("p",null,[s("a",ps,[n("IBackPressedController"),a(e)])]),ts]),is,s("div",cs,[rs,s("p",null,[s("a",ds,[n("NotificationBuilder"),a(e)])]),ys,s("p",null,[s("a",As,[n("NotificationChannelBuilder"),a(e)])]),vs,s("p",null,[s("a",us,[n("NotificationChannelGroupBuilder"),a(e)])]),Bs,s("p",null,[s("a",ms,[n("NotificationImportance"),a(e)])]),Ds,s("p",null,[s("a",Cs,[n("NotificationPoster"),a(e)])]),bs,s("p",null,[s("a",Fs,[n("Notification"),a(e)])]),hs]),gs,s("div",ks,[_s,ws,Is,s("p",null,[n("请参考 "),s("a",fs,[n("Notification runtime permission"),a(e)]),n("。")])]),Ws,s("div",qs,[xs,Ss,Vs,s("p",null,[n("请参考 "),s("a",Es,[n("Create and manage notification channels"),a(e)]),n("。")])]),Ps,s("div",Ns,[Ts,s("p",null,[s("a",Ms,[n("WindowInsetsWrapper"),a(e)])]),Ls,s("p",null,[s("a",Rs,[n("WindowInsetsWrapper.Absolute"),a(e)])]),Ks,s("p",null,[s("a",Hs,[n("InsetsWrapper"),a(e)])]),Os,s("p",null,[s("a",Gs,[n("Insets"),a(e)])]),Us]),s("div",zs,[Ys,s("p",null,[n("“边衬区” 是来自 "),s("a",Js,[n("Android 开发者文档"),a(e)]),n(" 的简体中文翻译，请以英文原版的 Insets 为准。")])]),js,s("div",Qs,[Xs,s("p",null,[Zs,n(" 是参照 Jetpack Compose 官方提供的 "),s("a",$s,[n("Window Insets API"),a(e)]),n(" 设计的，你能够更加有好的在原生层面上使用这套 API。")])]),sn,s("div",nn,[an,s("p",null,[s("a",en,[n("SystemBarsController"),a(e)])]),ln,s("p",null,[s("a",on,[n("ISystemBarsController"),a(e)])]),pn,s("p",null,[s("a",tn,[n("SystemBarStyle"),a(e)])]),cn,s("p",null,[s("a",rn,[n("SystemBars"),a(e)])]),dn,s("p",null,[s("a",yn,[n("SystemBarBehavior"),a(e)])]),An]),vn,s("div",un,[Bn,s("p",null,[n("在 Jetpack Compose 中，你可以使用 "),mn,n(" 来获得一个设置了 "),Dn,n(" 初始化的 "),Cn,n("， 然后使用 Jetpack Compose 的方式去设置 Window Insets，"),bn,n(" 同样为其提供了扩展支持，更多功能你可以参考 "),a(o,{to:"/zh-cn/library/compose-multiplatform.html"},{default:p(()=>[n("compose-multiplatform")]),_:1}),n("。")])]),Fn,s("div",hn,[gn,s("p",null,[n("如果你需要控制输入法 (IME) 的显示与隐藏，你可以参考 "),a(o,{to:"/zh-cn/library/ui-extension.html#view-%E6%89%A9%E5%B1%95"},{default:p(()=>[n("ui-extension → View 扩展")]),_:1}),n("。")])]),kn])}const Wn=i(d,[["render",_n],["__file","ui-component.html.vue"]]);export{Wn as default};
